/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
export type PutUsersId200AllOf = {
  role?: UsersPermissionsRole;
};

export type PutUsersId200 = UsersPermissionsUser & PutUsersId200AllOf;

export type PutUsersIdBody = {
  email: string;
  username: string;
  password: string;
};

export type PostUsers201AllOf = {
  role?: UsersPermissionsRole;
};

export type PostUsers201 = UsersPermissionsUser & PostUsers201AllOf;

export type PostUsersBody = {
  email: string;
  username: string;
  password: string;
};

export type DeleteUsersPermissionsRolesRole200Ok = typeof DeleteUsersPermissionsRolesRole200Ok[keyof typeof DeleteUsersPermissionsRolesRole200Ok];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteUsersPermissionsRolesRole200Ok = {
  true: 'true',
} as const;

export type DeleteUsersPermissionsRolesRole200 = {
  ok?: DeleteUsersPermissionsRolesRole200Ok;
};

export type PutUsersPermissionsRolesRole200Ok = typeof PutUsersPermissionsRolesRole200Ok[keyof typeof PutUsersPermissionsRolesRole200Ok];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PutUsersPermissionsRolesRole200Ok = {
  true: 'true',
} as const;

export type PutUsersPermissionsRolesRole200 = {
  ok?: PutUsersPermissionsRolesRole200Ok;
};

export type GetUsersPermissionsRolesId200 = {
  role?: UsersPermissionsRole;
};

export type PostUsersPermissionsRoles200Ok = typeof PostUsersPermissionsRoles200Ok[keyof typeof PostUsersPermissionsRoles200Ok];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostUsersPermissionsRoles200Ok = {
  true: 'true',
} as const;

export type PostUsersPermissionsRoles200 = {
  ok?: PostUsersPermissionsRoles200Ok;
};

export type GetUsersPermissionsRoles200RolesItemAllOf = {
  nb_users?: number;
};

export type GetUsersPermissionsRoles200RolesItem = UsersPermissionsRole & GetUsersPermissionsRoles200RolesItemAllOf;

export type GetUsersPermissionsRoles200 = {
  roles?: GetUsersPermissionsRoles200RolesItem[];
};

export type GetUsersPermissionsPermissions200 = {
  permissions?: UsersPermissionsPermissionsTree;
};

export type PostAuthSendEmailConfirmation200Sent = typeof PostAuthSendEmailConfirmation200Sent[keyof typeof PostAuthSendEmailConfirmation200Sent];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostAuthSendEmailConfirmation200Sent = {
  true: 'true',
} as const;

export type PostAuthSendEmailConfirmation200 = {
  email?: string;
  sent?: PostAuthSendEmailConfirmation200Sent;
};

export type PostAuthSendEmailConfirmationBody = {
  email?: string;
};

export type GetAuthEmailConfirmationParams = {
/**
 * confirmation token received by email
 */
confirmation?: string;
};

export type PostAuthChangePasswordBody = {
  password: string;
  currentPassword: string;
  passwordConfirmation: string;
};

export type PostAuthResetPasswordBody = {
  password?: string;
  passwordConfirmation?: string;
  code?: string;
};

export type PostAuthForgotPassword200Ok = typeof PostAuthForgotPassword200Ok[keyof typeof PostAuthForgotPassword200Ok];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostAuthForgotPassword200Ok = {
  true: 'true',
} as const;

export type PostAuthForgotPassword200 = {
  ok?: PostAuthForgotPassword200Ok;
};

export type PostAuthForgotPasswordBody = {
  email?: string;
};

export type PostAuthLocalRegisterBody = {
  username?: string;
  email?: string;
  password?: string;
};

export type PostAuthLocalBody = {
  identifier?: string;
  password?: string;
};

export type PostUploadBody = {
  /** The folder where the file(s) will be uploaded to (only supported on strapi-provider-upload-aws-s3). */
  path?: string;
  /** The ID of the entry which the file(s) will be linked to */
  refId?: string;
  /** The unique ID (uid) of the model which the file(s) will be linked to (api::restaurant.restaurant). */
  ref?: string;
  /** The field of the entry which the file(s) will be precisely linked to. */
  field?: string;
  files: Blob[];
};

export type GetMetadataParams = {
/**
 * Sort by attributes ascending (asc) or descending (desc)
 */
sort?: string;
/**
 * Return page/pageSize (default: true)
 */
'pagination[withCount]'?: boolean;
/**
 * Page number (default: 0)
 */
'pagination[page]'?: number;
/**
 * Page size (default: 25)
 */
'pagination[pageSize]'?: number;
/**
 * Offset value (default: 0)
 */
'pagination[start]'?: number;
/**
 * Number of entities to return (default: 25)
 */
'pagination[limit]'?: number;
/**
 * Fields to return (ex: title,author)
 */
fields?: string;
/**
 * Relations to return
 */
populate?: string;
/**
 * Filters to apply
 */
filters?: { [key: string]: any };
/**
 * Locale to apply
 */
locale?: string;
};

export type GetMapboxLayersParams = {
/**
 * Sort by attributes ascending (asc) or descending (desc)
 */
sort?: string;
/**
 * Return page/pageSize (default: true)
 */
'pagination[withCount]'?: boolean;
/**
 * Page number (default: 0)
 */
'pagination[page]'?: number;
/**
 * Page size (default: 25)
 */
'pagination[pageSize]'?: number;
/**
 * Offset value (default: 0)
 */
'pagination[start]'?: number;
/**
 * Number of entities to return (default: 25)
 */
'pagination[limit]'?: number;
/**
 * Fields to return (ex: title,author)
 */
fields?: string;
/**
 * Relations to return
 */
populate?: string;
/**
 * Filters to apply
 */
filters?: { [key: string]: any };
/**
 * Locale to apply
 */
locale?: string;
};

export type GetDeckGlLayersParams = {
/**
 * Sort by attributes ascending (asc) or descending (desc)
 */
sort?: string;
/**
 * Return page/pageSize (default: true)
 */
'pagination[withCount]'?: boolean;
/**
 * Page number (default: 0)
 */
'pagination[page]'?: number;
/**
 * Page size (default: 25)
 */
'pagination[pageSize]'?: number;
/**
 * Offset value (default: 0)
 */
'pagination[start]'?: number;
/**
 * Number of entities to return (default: 25)
 */
'pagination[limit]'?: number;
/**
 * Fields to return (ex: title,author)
 */
fields?: string;
/**
 * Relations to return
 */
populate?: string;
/**
 * Filters to apply
 */
filters?: { [key: string]: any };
/**
 * Locale to apply
 */
locale?: string;
};

export type GetDatasetGroupsParams = {
/**
 * Sort by attributes ascending (asc) or descending (desc)
 */
sort?: string;
/**
 * Return page/pageSize (default: true)
 */
'pagination[withCount]'?: boolean;
/**
 * Page number (default: 0)
 */
'pagination[page]'?: number;
/**
 * Page size (default: 25)
 */
'pagination[pageSize]'?: number;
/**
 * Offset value (default: 0)
 */
'pagination[start]'?: number;
/**
 * Number of entities to return (default: 25)
 */
'pagination[limit]'?: number;
/**
 * Fields to return (ex: title,author)
 */
fields?: string;
/**
 * Relations to return
 */
populate?: string;
/**
 * Filters to apply
 */
filters?: { [key: string]: any };
/**
 * Locale to apply
 */
locale?: string;
};

export type GetDatasetsParams = {
/**
 * Sort by attributes ascending (asc) or descending (desc)
 */
sort?: string;
/**
 * Return page/pageSize (default: true)
 */
'pagination[withCount]'?: boolean;
/**
 * Page number (default: 0)
 */
'pagination[page]'?: number;
/**
 * Page size (default: 25)
 */
'pagination[pageSize]'?: number;
/**
 * Offset value (default: 0)
 */
'pagination[start]'?: number;
/**
 * Number of entities to return (default: 25)
 */
'pagination[limit]'?: number;
/**
 * Fields to return (ex: title,author)
 */
fields?: string;
/**
 * Relations to return
 */
populate?: string;
/**
 * Filters to apply
 */
filters?: { [key: string]: any };
/**
 * Locale to apply
 */
locale?: string;
};

/**
 * every controller of the api
 */
export type UsersPermissionsPermissionsTreeControllers = {[key: string]: {[key: string]: {
  enabled?: boolean;
  policy?: string;
}}};

export interface UsersPermissionsPermissionsTree {[key: string]: {
  /** every controller of the api */
  controllers?: UsersPermissionsPermissionsTreeControllers;
}}

export type UsersPermissionsRoleRequestBody = {
  name?: string;
  description?: string;
  type?: string;
  permissions?: UsersPermissionsPermissionsTree;
};

export interface UsersPermissionsUser {
  id?: number;
  username?: string;
  email?: string;
  provider?: string;
  confirmed?: boolean;
  blocked?: boolean;
  createdAt?: string;
  updatedAt?: string;
}

export interface UsersPermissionsUserRegistration {
  jwt?: string;
  user?: UsersPermissionsUser;
}

export interface UsersPermissionsRole {
  id?: number;
  name?: string;
  description?: string;
  type?: string;
  createdAt?: string;
  updatedAt?: string;
}

export type UploadFileProviderMetadata = { [key: string]: any };

export interface UploadFile {
  id?: number;
  name?: string;
  alternativeText?: string;
  caption?: string;
  width?: number;
  height?: number;
  formats?: number;
  hash?: string;
  ext?: string;
  mime?: string;
  size?: number;
  url?: string;
  previewUrl?: string;
  provider?: string;
  provider_metadata?: UploadFileProviderMetadata;
  createdAt?: string;
  updatedAt?: string;
}

export type MetadatumResponseMeta = { [key: string]: any };

export interface MetadatumResponseDataObject {
  id?: number;
  attributes?: Metadatum;
}

export interface MetadatumResponse {
  data?: MetadatumResponseDataObject;
  meta?: MetadatumResponseMeta;
}

export type MetadatumUpdatedByDataAttributes = { [key: string]: any };

export type MetadatumUpdatedByData = {
  id?: number;
  attributes?: MetadatumUpdatedByDataAttributes;
};

export type MetadatumUpdatedBy = {
  data?: MetadatumUpdatedByData;
};

export type MetadatumCreatedByDataAttributes = { [key: string]: any };

export type MetadatumCreatedByData = {
  id?: number;
  attributes?: MetadatumCreatedByDataAttributes;
};

export type MetadatumCreatedBy = {
  data?: MetadatumCreatedByData;
};

export type MetadatumTimeIntervals = typeof MetadatumTimeIntervals[keyof typeof MetadatumTimeIntervals];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MetadatumTimeIntervals = {
  daily: 'daily',
  monthly: 'monthly',
  yearly: 'yearly',
  quarterly: 'quarterly',
  other: 'other',
} as const;

export interface Metadatum {
  dataset?: MetadatumDataset;
  description: string;
  source?: string;
  citation?: string;
  start_date?: string;
  end_date?: string;
  time_intervals?: MetadatumTimeIntervals;
  data_download?: string;
  createdAt?: string;
  updatedAt?: string;
  publishedAt?: string;
  createdBy?: MetadatumCreatedBy;
  updatedBy?: MetadatumUpdatedBy;
}

export type MetadatumDatasetDataAttributes = {
  title?: string;
  dataset_group?: MetadatumDatasetDataAttributesDatasetGroup;
  metadatum?: MetadatumDatasetDataAttributesMetadatum;
  deckgl_layers?: MetadatumDatasetDataAttributesDeckglLayers;
  mapbox_layers?: MetadatumDatasetDataAttributesMapboxLayers;
  createdAt?: string;
  updatedAt?: string;
  publishedAt?: string;
  createdBy?: MetadatumDatasetDataAttributesCreatedBy;
  updatedBy?: MetadatumDatasetDataAttributesUpdatedBy;
};

export type MetadatumDatasetData = {
  id?: number;
  attributes?: MetadatumDatasetDataAttributes;
};

export type MetadatumDataset = {
  data?: MetadatumDatasetData;
};

export type MetadatumDatasetDataAttributesUpdatedByDataAttributes = { [key: string]: any };

export type MetadatumDatasetDataAttributesUpdatedByData = {
  id?: number;
  attributes?: MetadatumDatasetDataAttributesUpdatedByDataAttributes;
};

export type MetadatumDatasetDataAttributesUpdatedBy = {
  data?: MetadatumDatasetDataAttributesUpdatedByData;
};

export type MetadatumDatasetDataAttributesCreatedByDataAttributes = { [key: string]: any };

export type MetadatumDatasetDataAttributesCreatedByData = {
  id?: number;
  attributes?: MetadatumDatasetDataAttributesCreatedByDataAttributes;
};

export type MetadatumDatasetDataAttributesCreatedBy = {
  data?: MetadatumDatasetDataAttributesCreatedByData;
};

export type MetadatumDatasetDataAttributesMapboxLayersDataItem = {
  id?: number;
  attributes?: MetadatumDatasetDataAttributesMapboxLayersDataItemAttributes;
};

export type MetadatumDatasetDataAttributesMapboxLayers = {
  data?: MetadatumDatasetDataAttributesMapboxLayersDataItem[];
};

export type MetadatumDatasetDataAttributesMapboxLayersDataItemAttributesUpdatedByDataAttributes = { [key: string]: any };

export type MetadatumDatasetDataAttributesMapboxLayersDataItemAttributesUpdatedByData = {
  id?: number;
  attributes?: MetadatumDatasetDataAttributesMapboxLayersDataItemAttributesUpdatedByDataAttributes;
};

export type MetadatumDatasetDataAttributesMapboxLayersDataItemAttributesUpdatedBy = {
  data?: MetadatumDatasetDataAttributesMapboxLayersDataItemAttributesUpdatedByData;
};

export type MetadatumDatasetDataAttributesMapboxLayersDataItemAttributesCreatedBy = {
  data?: MetadatumDatasetDataAttributesMapboxLayersDataItemAttributesCreatedByData;
};

export type MetadatumDatasetDataAttributesMapboxLayersDataItemAttributes = {
  dataset?: MetadatumDatasetDataAttributesMapboxLayersDataItemAttributesDataset;
  source?: unknown;
  params_config?: unknown;
  styles?: unknown;
  legend_config?: unknown;
  title?: string;
  createdAt?: string;
  updatedAt?: string;
  publishedAt?: string;
  createdBy?: MetadatumDatasetDataAttributesMapboxLayersDataItemAttributesCreatedBy;
  updatedBy?: MetadatumDatasetDataAttributesMapboxLayersDataItemAttributesUpdatedBy;
};

export type MetadatumDatasetDataAttributesMapboxLayersDataItemAttributesCreatedByDataAttributes = { [key: string]: any };

export type MetadatumDatasetDataAttributesMapboxLayersDataItemAttributesCreatedByData = {
  id?: number;
  attributes?: MetadatumDatasetDataAttributesMapboxLayersDataItemAttributesCreatedByDataAttributes;
};

export type MetadatumDatasetDataAttributesMapboxLayersDataItemAttributesDatasetDataAttributes = { [key: string]: any };

export type MetadatumDatasetDataAttributesMapboxLayersDataItemAttributesDatasetData = {
  id?: number;
  attributes?: MetadatumDatasetDataAttributesMapboxLayersDataItemAttributesDatasetDataAttributes;
};

export type MetadatumDatasetDataAttributesMapboxLayersDataItemAttributesDataset = {
  data?: MetadatumDatasetDataAttributesMapboxLayersDataItemAttributesDatasetData;
};

export type MetadatumDatasetDataAttributesDeckglLayersDataItemAttributes = {
  config?: unknown;
  dataset?: MetadatumDatasetDataAttributesDeckglLayersDataItemAttributesDataset;
  title?: string;
  params_config?: unknown;
  legend_config?: unknown;
  createdAt?: string;
  updatedAt?: string;
  publishedAt?: string;
  createdBy?: MetadatumDatasetDataAttributesDeckglLayersDataItemAttributesCreatedBy;
  updatedBy?: MetadatumDatasetDataAttributesDeckglLayersDataItemAttributesUpdatedBy;
};

export type MetadatumDatasetDataAttributesDeckglLayersDataItem = {
  id?: number;
  attributes?: MetadatumDatasetDataAttributesDeckglLayersDataItemAttributes;
};

export type MetadatumDatasetDataAttributesDeckglLayers = {
  data?: MetadatumDatasetDataAttributesDeckglLayersDataItem[];
};

export type MetadatumDatasetDataAttributesDeckglLayersDataItemAttributesUpdatedByDataAttributes = { [key: string]: any };

export type MetadatumDatasetDataAttributesDeckglLayersDataItemAttributesUpdatedByData = {
  id?: number;
  attributes?: MetadatumDatasetDataAttributesDeckglLayersDataItemAttributesUpdatedByDataAttributes;
};

export type MetadatumDatasetDataAttributesDeckglLayersDataItemAttributesUpdatedBy = {
  data?: MetadatumDatasetDataAttributesDeckglLayersDataItemAttributesUpdatedByData;
};

export type MetadatumDatasetDataAttributesDeckglLayersDataItemAttributesCreatedByDataAttributes = { [key: string]: any };

export type MetadatumDatasetDataAttributesDeckglLayersDataItemAttributesCreatedByData = {
  id?: number;
  attributes?: MetadatumDatasetDataAttributesDeckglLayersDataItemAttributesCreatedByDataAttributes;
};

export type MetadatumDatasetDataAttributesDeckglLayersDataItemAttributesCreatedBy = {
  data?: MetadatumDatasetDataAttributesDeckglLayersDataItemAttributesCreatedByData;
};

export type MetadatumDatasetDataAttributesDeckglLayersDataItemAttributesDatasetDataAttributes = { [key: string]: any };

export type MetadatumDatasetDataAttributesDeckglLayersDataItemAttributesDatasetData = {
  id?: number;
  attributes?: MetadatumDatasetDataAttributesDeckglLayersDataItemAttributesDatasetDataAttributes;
};

export type MetadatumDatasetDataAttributesDeckglLayersDataItemAttributesDataset = {
  data?: MetadatumDatasetDataAttributesDeckglLayersDataItemAttributesDatasetData;
};

export type MetadatumDatasetDataAttributesMetadatumData = {
  id?: number;
  attributes?: MetadatumDatasetDataAttributesMetadatumDataAttributes;
};

export type MetadatumDatasetDataAttributesMetadatum = {
  data?: MetadatumDatasetDataAttributesMetadatumData;
};

export type MetadatumDatasetDataAttributesMetadatumDataAttributesUpdatedByDataAttributes = { [key: string]: any };

export type MetadatumDatasetDataAttributesMetadatumDataAttributesUpdatedByData = {
  id?: number;
  attributes?: MetadatumDatasetDataAttributesMetadatumDataAttributesUpdatedByDataAttributes;
};

export type MetadatumDatasetDataAttributesMetadatumDataAttributesUpdatedBy = {
  data?: MetadatumDatasetDataAttributesMetadatumDataAttributesUpdatedByData;
};

export type MetadatumDatasetDataAttributesMetadatumDataAttributes = {
  dataset?: MetadatumDatasetDataAttributesMetadatumDataAttributesDataset;
  description?: string;
  source?: string;
  citation?: string;
  start_date?: string;
  end_date?: string;
  time_intervals?: MetadatumDatasetDataAttributesMetadatumDataAttributesTimeIntervals;
  data_download?: string;
  createdAt?: string;
  updatedAt?: string;
  publishedAt?: string;
  createdBy?: MetadatumDatasetDataAttributesMetadatumDataAttributesCreatedBy;
  updatedBy?: MetadatumDatasetDataAttributesMetadatumDataAttributesUpdatedBy;
};

export type MetadatumDatasetDataAttributesMetadatumDataAttributesCreatedByDataAttributes = { [key: string]: any };

export type MetadatumDatasetDataAttributesMetadatumDataAttributesCreatedByData = {
  id?: number;
  attributes?: MetadatumDatasetDataAttributesMetadatumDataAttributesCreatedByDataAttributes;
};

export type MetadatumDatasetDataAttributesMetadatumDataAttributesCreatedBy = {
  data?: MetadatumDatasetDataAttributesMetadatumDataAttributesCreatedByData;
};

export type MetadatumDatasetDataAttributesMetadatumDataAttributesTimeIntervals = typeof MetadatumDatasetDataAttributesMetadatumDataAttributesTimeIntervals[keyof typeof MetadatumDatasetDataAttributesMetadatumDataAttributesTimeIntervals];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MetadatumDatasetDataAttributesMetadatumDataAttributesTimeIntervals = {
  daily: 'daily',
  monthly: 'monthly',
  yearly: 'yearly',
  quarterly: 'quarterly',
  other: 'other',
} as const;

export type MetadatumDatasetDataAttributesMetadatumDataAttributesDatasetDataAttributes = { [key: string]: any };

export type MetadatumDatasetDataAttributesMetadatumDataAttributesDatasetData = {
  id?: number;
  attributes?: MetadatumDatasetDataAttributesMetadatumDataAttributesDatasetDataAttributes;
};

export type MetadatumDatasetDataAttributesMetadatumDataAttributesDataset = {
  data?: MetadatumDatasetDataAttributesMetadatumDataAttributesDatasetData;
};

export type MetadatumDatasetDataAttributesDatasetGroupData = {
  id?: number;
  attributes?: MetadatumDatasetDataAttributesDatasetGroupDataAttributes;
};

export type MetadatumDatasetDataAttributesDatasetGroup = {
  data?: MetadatumDatasetDataAttributesDatasetGroupData;
};

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesUpdatedByDataAttributes = { [key: string]: any };

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesUpdatedByData = {
  id?: number;
  attributes?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesUpdatedByDataAttributes;
};

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesUpdatedBy = {
  data?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesUpdatedByData;
};

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedBy = {
  data?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByData;
};

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributes = {
  title?: string;
  datasets?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesDatasets;
  createdAt?: string;
  updatedAt?: string;
  publishedAt?: string;
  createdBy?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedBy;
  updatedBy?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesUpdatedBy;
};

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByData = {
  id?: number;
  attributes?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributes;
};

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesUpdatedByDataAttributes = { [key: string]: any };

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesUpdatedByData = {
  id?: number;
  attributes?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesUpdatedByDataAttributes;
};

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesUpdatedBy = {
  data?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesUpdatedByData;
};

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributes = {
  firstname?: string;
  lastname?: string;
  username?: string;
  email?: string;
  resetPasswordToken?: string;
  registrationToken?: string;
  isActive?: boolean;
  roles?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRoles;
  blocked?: boolean;
  preferedLanguage?: string;
  createdAt?: string;
  updatedAt?: string;
  createdBy?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesCreatedBy;
  updatedBy?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesUpdatedBy;
};

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesCreatedByDataAttributes = { [key: string]: any };

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesCreatedByData = {
  id?: number;
  attributes?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesCreatedByDataAttributes;
};

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesCreatedBy = {
  data?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesCreatedByData;
};

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItem = {
  id?: number;
  attributes?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributes;
};

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRoles = {
  data?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItem[];
};

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedByDataAttributes = { [key: string]: any };

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedByData = {
  id?: number;
  attributes?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedByDataAttributes;
};

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedBy = {
  data?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedByData;
};

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedByDataAttributes = { [key: string]: any };

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedByData = {
  id?: number;
  attributes?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedByDataAttributes;
};

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedBy = {
  data?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedByData;
};

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissions = {
  data?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItem[];
};

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributes = {
  name?: string;
  code?: string;
  description?: string;
  users?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsers;
  permissions?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissions;
  createdAt?: string;
  updatedAt?: string;
  createdBy?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedBy;
  updatedBy?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedBy;
};

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedByDataAttributes = { [key: string]: any };

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedByData = {
  id?: number;
  attributes?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedByDataAttributes;
};

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedBy = {
  data?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedByData;
};

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedByDataAttributes = { [key: string]: any };

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedByData = {
  id?: number;
  attributes?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedByDataAttributes;
};

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedBy = {
  data?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedByData;
};

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRoleDataAttributes = { [key: string]: any };

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRoleData = {
  id?: number;
  attributes?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRoleDataAttributes;
};

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRole = {
  data?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRoleData;
};

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributes = {
  action?: string;
  subject?: string;
  properties?: unknown;
  conditions?: unknown;
  role?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRole;
  createdAt?: string;
  updatedAt?: string;
  createdBy?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedBy;
  updatedBy?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedBy;
};

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItem = {
  id?: number;
  attributes?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributes;
};

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsersDataItemAttributes = { [key: string]: any };

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsersDataItem = {
  id?: number;
  attributes?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsersDataItemAttributes;
};

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsers = {
  data?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsersDataItem[];
};

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesDatasetsDataItemAttributes = { [key: string]: any };

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesDatasetsDataItem = {
  id?: number;
  attributes?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesDatasetsDataItemAttributes;
};

export type MetadatumDatasetDataAttributesDatasetGroupDataAttributesDatasets = {
  data?: MetadatumDatasetDataAttributesDatasetGroupDataAttributesDatasetsDataItem[];
};

export type MetadatumListResponseMetaPagination = {
  page?: number;
  pageSize?: number;
  pageCount?: number;
  total?: number;
};

export type MetadatumListResponseMeta = {
  pagination?: MetadatumListResponseMetaPagination;
};

export interface MetadatumListResponseDataItem {
  id?: number;
  attributes?: Metadatum;
}

export interface MetadatumListResponse {
  data?: MetadatumListResponseDataItem[];
  meta?: MetadatumListResponseMeta;
}

export type MetadatumRequestDataTimeIntervals = typeof MetadatumRequestDataTimeIntervals[keyof typeof MetadatumRequestDataTimeIntervals];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MetadatumRequestDataTimeIntervals = {
  daily: 'daily',
  monthly: 'monthly',
  yearly: 'yearly',
  quarterly: 'quarterly',
  other: 'other',
} as const;

export type MetadatumRequestDataDataset = number | string;

export type MetadatumRequestData = {
  dataset?: MetadatumRequestDataDataset;
  description: string;
  source?: string;
  citation?: string;
  start_date?: string;
  end_date?: string;
  time_intervals?: MetadatumRequestDataTimeIntervals;
  data_download?: string;
};

export interface MetadatumRequest {
  data: MetadatumRequestData;
}

export type MapboxLayerResponseMeta = { [key: string]: any };

export interface MapboxLayerResponse {
  data?: MapboxLayerResponseDataObject;
  meta?: MapboxLayerResponseMeta;
}

export interface MapboxLayer {
  dataset?: MapboxLayerDataset;
  source: unknown;
  params_config?: unknown;
  styles?: unknown;
  legend_config: unknown;
  title: string;
  createdAt?: string;
  updatedAt?: string;
  publishedAt?: string;
  createdBy?: MapboxLayerCreatedBy;
  updatedBy?: MapboxLayerUpdatedBy;
}

export interface MapboxLayerResponseDataObject {
  id?: number;
  attributes?: MapboxLayer;
}

export type MapboxLayerUpdatedByDataAttributes = { [key: string]: any };

export type MapboxLayerUpdatedByData = {
  id?: number;
  attributes?: MapboxLayerUpdatedByDataAttributes;
};

export type MapboxLayerUpdatedBy = {
  data?: MapboxLayerUpdatedByData;
};

export type MapboxLayerCreatedByDataAttributes = { [key: string]: any };

export type MapboxLayerCreatedByData = {
  id?: number;
  attributes?: MapboxLayerCreatedByDataAttributes;
};

export type MapboxLayerCreatedBy = {
  data?: MapboxLayerCreatedByData;
};

export type MapboxLayerDatasetData = {
  id?: number;
  attributes?: MapboxLayerDatasetDataAttributes;
};

export type MapboxLayerDataset = {
  data?: MapboxLayerDatasetData;
};

export type MapboxLayerDatasetDataAttributesUpdatedByDataAttributes = { [key: string]: any };

export type MapboxLayerDatasetDataAttributesUpdatedByData = {
  id?: number;
  attributes?: MapboxLayerDatasetDataAttributesUpdatedByDataAttributes;
};

export type MapboxLayerDatasetDataAttributesUpdatedBy = {
  data?: MapboxLayerDatasetDataAttributesUpdatedByData;
};

export type MapboxLayerDatasetDataAttributes = {
  title?: string;
  dataset_group?: MapboxLayerDatasetDataAttributesDatasetGroup;
  metadatum?: MapboxLayerDatasetDataAttributesMetadatum;
  deckgl_layers?: MapboxLayerDatasetDataAttributesDeckglLayers;
  mapbox_layers?: MapboxLayerDatasetDataAttributesMapboxLayers;
  createdAt?: string;
  updatedAt?: string;
  publishedAt?: string;
  createdBy?: MapboxLayerDatasetDataAttributesCreatedBy;
  updatedBy?: MapboxLayerDatasetDataAttributesUpdatedBy;
};

export type MapboxLayerDatasetDataAttributesCreatedByDataAttributes = { [key: string]: any };

export type MapboxLayerDatasetDataAttributesCreatedByData = {
  id?: number;
  attributes?: MapboxLayerDatasetDataAttributesCreatedByDataAttributes;
};

export type MapboxLayerDatasetDataAttributesCreatedBy = {
  data?: MapboxLayerDatasetDataAttributesCreatedByData;
};

export type MapboxLayerDatasetDataAttributesMapboxLayersDataItem = {
  id?: number;
  attributes?: MapboxLayerDatasetDataAttributesMapboxLayersDataItemAttributes;
};

export type MapboxLayerDatasetDataAttributesMapboxLayers = {
  data?: MapboxLayerDatasetDataAttributesMapboxLayersDataItem[];
};

export type MapboxLayerDatasetDataAttributesMapboxLayersDataItemAttributesUpdatedByDataAttributes = { [key: string]: any };

export type MapboxLayerDatasetDataAttributesMapboxLayersDataItemAttributesUpdatedByData = {
  id?: number;
  attributes?: MapboxLayerDatasetDataAttributesMapboxLayersDataItemAttributesUpdatedByDataAttributes;
};

export type MapboxLayerDatasetDataAttributesMapboxLayersDataItemAttributesUpdatedBy = {
  data?: MapboxLayerDatasetDataAttributesMapboxLayersDataItemAttributesUpdatedByData;
};

export type MapboxLayerDatasetDataAttributesMapboxLayersDataItemAttributes = {
  dataset?: MapboxLayerDatasetDataAttributesMapboxLayersDataItemAttributesDataset;
  source?: unknown;
  params_config?: unknown;
  styles?: unknown;
  legend_config?: unknown;
  title?: string;
  createdAt?: string;
  updatedAt?: string;
  publishedAt?: string;
  createdBy?: MapboxLayerDatasetDataAttributesMapboxLayersDataItemAttributesCreatedBy;
  updatedBy?: MapboxLayerDatasetDataAttributesMapboxLayersDataItemAttributesUpdatedBy;
};

export type MapboxLayerDatasetDataAttributesMapboxLayersDataItemAttributesCreatedByDataAttributes = { [key: string]: any };

export type MapboxLayerDatasetDataAttributesMapboxLayersDataItemAttributesCreatedByData = {
  id?: number;
  attributes?: MapboxLayerDatasetDataAttributesMapboxLayersDataItemAttributesCreatedByDataAttributes;
};

export type MapboxLayerDatasetDataAttributesMapboxLayersDataItemAttributesCreatedBy = {
  data?: MapboxLayerDatasetDataAttributesMapboxLayersDataItemAttributesCreatedByData;
};

export type MapboxLayerDatasetDataAttributesMapboxLayersDataItemAttributesDatasetDataAttributes = { [key: string]: any };

export type MapboxLayerDatasetDataAttributesMapboxLayersDataItemAttributesDatasetData = {
  id?: number;
  attributes?: MapboxLayerDatasetDataAttributesMapboxLayersDataItemAttributesDatasetDataAttributes;
};

export type MapboxLayerDatasetDataAttributesMapboxLayersDataItemAttributesDataset = {
  data?: MapboxLayerDatasetDataAttributesMapboxLayersDataItemAttributesDatasetData;
};

export type MapboxLayerDatasetDataAttributesDeckglLayersDataItem = {
  id?: number;
  attributes?: MapboxLayerDatasetDataAttributesDeckglLayersDataItemAttributes;
};

export type MapboxLayerDatasetDataAttributesDeckglLayers = {
  data?: MapboxLayerDatasetDataAttributesDeckglLayersDataItem[];
};

export type MapboxLayerDatasetDataAttributesDeckglLayersDataItemAttributesUpdatedByDataAttributes = { [key: string]: any };

export type MapboxLayerDatasetDataAttributesDeckglLayersDataItemAttributesUpdatedByData = {
  id?: number;
  attributes?: MapboxLayerDatasetDataAttributesDeckglLayersDataItemAttributesUpdatedByDataAttributes;
};

export type MapboxLayerDatasetDataAttributesDeckglLayersDataItemAttributesUpdatedBy = {
  data?: MapboxLayerDatasetDataAttributesDeckglLayersDataItemAttributesUpdatedByData;
};

export type MapboxLayerDatasetDataAttributesDeckglLayersDataItemAttributesCreatedByDataAttributes = { [key: string]: any };

export type MapboxLayerDatasetDataAttributesDeckglLayersDataItemAttributesCreatedByData = {
  id?: number;
  attributes?: MapboxLayerDatasetDataAttributesDeckglLayersDataItemAttributesCreatedByDataAttributes;
};

export type MapboxLayerDatasetDataAttributesDeckglLayersDataItemAttributesCreatedBy = {
  data?: MapboxLayerDatasetDataAttributesDeckglLayersDataItemAttributesCreatedByData;
};

export type MapboxLayerDatasetDataAttributesDeckglLayersDataItemAttributesDatasetDataAttributes = { [key: string]: any };

export type MapboxLayerDatasetDataAttributesDeckglLayersDataItemAttributesDatasetData = {
  id?: number;
  attributes?: MapboxLayerDatasetDataAttributesDeckglLayersDataItemAttributesDatasetDataAttributes;
};

export type MapboxLayerDatasetDataAttributesDeckglLayersDataItemAttributesDataset = {
  data?: MapboxLayerDatasetDataAttributesDeckglLayersDataItemAttributesDatasetData;
};

export type MapboxLayerDatasetDataAttributesDeckglLayersDataItemAttributes = {
  config?: unknown;
  dataset?: MapboxLayerDatasetDataAttributesDeckglLayersDataItemAttributesDataset;
  title?: string;
  params_config?: unknown;
  legend_config?: unknown;
  createdAt?: string;
  updatedAt?: string;
  publishedAt?: string;
  createdBy?: MapboxLayerDatasetDataAttributesDeckglLayersDataItemAttributesCreatedBy;
  updatedBy?: MapboxLayerDatasetDataAttributesDeckglLayersDataItemAttributesUpdatedBy;
};

export type MapboxLayerDatasetDataAttributesMetadatumData = {
  id?: number;
  attributes?: MapboxLayerDatasetDataAttributesMetadatumDataAttributes;
};

export type MapboxLayerDatasetDataAttributesMetadatum = {
  data?: MapboxLayerDatasetDataAttributesMetadatumData;
};

export type MapboxLayerDatasetDataAttributesMetadatumDataAttributesUpdatedByDataAttributes = { [key: string]: any };

export type MapboxLayerDatasetDataAttributesMetadatumDataAttributesUpdatedByData = {
  id?: number;
  attributes?: MapboxLayerDatasetDataAttributesMetadatumDataAttributesUpdatedByDataAttributes;
};

export type MapboxLayerDatasetDataAttributesMetadatumDataAttributesUpdatedBy = {
  data?: MapboxLayerDatasetDataAttributesMetadatumDataAttributesUpdatedByData;
};

export type MapboxLayerDatasetDataAttributesMetadatumDataAttributesCreatedByDataAttributes = { [key: string]: any };

export type MapboxLayerDatasetDataAttributesMetadatumDataAttributesCreatedByData = {
  id?: number;
  attributes?: MapboxLayerDatasetDataAttributesMetadatumDataAttributesCreatedByDataAttributes;
};

export type MapboxLayerDatasetDataAttributesMetadatumDataAttributesCreatedBy = {
  data?: MapboxLayerDatasetDataAttributesMetadatumDataAttributesCreatedByData;
};

export type MapboxLayerDatasetDataAttributesMetadatumDataAttributesTimeIntervals = typeof MapboxLayerDatasetDataAttributesMetadatumDataAttributesTimeIntervals[keyof typeof MapboxLayerDatasetDataAttributesMetadatumDataAttributesTimeIntervals];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MapboxLayerDatasetDataAttributesMetadatumDataAttributesTimeIntervals = {
  daily: 'daily',
  monthly: 'monthly',
  yearly: 'yearly',
  quarterly: 'quarterly',
  other: 'other',
} as const;

export type MapboxLayerDatasetDataAttributesMetadatumDataAttributes = {
  dataset?: MapboxLayerDatasetDataAttributesMetadatumDataAttributesDataset;
  description?: string;
  source?: string;
  citation?: string;
  start_date?: string;
  end_date?: string;
  time_intervals?: MapboxLayerDatasetDataAttributesMetadatumDataAttributesTimeIntervals;
  data_download?: string;
  createdAt?: string;
  updatedAt?: string;
  publishedAt?: string;
  createdBy?: MapboxLayerDatasetDataAttributesMetadatumDataAttributesCreatedBy;
  updatedBy?: MapboxLayerDatasetDataAttributesMetadatumDataAttributesUpdatedBy;
};

export type MapboxLayerDatasetDataAttributesMetadatumDataAttributesDatasetDataAttributes = { [key: string]: any };

export type MapboxLayerDatasetDataAttributesMetadatumDataAttributesDatasetData = {
  id?: number;
  attributes?: MapboxLayerDatasetDataAttributesMetadatumDataAttributesDatasetDataAttributes;
};

export type MapboxLayerDatasetDataAttributesMetadatumDataAttributesDataset = {
  data?: MapboxLayerDatasetDataAttributesMetadatumDataAttributesDatasetData;
};

export type MapboxLayerDatasetDataAttributesDatasetGroupData = {
  id?: number;
  attributes?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributes;
};

export type MapboxLayerDatasetDataAttributesDatasetGroup = {
  data?: MapboxLayerDatasetDataAttributesDatasetGroupData;
};

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesUpdatedByDataAttributes = { [key: string]: any };

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesUpdatedByData = {
  id?: number;
  attributes?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesUpdatedByDataAttributes;
};

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesUpdatedBy = {
  data?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesUpdatedByData;
};

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributes = {
  title?: string;
  datasets?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesDatasets;
  createdAt?: string;
  updatedAt?: string;
  publishedAt?: string;
  createdBy?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedBy;
  updatedBy?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesUpdatedBy;
};

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesUpdatedByDataAttributes = { [key: string]: any };

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesUpdatedByData = {
  id?: number;
  attributes?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesUpdatedByDataAttributes;
};

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesUpdatedBy = {
  data?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesUpdatedByData;
};

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributes = {
  firstname?: string;
  lastname?: string;
  username?: string;
  email?: string;
  resetPasswordToken?: string;
  registrationToken?: string;
  isActive?: boolean;
  roles?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRoles;
  blocked?: boolean;
  preferedLanguage?: string;
  createdAt?: string;
  updatedAt?: string;
  createdBy?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesCreatedBy;
  updatedBy?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesUpdatedBy;
};

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByData = {
  id?: number;
  attributes?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributes;
};

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedBy = {
  data?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByData;
};

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesCreatedByDataAttributes = { [key: string]: any };

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesCreatedByData = {
  id?: number;
  attributes?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesCreatedByDataAttributes;
};

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesCreatedBy = {
  data?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesCreatedByData;
};

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRoles = {
  data?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItem[];
};

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedByDataAttributes = { [key: string]: any };

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedByData = {
  id?: number;
  attributes?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedByDataAttributes;
};

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedBy = {
  data?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedByData;
};

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedByDataAttributes = { [key: string]: any };

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedByData = {
  id?: number;
  attributes?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedByDataAttributes;
};

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedBy = {
  data?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedByData;
};

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItem = {
  id?: number;
  attributes?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributes;
};

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissions = {
  data?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItem[];
};

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributes = {
  name?: string;
  code?: string;
  description?: string;
  users?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsers;
  permissions?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissions;
  createdAt?: string;
  updatedAt?: string;
  createdBy?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedBy;
  updatedBy?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedBy;
};

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItem = {
  id?: number;
  attributes?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributes;
};

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedByDataAttributes = { [key: string]: any };

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedByData = {
  id?: number;
  attributes?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedByDataAttributes;
};

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedBy = {
  data?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedByData;
};

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedByDataAttributes = { [key: string]: any };

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedByData = {
  id?: number;
  attributes?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedByDataAttributes;
};

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedBy = {
  data?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedByData;
};

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRoleDataAttributes = { [key: string]: any };

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRoleData = {
  id?: number;
  attributes?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRoleDataAttributes;
};

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRole = {
  data?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRoleData;
};

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributes = {
  action?: string;
  subject?: string;
  properties?: unknown;
  conditions?: unknown;
  role?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRole;
  createdAt?: string;
  updatedAt?: string;
  createdBy?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedBy;
  updatedBy?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedBy;
};

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsersDataItemAttributes = { [key: string]: any };

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsersDataItem = {
  id?: number;
  attributes?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsersDataItemAttributes;
};

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsers = {
  data?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsersDataItem[];
};

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesDatasetsDataItemAttributes = { [key: string]: any };

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesDatasetsDataItem = {
  id?: number;
  attributes?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesDatasetsDataItemAttributes;
};

export type MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesDatasets = {
  data?: MapboxLayerDatasetDataAttributesDatasetGroupDataAttributesDatasetsDataItem[];
};

export type MapboxLayerListResponseMetaPagination = {
  page?: number;
  pageSize?: number;
  pageCount?: number;
  total?: number;
};

export type MapboxLayerListResponseMeta = {
  pagination?: MapboxLayerListResponseMetaPagination;
};

export interface MapboxLayerListResponseDataItem {
  id?: number;
  attributes?: MapboxLayer;
}

export interface MapboxLayerListResponse {
  data?: MapboxLayerListResponseDataItem[];
  meta?: MapboxLayerListResponseMeta;
}

export type MapboxLayerRequestDataDataset = number | string;

export type MapboxLayerRequestData = {
  dataset?: MapboxLayerRequestDataDataset;
  source: unknown;
  params_config?: unknown;
  styles?: unknown;
  legend_config: unknown;
  title: string;
};

export interface MapboxLayerRequest {
  data: MapboxLayerRequestData;
}

export type DeckGlLayerResponseMeta = { [key: string]: any };

export interface DeckGlLayerResponseDataObject {
  id?: number;
  attributes?: DeckGlLayer;
}

export interface DeckGlLayerResponse {
  data?: DeckGlLayerResponseDataObject;
  meta?: DeckGlLayerResponseMeta;
}

export type DeckGlLayerUpdatedByDataAttributes = { [key: string]: any };

export type DeckGlLayerUpdatedByData = {
  id?: number;
  attributes?: DeckGlLayerUpdatedByDataAttributes;
};

export type DeckGlLayerUpdatedBy = {
  data?: DeckGlLayerUpdatedByData;
};

export type DeckGlLayerCreatedByDataAttributes = { [key: string]: any };

export type DeckGlLayerCreatedByData = {
  id?: number;
  attributes?: DeckGlLayerCreatedByDataAttributes;
};

export type DeckGlLayerCreatedBy = {
  data?: DeckGlLayerCreatedByData;
};

export type DeckGlLayerDatasetDataAttributes = {
  title?: string;
  dataset_group?: DeckGlLayerDatasetDataAttributesDatasetGroup;
  metadatum?: DeckGlLayerDatasetDataAttributesMetadatum;
  deckgl_layers?: DeckGlLayerDatasetDataAttributesDeckglLayers;
  mapbox_layers?: DeckGlLayerDatasetDataAttributesMapboxLayers;
  createdAt?: string;
  updatedAt?: string;
  publishedAt?: string;
  createdBy?: DeckGlLayerDatasetDataAttributesCreatedBy;
  updatedBy?: DeckGlLayerDatasetDataAttributesUpdatedBy;
};

export type DeckGlLayerDatasetData = {
  id?: number;
  attributes?: DeckGlLayerDatasetDataAttributes;
};

export type DeckGlLayerDataset = {
  data?: DeckGlLayerDatasetData;
};

export interface DeckGlLayer {
  config: unknown;
  dataset?: DeckGlLayerDataset;
  title: string;
  params_config?: unknown;
  legend_config: unknown;
  createdAt?: string;
  updatedAt?: string;
  publishedAt?: string;
  createdBy?: DeckGlLayerCreatedBy;
  updatedBy?: DeckGlLayerUpdatedBy;
}

export type DeckGlLayerDatasetDataAttributesUpdatedByDataAttributes = { [key: string]: any };

export type DeckGlLayerDatasetDataAttributesUpdatedByData = {
  id?: number;
  attributes?: DeckGlLayerDatasetDataAttributesUpdatedByDataAttributes;
};

export type DeckGlLayerDatasetDataAttributesUpdatedBy = {
  data?: DeckGlLayerDatasetDataAttributesUpdatedByData;
};

export type DeckGlLayerDatasetDataAttributesCreatedByDataAttributes = { [key: string]: any };

export type DeckGlLayerDatasetDataAttributesCreatedByData = {
  id?: number;
  attributes?: DeckGlLayerDatasetDataAttributesCreatedByDataAttributes;
};

export type DeckGlLayerDatasetDataAttributesCreatedBy = {
  data?: DeckGlLayerDatasetDataAttributesCreatedByData;
};

export type DeckGlLayerDatasetDataAttributesMapboxLayersDataItemAttributes = {
  dataset?: DeckGlLayerDatasetDataAttributesMapboxLayersDataItemAttributesDataset;
  source?: unknown;
  params_config?: unknown;
  styles?: unknown;
  legend_config?: unknown;
  title?: string;
  createdAt?: string;
  updatedAt?: string;
  publishedAt?: string;
  createdBy?: DeckGlLayerDatasetDataAttributesMapboxLayersDataItemAttributesCreatedBy;
  updatedBy?: DeckGlLayerDatasetDataAttributesMapboxLayersDataItemAttributesUpdatedBy;
};

export type DeckGlLayerDatasetDataAttributesMapboxLayersDataItem = {
  id?: number;
  attributes?: DeckGlLayerDatasetDataAttributesMapboxLayersDataItemAttributes;
};

export type DeckGlLayerDatasetDataAttributesMapboxLayers = {
  data?: DeckGlLayerDatasetDataAttributesMapboxLayersDataItem[];
};

export type DeckGlLayerDatasetDataAttributesMapboxLayersDataItemAttributesUpdatedByDataAttributes = { [key: string]: any };

export type DeckGlLayerDatasetDataAttributesMapboxLayersDataItemAttributesUpdatedByData = {
  id?: number;
  attributes?: DeckGlLayerDatasetDataAttributesMapboxLayersDataItemAttributesUpdatedByDataAttributes;
};

export type DeckGlLayerDatasetDataAttributesMapboxLayersDataItemAttributesUpdatedBy = {
  data?: DeckGlLayerDatasetDataAttributesMapboxLayersDataItemAttributesUpdatedByData;
};

export type DeckGlLayerDatasetDataAttributesMapboxLayersDataItemAttributesCreatedByDataAttributes = { [key: string]: any };

export type DeckGlLayerDatasetDataAttributesMapboxLayersDataItemAttributesCreatedByData = {
  id?: number;
  attributes?: DeckGlLayerDatasetDataAttributesMapboxLayersDataItemAttributesCreatedByDataAttributes;
};

export type DeckGlLayerDatasetDataAttributesMapboxLayersDataItemAttributesCreatedBy = {
  data?: DeckGlLayerDatasetDataAttributesMapboxLayersDataItemAttributesCreatedByData;
};

export type DeckGlLayerDatasetDataAttributesMapboxLayersDataItemAttributesDatasetDataAttributes = { [key: string]: any };

export type DeckGlLayerDatasetDataAttributesMapboxLayersDataItemAttributesDatasetData = {
  id?: number;
  attributes?: DeckGlLayerDatasetDataAttributesMapboxLayersDataItemAttributesDatasetDataAttributes;
};

export type DeckGlLayerDatasetDataAttributesMapboxLayersDataItemAttributesDataset = {
  data?: DeckGlLayerDatasetDataAttributesMapboxLayersDataItemAttributesDatasetData;
};

export type DeckGlLayerDatasetDataAttributesDeckglLayersDataItemAttributesUpdatedByDataAttributes = { [key: string]: any };

export type DeckGlLayerDatasetDataAttributesDeckglLayersDataItemAttributesUpdatedByData = {
  id?: number;
  attributes?: DeckGlLayerDatasetDataAttributesDeckglLayersDataItemAttributesUpdatedByDataAttributes;
};

export type DeckGlLayerDatasetDataAttributesDeckglLayersDataItemAttributesUpdatedBy = {
  data?: DeckGlLayerDatasetDataAttributesDeckglLayersDataItemAttributesUpdatedByData;
};

export type DeckGlLayerDatasetDataAttributesDeckglLayersDataItemAttributes = {
  config?: unknown;
  dataset?: DeckGlLayerDatasetDataAttributesDeckglLayersDataItemAttributesDataset;
  title?: string;
  params_config?: unknown;
  legend_config?: unknown;
  createdAt?: string;
  updatedAt?: string;
  publishedAt?: string;
  createdBy?: DeckGlLayerDatasetDataAttributesDeckglLayersDataItemAttributesCreatedBy;
  updatedBy?: DeckGlLayerDatasetDataAttributesDeckglLayersDataItemAttributesUpdatedBy;
};

export type DeckGlLayerDatasetDataAttributesDeckglLayersDataItem = {
  id?: number;
  attributes?: DeckGlLayerDatasetDataAttributesDeckglLayersDataItemAttributes;
};

export type DeckGlLayerDatasetDataAttributesDeckglLayers = {
  data?: DeckGlLayerDatasetDataAttributesDeckglLayersDataItem[];
};

export type DeckGlLayerDatasetDataAttributesDeckglLayersDataItemAttributesCreatedByDataAttributes = { [key: string]: any };

export type DeckGlLayerDatasetDataAttributesDeckglLayersDataItemAttributesCreatedByData = {
  id?: number;
  attributes?: DeckGlLayerDatasetDataAttributesDeckglLayersDataItemAttributesCreatedByDataAttributes;
};

export type DeckGlLayerDatasetDataAttributesDeckglLayersDataItemAttributesCreatedBy = {
  data?: DeckGlLayerDatasetDataAttributesDeckglLayersDataItemAttributesCreatedByData;
};

export type DeckGlLayerDatasetDataAttributesDeckglLayersDataItemAttributesDatasetDataAttributes = { [key: string]: any };

export type DeckGlLayerDatasetDataAttributesDeckglLayersDataItemAttributesDatasetData = {
  id?: number;
  attributes?: DeckGlLayerDatasetDataAttributesDeckglLayersDataItemAttributesDatasetDataAttributes;
};

export type DeckGlLayerDatasetDataAttributesDeckglLayersDataItemAttributesDataset = {
  data?: DeckGlLayerDatasetDataAttributesDeckglLayersDataItemAttributesDatasetData;
};

export type DeckGlLayerDatasetDataAttributesMetadatumDataAttributes = {
  dataset?: DeckGlLayerDatasetDataAttributesMetadatumDataAttributesDataset;
  description?: string;
  source?: string;
  citation?: string;
  start_date?: string;
  end_date?: string;
  time_intervals?: DeckGlLayerDatasetDataAttributesMetadatumDataAttributesTimeIntervals;
  data_download?: string;
  createdAt?: string;
  updatedAt?: string;
  publishedAt?: string;
  createdBy?: DeckGlLayerDatasetDataAttributesMetadatumDataAttributesCreatedBy;
  updatedBy?: DeckGlLayerDatasetDataAttributesMetadatumDataAttributesUpdatedBy;
};

export type DeckGlLayerDatasetDataAttributesMetadatumData = {
  id?: number;
  attributes?: DeckGlLayerDatasetDataAttributesMetadatumDataAttributes;
};

export type DeckGlLayerDatasetDataAttributesMetadatum = {
  data?: DeckGlLayerDatasetDataAttributesMetadatumData;
};

export type DeckGlLayerDatasetDataAttributesMetadatumDataAttributesUpdatedByDataAttributes = { [key: string]: any };

export type DeckGlLayerDatasetDataAttributesMetadatumDataAttributesUpdatedByData = {
  id?: number;
  attributes?: DeckGlLayerDatasetDataAttributesMetadatumDataAttributesUpdatedByDataAttributes;
};

export type DeckGlLayerDatasetDataAttributesMetadatumDataAttributesUpdatedBy = {
  data?: DeckGlLayerDatasetDataAttributesMetadatumDataAttributesUpdatedByData;
};

export type DeckGlLayerDatasetDataAttributesMetadatumDataAttributesCreatedByDataAttributes = { [key: string]: any };

export type DeckGlLayerDatasetDataAttributesMetadatumDataAttributesCreatedByData = {
  id?: number;
  attributes?: DeckGlLayerDatasetDataAttributesMetadatumDataAttributesCreatedByDataAttributes;
};

export type DeckGlLayerDatasetDataAttributesMetadatumDataAttributesCreatedBy = {
  data?: DeckGlLayerDatasetDataAttributesMetadatumDataAttributesCreatedByData;
};

export type DeckGlLayerDatasetDataAttributesMetadatumDataAttributesTimeIntervals = typeof DeckGlLayerDatasetDataAttributesMetadatumDataAttributesTimeIntervals[keyof typeof DeckGlLayerDatasetDataAttributesMetadatumDataAttributesTimeIntervals];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeckGlLayerDatasetDataAttributesMetadatumDataAttributesTimeIntervals = {
  daily: 'daily',
  monthly: 'monthly',
  yearly: 'yearly',
  quarterly: 'quarterly',
  other: 'other',
} as const;

export type DeckGlLayerDatasetDataAttributesMetadatumDataAttributesDatasetDataAttributes = { [key: string]: any };

export type DeckGlLayerDatasetDataAttributesMetadatumDataAttributesDatasetData = {
  id?: number;
  attributes?: DeckGlLayerDatasetDataAttributesMetadatumDataAttributesDatasetDataAttributes;
};

export type DeckGlLayerDatasetDataAttributesMetadatumDataAttributesDataset = {
  data?: DeckGlLayerDatasetDataAttributesMetadatumDataAttributesDatasetData;
};

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributes = {
  title?: string;
  datasets?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesDatasets;
  createdAt?: string;
  updatedAt?: string;
  publishedAt?: string;
  createdBy?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedBy;
  updatedBy?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesUpdatedBy;
};

export type DeckGlLayerDatasetDataAttributesDatasetGroupData = {
  id?: number;
  attributes?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributes;
};

export type DeckGlLayerDatasetDataAttributesDatasetGroup = {
  data?: DeckGlLayerDatasetDataAttributesDatasetGroupData;
};

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesUpdatedByDataAttributes = { [key: string]: any };

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesUpdatedByData = {
  id?: number;
  attributes?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesUpdatedByDataAttributes;
};

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesUpdatedBy = {
  data?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesUpdatedByData;
};

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByData = {
  id?: number;
  attributes?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributes;
};

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedBy = {
  data?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByData;
};

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesUpdatedByDataAttributes = { [key: string]: any };

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesUpdatedByData = {
  id?: number;
  attributes?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesUpdatedByDataAttributes;
};

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesUpdatedBy = {
  data?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesUpdatedByData;
};

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributes = {
  firstname?: string;
  lastname?: string;
  username?: string;
  email?: string;
  resetPasswordToken?: string;
  registrationToken?: string;
  isActive?: boolean;
  roles?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRoles;
  blocked?: boolean;
  preferedLanguage?: string;
  createdAt?: string;
  updatedAt?: string;
  createdBy?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesCreatedBy;
  updatedBy?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesUpdatedBy;
};

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesCreatedByDataAttributes = { [key: string]: any };

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesCreatedByData = {
  id?: number;
  attributes?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesCreatedByDataAttributes;
};

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesCreatedBy = {
  data?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesCreatedByData;
};

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributes = {
  name?: string;
  code?: string;
  description?: string;
  users?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsers;
  permissions?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissions;
  createdAt?: string;
  updatedAt?: string;
  createdBy?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedBy;
  updatedBy?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedBy;
};

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItem = {
  id?: number;
  attributes?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributes;
};

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRoles = {
  data?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItem[];
};

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedByDataAttributes = { [key: string]: any };

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedByData = {
  id?: number;
  attributes?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedByDataAttributes;
};

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedBy = {
  data?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedByData;
};

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedByDataAttributes = { [key: string]: any };

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedByData = {
  id?: number;
  attributes?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedByDataAttributes;
};

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedBy = {
  data?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedByData;
};

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributes = {
  action?: string;
  subject?: string;
  properties?: unknown;
  conditions?: unknown;
  role?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRole;
  createdAt?: string;
  updatedAt?: string;
  createdBy?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedBy;
  updatedBy?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedBy;
};

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItem = {
  id?: number;
  attributes?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributes;
};

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissions = {
  data?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItem[];
};

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedByDataAttributes = { [key: string]: any };

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedByData = {
  id?: number;
  attributes?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedByDataAttributes;
};

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedBy = {
  data?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedByData;
};

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedByDataAttributes = { [key: string]: any };

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedByData = {
  id?: number;
  attributes?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedByDataAttributes;
};

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedBy = {
  data?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedByData;
};

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRoleDataAttributes = { [key: string]: any };

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRoleData = {
  id?: number;
  attributes?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRoleDataAttributes;
};

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRole = {
  data?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRoleData;
};

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsersDataItemAttributes = { [key: string]: any };

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsersDataItem = {
  id?: number;
  attributes?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsersDataItemAttributes;
};

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsers = {
  data?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsersDataItem[];
};

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesDatasetsDataItemAttributes = { [key: string]: any };

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesDatasetsDataItem = {
  id?: number;
  attributes?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesDatasetsDataItemAttributes;
};

export type DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesDatasets = {
  data?: DeckGlLayerDatasetDataAttributesDatasetGroupDataAttributesDatasetsDataItem[];
};

export type DeckGlLayerListResponseMetaPagination = {
  page?: number;
  pageSize?: number;
  pageCount?: number;
  total?: number;
};

export type DeckGlLayerListResponseMeta = {
  pagination?: DeckGlLayerListResponseMetaPagination;
};

export interface DeckGlLayerListResponseDataItem {
  id?: number;
  attributes?: DeckGlLayer;
}

export interface DeckGlLayerListResponse {
  data?: DeckGlLayerListResponseDataItem[];
  meta?: DeckGlLayerListResponseMeta;
}

export type DeckGlLayerRequestDataDataset = number | string;

export type DeckGlLayerRequestData = {
  config: unknown;
  dataset?: DeckGlLayerRequestDataDataset;
  title: string;
  params_config?: unknown;
  legend_config: unknown;
};

export interface DeckGlLayerRequest {
  data: DeckGlLayerRequestData;
}

export type DatasetGroupResponseMeta = { [key: string]: any };

export interface DatasetGroupResponse {
  data?: DatasetGroupResponseDataObject;
  meta?: DatasetGroupResponseMeta;
}

export type DatasetGroupUpdatedByData = {
  id?: number;
  attributes?: DatasetGroupUpdatedByDataAttributes;
};

export type DatasetGroupUpdatedBy = {
  data?: DatasetGroupUpdatedByData;
};

export interface DatasetGroup {
  title?: string;
  datasets?: DatasetGroupDatasets;
  createdAt?: string;
  updatedAt?: string;
  publishedAt?: string;
  createdBy?: DatasetGroupCreatedBy;
  updatedBy?: DatasetGroupUpdatedBy;
}

export interface DatasetGroupResponseDataObject {
  id?: number;
  attributes?: DatasetGroup;
}

export type DatasetGroupUpdatedByDataAttributes = { [key: string]: any };

export type DatasetGroupCreatedByDataAttributes = { [key: string]: any };

export type DatasetGroupCreatedByData = {
  id?: number;
  attributes?: DatasetGroupCreatedByDataAttributes;
};

export type DatasetGroupCreatedBy = {
  data?: DatasetGroupCreatedByData;
};

export type DatasetGroupDatasetsDataItem = {
  id?: number;
  attributes?: DatasetGroupDatasetsDataItemAttributes;
};

export type DatasetGroupDatasets = {
  data?: DatasetGroupDatasetsDataItem[];
};

export type DatasetGroupDatasetsDataItemAttributesUpdatedByDataAttributes = { [key: string]: any };

export type DatasetGroupDatasetsDataItemAttributesUpdatedByData = {
  id?: number;
  attributes?: DatasetGroupDatasetsDataItemAttributesUpdatedByDataAttributes;
};

export type DatasetGroupDatasetsDataItemAttributesUpdatedBy = {
  data?: DatasetGroupDatasetsDataItemAttributesUpdatedByData;
};

export type DatasetGroupDatasetsDataItemAttributesCreatedByDataAttributes = { [key: string]: any };

export type DatasetGroupDatasetsDataItemAttributesCreatedByData = {
  id?: number;
  attributes?: DatasetGroupDatasetsDataItemAttributesCreatedByDataAttributes;
};

export type DatasetGroupDatasetsDataItemAttributesCreatedBy = {
  data?: DatasetGroupDatasetsDataItemAttributesCreatedByData;
};

export type DatasetGroupDatasetsDataItemAttributesMapboxLayersDataItem = {
  id?: number;
  attributes?: DatasetGroupDatasetsDataItemAttributesMapboxLayersDataItemAttributes;
};

export type DatasetGroupDatasetsDataItemAttributesMapboxLayers = {
  data?: DatasetGroupDatasetsDataItemAttributesMapboxLayersDataItem[];
};

export type DatasetGroupDatasetsDataItemAttributes = {
  title?: string;
  dataset_group?: DatasetGroupDatasetsDataItemAttributesDatasetGroup;
  metadatum?: DatasetGroupDatasetsDataItemAttributesMetadatum;
  deckgl_layers?: DatasetGroupDatasetsDataItemAttributesDeckglLayers;
  mapbox_layers?: DatasetGroupDatasetsDataItemAttributesMapboxLayers;
  createdAt?: string;
  updatedAt?: string;
  publishedAt?: string;
  createdBy?: DatasetGroupDatasetsDataItemAttributesCreatedBy;
  updatedBy?: DatasetGroupDatasetsDataItemAttributesUpdatedBy;
};

export type DatasetGroupDatasetsDataItemAttributesMapboxLayersDataItemAttributesUpdatedByDataAttributes = { [key: string]: any };

export type DatasetGroupDatasetsDataItemAttributesMapboxLayersDataItemAttributesUpdatedByData = {
  id?: number;
  attributes?: DatasetGroupDatasetsDataItemAttributesMapboxLayersDataItemAttributesUpdatedByDataAttributes;
};

export type DatasetGroupDatasetsDataItemAttributesMapboxLayersDataItemAttributesUpdatedBy = {
  data?: DatasetGroupDatasetsDataItemAttributesMapboxLayersDataItemAttributesUpdatedByData;
};

export type DatasetGroupDatasetsDataItemAttributesMapboxLayersDataItemAttributesCreatedByDataAttributes = { [key: string]: any };

export type DatasetGroupDatasetsDataItemAttributesMapboxLayersDataItemAttributesCreatedByData = {
  id?: number;
  attributes?: DatasetGroupDatasetsDataItemAttributesMapboxLayersDataItemAttributesCreatedByDataAttributes;
};

export type DatasetGroupDatasetsDataItemAttributesMapboxLayersDataItemAttributesCreatedBy = {
  data?: DatasetGroupDatasetsDataItemAttributesMapboxLayersDataItemAttributesCreatedByData;
};

export type DatasetGroupDatasetsDataItemAttributesMapboxLayersDataItemAttributesDatasetDataAttributes = { [key: string]: any };

export type DatasetGroupDatasetsDataItemAttributesMapboxLayersDataItemAttributesDatasetData = {
  id?: number;
  attributes?: DatasetGroupDatasetsDataItemAttributesMapboxLayersDataItemAttributesDatasetDataAttributes;
};

export type DatasetGroupDatasetsDataItemAttributesMapboxLayersDataItemAttributesDataset = {
  data?: DatasetGroupDatasetsDataItemAttributesMapboxLayersDataItemAttributesDatasetData;
};

export type DatasetGroupDatasetsDataItemAttributesMapboxLayersDataItemAttributes = {
  dataset?: DatasetGroupDatasetsDataItemAttributesMapboxLayersDataItemAttributesDataset;
  source?: unknown;
  params_config?: unknown;
  styles?: unknown;
  legend_config?: unknown;
  title?: string;
  createdAt?: string;
  updatedAt?: string;
  publishedAt?: string;
  createdBy?: DatasetGroupDatasetsDataItemAttributesMapboxLayersDataItemAttributesCreatedBy;
  updatedBy?: DatasetGroupDatasetsDataItemAttributesMapboxLayersDataItemAttributesUpdatedBy;
};

export type DatasetGroupDatasetsDataItemAttributesDeckglLayersDataItem = {
  id?: number;
  attributes?: DatasetGroupDatasetsDataItemAttributesDeckglLayersDataItemAttributes;
};

export type DatasetGroupDatasetsDataItemAttributesDeckglLayers = {
  data?: DatasetGroupDatasetsDataItemAttributesDeckglLayersDataItem[];
};

export type DatasetGroupDatasetsDataItemAttributesDeckglLayersDataItemAttributesUpdatedByDataAttributes = { [key: string]: any };

export type DatasetGroupDatasetsDataItemAttributesDeckglLayersDataItemAttributesUpdatedByData = {
  id?: number;
  attributes?: DatasetGroupDatasetsDataItemAttributesDeckglLayersDataItemAttributesUpdatedByDataAttributes;
};

export type DatasetGroupDatasetsDataItemAttributesDeckglLayersDataItemAttributesUpdatedBy = {
  data?: DatasetGroupDatasetsDataItemAttributesDeckglLayersDataItemAttributesUpdatedByData;
};

export type DatasetGroupDatasetsDataItemAttributesDeckglLayersDataItemAttributes = {
  config?: unknown;
  dataset?: DatasetGroupDatasetsDataItemAttributesDeckglLayersDataItemAttributesDataset;
  title?: string;
  params_config?: unknown;
  legend_config?: unknown;
  createdAt?: string;
  updatedAt?: string;
  publishedAt?: string;
  createdBy?: DatasetGroupDatasetsDataItemAttributesDeckglLayersDataItemAttributesCreatedBy;
  updatedBy?: DatasetGroupDatasetsDataItemAttributesDeckglLayersDataItemAttributesUpdatedBy;
};

export type DatasetGroupDatasetsDataItemAttributesDeckglLayersDataItemAttributesCreatedByDataAttributes = { [key: string]: any };

export type DatasetGroupDatasetsDataItemAttributesDeckglLayersDataItemAttributesCreatedByData = {
  id?: number;
  attributes?: DatasetGroupDatasetsDataItemAttributesDeckglLayersDataItemAttributesCreatedByDataAttributes;
};

export type DatasetGroupDatasetsDataItemAttributesDeckglLayersDataItemAttributesCreatedBy = {
  data?: DatasetGroupDatasetsDataItemAttributesDeckglLayersDataItemAttributesCreatedByData;
};

export type DatasetGroupDatasetsDataItemAttributesDeckglLayersDataItemAttributesDatasetDataAttributes = { [key: string]: any };

export type DatasetGroupDatasetsDataItemAttributesDeckglLayersDataItemAttributesDatasetData = {
  id?: number;
  attributes?: DatasetGroupDatasetsDataItemAttributesDeckglLayersDataItemAttributesDatasetDataAttributes;
};

export type DatasetGroupDatasetsDataItemAttributesDeckglLayersDataItemAttributesDataset = {
  data?: DatasetGroupDatasetsDataItemAttributesDeckglLayersDataItemAttributesDatasetData;
};

export type DatasetGroupDatasetsDataItemAttributesMetadatumData = {
  id?: number;
  attributes?: DatasetGroupDatasetsDataItemAttributesMetadatumDataAttributes;
};

export type DatasetGroupDatasetsDataItemAttributesMetadatum = {
  data?: DatasetGroupDatasetsDataItemAttributesMetadatumData;
};

export type DatasetGroupDatasetsDataItemAttributesMetadatumDataAttributesUpdatedByDataAttributes = { [key: string]: any };

export type DatasetGroupDatasetsDataItemAttributesMetadatumDataAttributesUpdatedByData = {
  id?: number;
  attributes?: DatasetGroupDatasetsDataItemAttributesMetadatumDataAttributesUpdatedByDataAttributes;
};

export type DatasetGroupDatasetsDataItemAttributesMetadatumDataAttributesUpdatedBy = {
  data?: DatasetGroupDatasetsDataItemAttributesMetadatumDataAttributesUpdatedByData;
};

export type DatasetGroupDatasetsDataItemAttributesMetadatumDataAttributes = {
  dataset?: DatasetGroupDatasetsDataItemAttributesMetadatumDataAttributesDataset;
  description?: string;
  source?: string;
  citation?: string;
  start_date?: string;
  end_date?: string;
  time_intervals?: DatasetGroupDatasetsDataItemAttributesMetadatumDataAttributesTimeIntervals;
  data_download?: string;
  createdAt?: string;
  updatedAt?: string;
  publishedAt?: string;
  createdBy?: DatasetGroupDatasetsDataItemAttributesMetadatumDataAttributesCreatedBy;
  updatedBy?: DatasetGroupDatasetsDataItemAttributesMetadatumDataAttributesUpdatedBy;
};

export type DatasetGroupDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributes = { [key: string]: any };

export type DatasetGroupDatasetsDataItemAttributesMetadatumDataAttributesCreatedByData = {
  id?: number;
  attributes?: DatasetGroupDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributes;
};

export type DatasetGroupDatasetsDataItemAttributesMetadatumDataAttributesCreatedBy = {
  data?: DatasetGroupDatasetsDataItemAttributesMetadatumDataAttributesCreatedByData;
};

export type DatasetGroupDatasetsDataItemAttributesMetadatumDataAttributesTimeIntervals = typeof DatasetGroupDatasetsDataItemAttributesMetadatumDataAttributesTimeIntervals[keyof typeof DatasetGroupDatasetsDataItemAttributesMetadatumDataAttributesTimeIntervals];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DatasetGroupDatasetsDataItemAttributesMetadatumDataAttributesTimeIntervals = {
  daily: 'daily',
  monthly: 'monthly',
  yearly: 'yearly',
  quarterly: 'quarterly',
  other: 'other',
} as const;

export type DatasetGroupDatasetsDataItemAttributesMetadatumDataAttributesDatasetDataAttributes = { [key: string]: any };

export type DatasetGroupDatasetsDataItemAttributesMetadatumDataAttributesDatasetData = {
  id?: number;
  attributes?: DatasetGroupDatasetsDataItemAttributesMetadatumDataAttributesDatasetDataAttributes;
};

export type DatasetGroupDatasetsDataItemAttributesMetadatumDataAttributesDataset = {
  data?: DatasetGroupDatasetsDataItemAttributesMetadatumDataAttributesDatasetData;
};

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupData = {
  id?: number;
  attributes?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributes;
};

export type DatasetGroupDatasetsDataItemAttributesDatasetGroup = {
  data?: DatasetGroupDatasetsDataItemAttributesDatasetGroupData;
};

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesUpdatedByDataAttributes = { [key: string]: any };

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesUpdatedByData = {
  id?: number;
  attributes?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesUpdatedByDataAttributes;
};

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesUpdatedBy = {
  data?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesUpdatedByData;
};

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributes = {
  firstname?: string;
  lastname?: string;
  username?: string;
  email?: string;
  resetPasswordToken?: string;
  registrationToken?: string;
  isActive?: boolean;
  roles?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRoles;
  blocked?: boolean;
  preferedLanguage?: string;
  createdAt?: string;
  updatedAt?: string;
  createdBy?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesCreatedBy;
  updatedBy?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesUpdatedBy;
};

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByData = {
  id?: number;
  attributes?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributes;
};

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedBy = {
  data?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByData;
};

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributes = {
  title?: string;
  datasets?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesDatasets;
  createdAt?: string;
  updatedAt?: string;
  publishedAt?: string;
  createdBy?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedBy;
  updatedBy?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesUpdatedBy;
};

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesUpdatedByDataAttributes = { [key: string]: any };

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesUpdatedByData = {
  id?: number;
  attributes?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesUpdatedByDataAttributes;
};

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesUpdatedBy = {
  data?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesUpdatedByData;
};

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesCreatedByDataAttributes = { [key: string]: any };

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesCreatedByData = {
  id?: number;
  attributes?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesCreatedByDataAttributes;
};

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesCreatedBy = {
  data?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesCreatedByData;
};

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributes = {
  name?: string;
  code?: string;
  description?: string;
  users?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsers;
  permissions?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissions;
  createdAt?: string;
  updatedAt?: string;
  createdBy?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedBy;
  updatedBy?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedBy;
};

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItem = {
  id?: number;
  attributes?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributes;
};

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRoles = {
  data?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItem[];
};

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedByDataAttributes = { [key: string]: any };

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedByData = {
  id?: number;
  attributes?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedByDataAttributes;
};

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedBy = {
  data?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedByData;
};

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedByDataAttributes = { [key: string]: any };

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedByData = {
  id?: number;
  attributes?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedByDataAttributes;
};

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedBy = {
  data?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedByData;
};

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItem = {
  id?: number;
  attributes?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributes;
};

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissions = {
  data?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItem[];
};

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedByDataAttributes = { [key: string]: any };

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedByData = {
  id?: number;
  attributes?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedByDataAttributes;
};

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedBy = {
  data?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedByData;
};

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedByDataAttributes = { [key: string]: any };

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedByData = {
  id?: number;
  attributes?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedByDataAttributes;
};

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedBy = {
  data?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedByData;
};

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRoleDataAttributes = { [key: string]: any };

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRoleData = {
  id?: number;
  attributes?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRoleDataAttributes;
};

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRole = {
  data?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRoleData;
};

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributes = {
  action?: string;
  subject?: string;
  properties?: unknown;
  conditions?: unknown;
  role?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRole;
  createdAt?: string;
  updatedAt?: string;
  createdBy?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedBy;
  updatedBy?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedBy;
};

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsersDataItemAttributes = { [key: string]: any };

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsersDataItem = {
  id?: number;
  attributes?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsersDataItemAttributes;
};

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsers = {
  data?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsersDataItem[];
};

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesDatasetsDataItemAttributes = { [key: string]: any };

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesDatasetsDataItem = {
  id?: number;
  attributes?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesDatasetsDataItemAttributes;
};

export type DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesDatasets = {
  data?: DatasetGroupDatasetsDataItemAttributesDatasetGroupDataAttributesDatasetsDataItem[];
};

export type DatasetGroupListResponseMetaPagination = {
  page?: number;
  pageSize?: number;
  pageCount?: number;
  total?: number;
};

export type DatasetGroupListResponseMeta = {
  pagination?: DatasetGroupListResponseMetaPagination;
};

export interface DatasetGroupListResponseDataItem {
  id?: number;
  attributes?: DatasetGroup;
}

export interface DatasetGroupListResponse {
  data?: DatasetGroupListResponseDataItem[];
  meta?: DatasetGroupListResponseMeta;
}

export type DatasetGroupRequestDataDatasetsItem = number | string;

export type DatasetGroupRequestData = {
  title?: string;
  datasets?: DatasetGroupRequestDataDatasetsItem[];
};

export interface DatasetGroupRequest {
  data: DatasetGroupRequestData;
}

export type DatasetResponseMeta = { [key: string]: any };

export interface DatasetResponseDataObject {
  id?: number;
  attributes?: Dataset;
}

export interface DatasetResponse {
  data?: DatasetResponseDataObject;
  meta?: DatasetResponseMeta;
}

export type DatasetUpdatedByDataAttributes = { [key: string]: any };

export type DatasetUpdatedByData = {
  id?: number;
  attributes?: DatasetUpdatedByDataAttributes;
};

export type DatasetUpdatedBy = {
  data?: DatasetUpdatedByData;
};

export interface Dataset {
  title: string;
  dataset_group?: DatasetDatasetGroup;
  metadatum?: DatasetMetadatum;
  deckgl_layers?: DatasetDeckglLayers;
  mapbox_layers?: DatasetMapboxLayers;
  createdAt?: string;
  updatedAt?: string;
  publishedAt?: string;
  createdBy?: DatasetCreatedBy;
  updatedBy?: DatasetUpdatedBy;
}

export type DatasetCreatedByDataAttributes = { [key: string]: any };

export type DatasetCreatedByData = {
  id?: number;
  attributes?: DatasetCreatedByDataAttributes;
};

export type DatasetCreatedBy = {
  data?: DatasetCreatedByData;
};

export type DatasetMapboxLayersDataItem = {
  id?: number;
  attributes?: DatasetMapboxLayersDataItemAttributes;
};

export type DatasetMapboxLayers = {
  data?: DatasetMapboxLayersDataItem[];
};

export type DatasetMapboxLayersDataItemAttributes = { [key: string]: any };

export type DatasetDeckglLayersDataItemAttributes = { [key: string]: any };

export type DatasetDeckglLayersDataItem = {
  id?: number;
  attributes?: DatasetDeckglLayersDataItemAttributes;
};

export type DatasetDeckglLayers = {
  data?: DatasetDeckglLayersDataItem[];
};

export type DatasetMetadatumDataAttributes = { [key: string]: any };

export type DatasetMetadatumData = {
  id?: number;
  attributes?: DatasetMetadatumDataAttributes;
};

export type DatasetMetadatum = {
  data?: DatasetMetadatumData;
};

export type DatasetDatasetGroupDataAttributes = {
  title?: string;
  datasets?: DatasetDatasetGroupDataAttributesDatasets;
  createdAt?: string;
  updatedAt?: string;
  publishedAt?: string;
  createdBy?: DatasetDatasetGroupDataAttributesCreatedBy;
  updatedBy?: DatasetDatasetGroupDataAttributesUpdatedBy;
};

export type DatasetDatasetGroupData = {
  id?: number;
  attributes?: DatasetDatasetGroupDataAttributes;
};

export type DatasetDatasetGroup = {
  data?: DatasetDatasetGroupData;
};

export type DatasetDatasetGroupDataAttributesUpdatedByDataAttributes = { [key: string]: any };

export type DatasetDatasetGroupDataAttributesUpdatedByData = {
  id?: number;
  attributes?: DatasetDatasetGroupDataAttributesUpdatedByDataAttributes;
};

export type DatasetDatasetGroupDataAttributesUpdatedBy = {
  data?: DatasetDatasetGroupDataAttributesUpdatedByData;
};

export type DatasetDatasetGroupDataAttributesCreatedByDataAttributes = { [key: string]: any };

export type DatasetDatasetGroupDataAttributesCreatedByData = {
  id?: number;
  attributes?: DatasetDatasetGroupDataAttributesCreatedByDataAttributes;
};

export type DatasetDatasetGroupDataAttributesCreatedBy = {
  data?: DatasetDatasetGroupDataAttributesCreatedByData;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItem = {
  id?: number;
  attributes?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributes;
};

export type DatasetDatasetGroupDataAttributesDatasets = {
  data?: DatasetDatasetGroupDataAttributesDatasetsDataItem[];
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesUpdatedByDataAttributes = { [key: string]: any };

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesUpdatedByData = {
  id?: number;
  attributes?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesUpdatedByDataAttributes;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesUpdatedBy = {
  data?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesUpdatedByData;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributes = {
  title?: string;
  dataset_group?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesDatasetGroup;
  metadatum?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatum;
  deckgl_layers?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesDeckglLayers;
  mapbox_layers?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMapboxLayers;
  createdAt?: string;
  updatedAt?: string;
  publishedAt?: string;
  createdBy?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesCreatedBy;
  updatedBy?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesUpdatedBy;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesCreatedByDataAttributes = { [key: string]: any };

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesCreatedByData = {
  id?: number;
  attributes?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesCreatedByDataAttributes;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesCreatedBy = {
  data?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesCreatedByData;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMapboxLayersDataItem = {
  id?: number;
  attributes?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMapboxLayersDataItemAttributes;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMapboxLayers = {
  data?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMapboxLayersDataItem[];
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMapboxLayersDataItemAttributesUpdatedByDataAttributes = { [key: string]: any };

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMapboxLayersDataItemAttributesUpdatedByData = {
  id?: number;
  attributes?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMapboxLayersDataItemAttributesUpdatedByDataAttributes;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMapboxLayersDataItemAttributesUpdatedBy = {
  data?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMapboxLayersDataItemAttributesUpdatedByData;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMapboxLayersDataItemAttributes = {
  dataset?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMapboxLayersDataItemAttributesDataset;
  source?: unknown;
  params_config?: unknown;
  styles?: unknown;
  legend_config?: unknown;
  title?: string;
  createdAt?: string;
  updatedAt?: string;
  publishedAt?: string;
  createdBy?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMapboxLayersDataItemAttributesCreatedBy;
  updatedBy?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMapboxLayersDataItemAttributesUpdatedBy;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMapboxLayersDataItemAttributesCreatedByDataAttributes = { [key: string]: any };

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMapboxLayersDataItemAttributesCreatedByData = {
  id?: number;
  attributes?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMapboxLayersDataItemAttributesCreatedByDataAttributes;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMapboxLayersDataItemAttributesCreatedBy = {
  data?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMapboxLayersDataItemAttributesCreatedByData;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMapboxLayersDataItemAttributesDatasetDataAttributes = { [key: string]: any };

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMapboxLayersDataItemAttributesDatasetData = {
  id?: number;
  attributes?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMapboxLayersDataItemAttributesDatasetDataAttributes;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMapboxLayersDataItemAttributesDataset = {
  data?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMapboxLayersDataItemAttributesDatasetData;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesDeckglLayersDataItem = {
  id?: number;
  attributes?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesDeckglLayersDataItemAttributes;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesDeckglLayers = {
  data?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesDeckglLayersDataItem[];
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesDeckglLayersDataItemAttributesUpdatedByDataAttributes = { [key: string]: any };

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesDeckglLayersDataItemAttributesUpdatedByData = {
  id?: number;
  attributes?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesDeckglLayersDataItemAttributesUpdatedByDataAttributes;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesDeckglLayersDataItemAttributesUpdatedBy = {
  data?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesDeckglLayersDataItemAttributesUpdatedByData;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesDeckglLayersDataItemAttributesCreatedByDataAttributes = { [key: string]: any };

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesDeckglLayersDataItemAttributesCreatedByData = {
  id?: number;
  attributes?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesDeckglLayersDataItemAttributesCreatedByDataAttributes;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesDeckglLayersDataItemAttributesCreatedBy = {
  data?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesDeckglLayersDataItemAttributesCreatedByData;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesDeckglLayersDataItemAttributesDatasetDataAttributes = { [key: string]: any };

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesDeckglLayersDataItemAttributesDatasetData = {
  id?: number;
  attributes?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesDeckglLayersDataItemAttributesDatasetDataAttributes;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesDeckglLayersDataItemAttributesDataset = {
  data?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesDeckglLayersDataItemAttributesDatasetData;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesDeckglLayersDataItemAttributes = {
  config?: unknown;
  dataset?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesDeckglLayersDataItemAttributesDataset;
  title?: string;
  params_config?: unknown;
  legend_config?: unknown;
  createdAt?: string;
  updatedAt?: string;
  publishedAt?: string;
  createdBy?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesDeckglLayersDataItemAttributesCreatedBy;
  updatedBy?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesDeckglLayersDataItemAttributesUpdatedBy;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesUpdatedByDataAttributes = { [key: string]: any };

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesUpdatedByData = {
  id?: number;
  attributes?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesUpdatedByDataAttributes;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesUpdatedBy = {
  data?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesUpdatedByData;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByData = {
  id?: number;
  attributes?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributes;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedBy = {
  data?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByData;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributes = {
  dataset?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesDataset;
  description?: string;
  source?: string;
  citation?: string;
  start_date?: string;
  end_date?: string;
  time_intervals?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesTimeIntervals;
  data_download?: string;
  createdAt?: string;
  updatedAt?: string;
  publishedAt?: string;
  createdBy?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedBy;
  updatedBy?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesUpdatedBy;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumData = {
  id?: number;
  attributes?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributes;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatum = {
  data?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumData;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesUpdatedByDataAttributes = { [key: string]: any };

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesUpdatedByData = {
  id?: number;
  attributes?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesUpdatedByDataAttributes;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesUpdatedBy = {
  data?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesUpdatedByData;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesCreatedByDataAttributes = { [key: string]: any };

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesCreatedByData = {
  id?: number;
  attributes?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesCreatedByDataAttributes;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesCreatedBy = {
  data?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesCreatedByData;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributes = {
  name?: string;
  code?: string;
  description?: string;
  users?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsers;
  permissions?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissions;
  createdAt?: string;
  updatedAt?: string;
  createdBy?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedBy;
  updatedBy?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedBy;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItem = {
  id?: number;
  attributes?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributes;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRoles = {
  data?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItem[];
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributes = {
  firstname?: string;
  lastname?: string;
  username?: string;
  email?: string;
  resetPasswordToken?: string;
  registrationToken?: string;
  isActive?: boolean;
  roles?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRoles;
  blocked?: boolean;
  preferedLanguage?: string;
  createdAt?: string;
  updatedAt?: string;
  createdBy?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesCreatedBy;
  updatedBy?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesUpdatedBy;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedByDataAttributes = { [key: string]: any };

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedByData = {
  id?: number;
  attributes?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedByDataAttributes;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedBy = {
  data?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesUpdatedByData;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedByDataAttributes = { [key: string]: any };

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedByData = {
  id?: number;
  attributes?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedByDataAttributes;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedBy = {
  data?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesCreatedByData;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissions = {
  data?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItem[];
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedByDataAttributes = { [key: string]: any };

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedByData = {
  id?: number;
  attributes?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedByDataAttributes;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedBy = {
  data?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedByData;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedByDataAttributes = { [key: string]: any };

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedByData = {
  id?: number;
  attributes?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedByDataAttributes;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedBy = {
  data?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedByData;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRoleDataAttributes = { [key: string]: any };

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRoleData = {
  id?: number;
  attributes?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRoleDataAttributes;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRole = {
  data?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRoleData;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributes = {
  action?: string;
  subject?: string;
  properties?: unknown;
  conditions?: unknown;
  role?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesRole;
  createdAt?: string;
  updatedAt?: string;
  createdBy?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesCreatedBy;
  updatedBy?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributesUpdatedBy;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItem = {
  id?: number;
  attributes?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesPermissionsDataItemAttributes;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsersDataItemAttributes = { [key: string]: any };

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsersDataItem = {
  id?: number;
  attributes?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsersDataItemAttributes;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsers = {
  data?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesCreatedByDataAttributesRolesDataItemAttributesUsersDataItem[];
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesTimeIntervals = typeof DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesTimeIntervals[keyof typeof DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesTimeIntervals];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesTimeIntervals = {
  daily: 'daily',
  monthly: 'monthly',
  yearly: 'yearly',
  quarterly: 'quarterly',
  other: 'other',
} as const;

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesDatasetDataAttributes = { [key: string]: any };

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesDatasetData = {
  id?: number;
  attributes?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesDatasetDataAttributes;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesDataset = {
  data?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesMetadatumDataAttributesDatasetData;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesDatasetGroupDataAttributes = { [key: string]: any };

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesDatasetGroupData = {
  id?: number;
  attributes?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesDatasetGroupDataAttributes;
};

export type DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesDatasetGroup = {
  data?: DatasetDatasetGroupDataAttributesDatasetsDataItemAttributesDatasetGroupData;
};

export type DatasetListResponseMetaPagination = {
  page?: number;
  pageSize?: number;
  pageCount?: number;
  total?: number;
};

export type DatasetListResponseMeta = {
  pagination?: DatasetListResponseMetaPagination;
};

export interface DatasetListResponseDataItem {
  id?: number;
  attributes?: Dataset;
}

export interface DatasetListResponse {
  data?: DatasetListResponseDataItem[];
  meta?: DatasetListResponseMeta;
}

export interface DatasetRequest {
  data: DatasetRequestData;
}

export type DatasetRequestDataMapboxLayersItem = number | string;

export type DatasetRequestDataDeckglLayersItem = number | string;

export type DatasetRequestDataMetadatum = number | string;

export type DatasetRequestDataDatasetGroup = number | string;

export type DatasetRequestData = {
  title: string;
  dataset_group?: DatasetRequestDataDatasetGroup;
  metadatum?: DatasetRequestDataMetadatum;
  deckgl_layers?: DatasetRequestDataDeckglLayersItem[];
  mapbox_layers?: DatasetRequestDataMapboxLayersItem[];
};

export type ErrorErrorDetails = { [key: string]: any };

export type ErrorError = {
  status?: number;
  name?: string;
  message?: string;
  details?: ErrorErrorDetails;
};

export interface Error {
  data?: ErrorData;
  error: ErrorError;
}

export type ErrorDataOneOfTwoItem = { [key: string]: any };

export type ErrorDataOneOf = { [key: string]: any };

export type ErrorData = ErrorDataOneOf | ErrorDataOneOfTwoItem[] | null;



type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


export const getDatasets = (
    params?: GetDatasetsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DatasetListResponse>> => {
    return axios.get(
      `/datasets`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetDatasetsQueryKey = (params?: GetDatasetsParams,) => [`/datasets`, ...(params ? [params]: [])] as const;
  

    
export const getGetDatasetsQueryOptions = <TData = Awaited<ReturnType<typeof getDatasets>>, TError = AxiosError<Error>>(params?: GetDatasetsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDatasets>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getDatasets>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDatasetsQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDatasets>>> = ({ signal }) => getDatasets(params, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetDatasetsQueryResult = NonNullable<Awaited<ReturnType<typeof getDatasets>>>
export type GetDatasetsQueryError = AxiosError<Error>

export const useGetDatasets = <TData = Awaited<ReturnType<typeof getDatasets>>, TError = AxiosError<Error>>(
 params?: GetDatasetsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDatasets>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetDatasetsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const postDatasets = (
    datasetRequest: DatasetRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DatasetResponse>> => {
    return axios.post(
      `/datasets`,
      datasetRequest,options
    );
  }



export const getPostDatasetsMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDatasets>>, TError,{data: DatasetRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postDatasets>>, TError,{data: DatasetRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDatasets>>, {data: DatasetRequest}> = (props) => {
          const {data} = props ?? {};

          return  postDatasets(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostDatasetsMutationResult = NonNullable<Awaited<ReturnType<typeof postDatasets>>>
    export type PostDatasetsMutationBody = DatasetRequest
    export type PostDatasetsMutationError = AxiosError<Error>

    export const usePostDatasets = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDatasets>>, TError,{data: DatasetRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostDatasetsMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const getDatasetsId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DatasetResponse>> => {
    return axios.get(
      `/datasets/${id}`,options
    );
  }


export const getGetDatasetsIdQueryKey = (id: number,) => [`/datasets/${id}`] as const;
  

    
export const getGetDatasetsIdQueryOptions = <TData = Awaited<ReturnType<typeof getDatasetsId>>, TError = AxiosError<Error>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDatasetsId>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getDatasetsId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDatasetsIdQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDatasetsId>>> = ({ signal }) => getDatasetsId(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type GetDatasetsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDatasetsId>>>
export type GetDatasetsIdQueryError = AxiosError<Error>

export const useGetDatasetsId = <TData = Awaited<ReturnType<typeof getDatasetsId>>, TError = AxiosError<Error>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDatasetsId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetDatasetsIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const putDatasetsId = (
    id: number,
    datasetRequest: DatasetRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DatasetResponse>> => {
    return axios.put(
      `/datasets/${id}`,
      datasetRequest,options
    );
  }



export const getPutDatasetsIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDatasetsId>>, TError,{id: number;data: DatasetRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putDatasetsId>>, TError,{id: number;data: DatasetRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDatasetsId>>, {id: number;data: DatasetRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  putDatasetsId(id,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PutDatasetsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putDatasetsId>>>
    export type PutDatasetsIdMutationBody = DatasetRequest
    export type PutDatasetsIdMutationError = AxiosError<Error>

    export const usePutDatasetsId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDatasetsId>>, TError,{id: number;data: DatasetRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPutDatasetsIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const deleteDatasetsId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number>> => {
    return axios.delete(
      `/datasets/${id}`,options
    );
  }



export const getDeleteDatasetsIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDatasetsId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDatasetsId>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDatasetsId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteDatasetsId(id,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteDatasetsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDatasetsId>>>
    
    export type DeleteDatasetsIdMutationError = AxiosError<Error>

    export const useDeleteDatasetsId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDatasetsId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getDeleteDatasetsIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const getDatasetGroups = (
    params?: GetDatasetGroupsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DatasetGroupListResponse>> => {
    return axios.get(
      `/dataset-groups`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetDatasetGroupsQueryKey = (params?: GetDatasetGroupsParams,) => [`/dataset-groups`, ...(params ? [params]: [])] as const;
  

    
export const getGetDatasetGroupsQueryOptions = <TData = Awaited<ReturnType<typeof getDatasetGroups>>, TError = AxiosError<Error>>(params?: GetDatasetGroupsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDatasetGroups>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getDatasetGroups>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDatasetGroupsQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDatasetGroups>>> = ({ signal }) => getDatasetGroups(params, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetDatasetGroupsQueryResult = NonNullable<Awaited<ReturnType<typeof getDatasetGroups>>>
export type GetDatasetGroupsQueryError = AxiosError<Error>

export const useGetDatasetGroups = <TData = Awaited<ReturnType<typeof getDatasetGroups>>, TError = AxiosError<Error>>(
 params?: GetDatasetGroupsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDatasetGroups>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetDatasetGroupsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const postDatasetGroups = (
    datasetGroupRequest: DatasetGroupRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DatasetGroupResponse>> => {
    return axios.post(
      `/dataset-groups`,
      datasetGroupRequest,options
    );
  }



export const getPostDatasetGroupsMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDatasetGroups>>, TError,{data: DatasetGroupRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postDatasetGroups>>, TError,{data: DatasetGroupRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDatasetGroups>>, {data: DatasetGroupRequest}> = (props) => {
          const {data} = props ?? {};

          return  postDatasetGroups(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostDatasetGroupsMutationResult = NonNullable<Awaited<ReturnType<typeof postDatasetGroups>>>
    export type PostDatasetGroupsMutationBody = DatasetGroupRequest
    export type PostDatasetGroupsMutationError = AxiosError<Error>

    export const usePostDatasetGroups = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDatasetGroups>>, TError,{data: DatasetGroupRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostDatasetGroupsMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const getDatasetGroupsId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DatasetGroupResponse>> => {
    return axios.get(
      `/dataset-groups/${id}`,options
    );
  }


export const getGetDatasetGroupsIdQueryKey = (id: number,) => [`/dataset-groups/${id}`] as const;
  

    
export const getGetDatasetGroupsIdQueryOptions = <TData = Awaited<ReturnType<typeof getDatasetGroupsId>>, TError = AxiosError<Error>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDatasetGroupsId>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getDatasetGroupsId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDatasetGroupsIdQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDatasetGroupsId>>> = ({ signal }) => getDatasetGroupsId(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type GetDatasetGroupsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDatasetGroupsId>>>
export type GetDatasetGroupsIdQueryError = AxiosError<Error>

export const useGetDatasetGroupsId = <TData = Awaited<ReturnType<typeof getDatasetGroupsId>>, TError = AxiosError<Error>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDatasetGroupsId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetDatasetGroupsIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const putDatasetGroupsId = (
    id: number,
    datasetGroupRequest: DatasetGroupRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DatasetGroupResponse>> => {
    return axios.put(
      `/dataset-groups/${id}`,
      datasetGroupRequest,options
    );
  }



export const getPutDatasetGroupsIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDatasetGroupsId>>, TError,{id: number;data: DatasetGroupRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putDatasetGroupsId>>, TError,{id: number;data: DatasetGroupRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDatasetGroupsId>>, {id: number;data: DatasetGroupRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  putDatasetGroupsId(id,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PutDatasetGroupsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putDatasetGroupsId>>>
    export type PutDatasetGroupsIdMutationBody = DatasetGroupRequest
    export type PutDatasetGroupsIdMutationError = AxiosError<Error>

    export const usePutDatasetGroupsId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDatasetGroupsId>>, TError,{id: number;data: DatasetGroupRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPutDatasetGroupsIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const deleteDatasetGroupsId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number>> => {
    return axios.delete(
      `/dataset-groups/${id}`,options
    );
  }



export const getDeleteDatasetGroupsIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDatasetGroupsId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDatasetGroupsId>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDatasetGroupsId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteDatasetGroupsId(id,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteDatasetGroupsIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDatasetGroupsId>>>
    
    export type DeleteDatasetGroupsIdMutationError = AxiosError<Error>

    export const useDeleteDatasetGroupsId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDatasetGroupsId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getDeleteDatasetGroupsIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const getDeckGlLayers = (
    params?: GetDeckGlLayersParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DeckGlLayerListResponse>> => {
    return axios.get(
      `/deck-gl-layers`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetDeckGlLayersQueryKey = (params?: GetDeckGlLayersParams,) => [`/deck-gl-layers`, ...(params ? [params]: [])] as const;
  

    
export const getGetDeckGlLayersQueryOptions = <TData = Awaited<ReturnType<typeof getDeckGlLayers>>, TError = AxiosError<Error>>(params?: GetDeckGlLayersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDeckGlLayers>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getDeckGlLayers>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDeckGlLayersQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDeckGlLayers>>> = ({ signal }) => getDeckGlLayers(params, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetDeckGlLayersQueryResult = NonNullable<Awaited<ReturnType<typeof getDeckGlLayers>>>
export type GetDeckGlLayersQueryError = AxiosError<Error>

export const useGetDeckGlLayers = <TData = Awaited<ReturnType<typeof getDeckGlLayers>>, TError = AxiosError<Error>>(
 params?: GetDeckGlLayersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDeckGlLayers>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetDeckGlLayersQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const postDeckGlLayers = (
    deckGlLayerRequest: DeckGlLayerRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DeckGlLayerResponse>> => {
    return axios.post(
      `/deck-gl-layers`,
      deckGlLayerRequest,options
    );
  }



export const getPostDeckGlLayersMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDeckGlLayers>>, TError,{data: DeckGlLayerRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postDeckGlLayers>>, TError,{data: DeckGlLayerRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postDeckGlLayers>>, {data: DeckGlLayerRequest}> = (props) => {
          const {data} = props ?? {};

          return  postDeckGlLayers(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostDeckGlLayersMutationResult = NonNullable<Awaited<ReturnType<typeof postDeckGlLayers>>>
    export type PostDeckGlLayersMutationBody = DeckGlLayerRequest
    export type PostDeckGlLayersMutationError = AxiosError<Error>

    export const usePostDeckGlLayers = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postDeckGlLayers>>, TError,{data: DeckGlLayerRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostDeckGlLayersMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const getDeckGlLayersId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DeckGlLayerResponse>> => {
    return axios.get(
      `/deck-gl-layers/${id}`,options
    );
  }


export const getGetDeckGlLayersIdQueryKey = (id: number,) => [`/deck-gl-layers/${id}`] as const;
  

    
export const getGetDeckGlLayersIdQueryOptions = <TData = Awaited<ReturnType<typeof getDeckGlLayersId>>, TError = AxiosError<Error>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDeckGlLayersId>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getDeckGlLayersId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDeckGlLayersIdQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDeckGlLayersId>>> = ({ signal }) => getDeckGlLayersId(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type GetDeckGlLayersIdQueryResult = NonNullable<Awaited<ReturnType<typeof getDeckGlLayersId>>>
export type GetDeckGlLayersIdQueryError = AxiosError<Error>

export const useGetDeckGlLayersId = <TData = Awaited<ReturnType<typeof getDeckGlLayersId>>, TError = AxiosError<Error>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDeckGlLayersId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetDeckGlLayersIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const putDeckGlLayersId = (
    id: number,
    deckGlLayerRequest: DeckGlLayerRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DeckGlLayerResponse>> => {
    return axios.put(
      `/deck-gl-layers/${id}`,
      deckGlLayerRequest,options
    );
  }



export const getPutDeckGlLayersIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDeckGlLayersId>>, TError,{id: number;data: DeckGlLayerRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putDeckGlLayersId>>, TError,{id: number;data: DeckGlLayerRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putDeckGlLayersId>>, {id: number;data: DeckGlLayerRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  putDeckGlLayersId(id,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PutDeckGlLayersIdMutationResult = NonNullable<Awaited<ReturnType<typeof putDeckGlLayersId>>>
    export type PutDeckGlLayersIdMutationBody = DeckGlLayerRequest
    export type PutDeckGlLayersIdMutationError = AxiosError<Error>

    export const usePutDeckGlLayersId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putDeckGlLayersId>>, TError,{id: number;data: DeckGlLayerRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPutDeckGlLayersIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const deleteDeckGlLayersId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number>> => {
    return axios.delete(
      `/deck-gl-layers/${id}`,options
    );
  }



export const getDeleteDeckGlLayersIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDeckGlLayersId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteDeckGlLayersId>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteDeckGlLayersId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteDeckGlLayersId(id,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteDeckGlLayersIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteDeckGlLayersId>>>
    
    export type DeleteDeckGlLayersIdMutationError = AxiosError<Error>

    export const useDeleteDeckGlLayersId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteDeckGlLayersId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getDeleteDeckGlLayersIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const getMapboxLayers = (
    params?: GetMapboxLayersParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MapboxLayerListResponse>> => {
    return axios.get(
      `/mapbox-layers`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetMapboxLayersQueryKey = (params?: GetMapboxLayersParams,) => [`/mapbox-layers`, ...(params ? [params]: [])] as const;
  

    
export const getGetMapboxLayersQueryOptions = <TData = Awaited<ReturnType<typeof getMapboxLayers>>, TError = AxiosError<Error>>(params?: GetMapboxLayersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMapboxLayers>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getMapboxLayers>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMapboxLayersQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMapboxLayers>>> = ({ signal }) => getMapboxLayers(params, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetMapboxLayersQueryResult = NonNullable<Awaited<ReturnType<typeof getMapboxLayers>>>
export type GetMapboxLayersQueryError = AxiosError<Error>

export const useGetMapboxLayers = <TData = Awaited<ReturnType<typeof getMapboxLayers>>, TError = AxiosError<Error>>(
 params?: GetMapboxLayersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMapboxLayers>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetMapboxLayersQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const postMapboxLayers = (
    mapboxLayerRequest: MapboxLayerRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MapboxLayerResponse>> => {
    return axios.post(
      `/mapbox-layers`,
      mapboxLayerRequest,options
    );
  }



export const getPostMapboxLayersMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMapboxLayers>>, TError,{data: MapboxLayerRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postMapboxLayers>>, TError,{data: MapboxLayerRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMapboxLayers>>, {data: MapboxLayerRequest}> = (props) => {
          const {data} = props ?? {};

          return  postMapboxLayers(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostMapboxLayersMutationResult = NonNullable<Awaited<ReturnType<typeof postMapboxLayers>>>
    export type PostMapboxLayersMutationBody = MapboxLayerRequest
    export type PostMapboxLayersMutationError = AxiosError<Error>

    export const usePostMapboxLayers = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMapboxLayers>>, TError,{data: MapboxLayerRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostMapboxLayersMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const getMapboxLayersId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MapboxLayerResponse>> => {
    return axios.get(
      `/mapbox-layers/${id}`,options
    );
  }


export const getGetMapboxLayersIdQueryKey = (id: number,) => [`/mapbox-layers/${id}`] as const;
  

    
export const getGetMapboxLayersIdQueryOptions = <TData = Awaited<ReturnType<typeof getMapboxLayersId>>, TError = AxiosError<Error>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMapboxLayersId>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getMapboxLayersId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMapboxLayersIdQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMapboxLayersId>>> = ({ signal }) => getMapboxLayersId(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type GetMapboxLayersIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMapboxLayersId>>>
export type GetMapboxLayersIdQueryError = AxiosError<Error>

export const useGetMapboxLayersId = <TData = Awaited<ReturnType<typeof getMapboxLayersId>>, TError = AxiosError<Error>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMapboxLayersId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetMapboxLayersIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const putMapboxLayersId = (
    id: number,
    mapboxLayerRequest: MapboxLayerRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MapboxLayerResponse>> => {
    return axios.put(
      `/mapbox-layers/${id}`,
      mapboxLayerRequest,options
    );
  }



export const getPutMapboxLayersIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMapboxLayersId>>, TError,{id: number;data: MapboxLayerRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putMapboxLayersId>>, TError,{id: number;data: MapboxLayerRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMapboxLayersId>>, {id: number;data: MapboxLayerRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  putMapboxLayersId(id,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PutMapboxLayersIdMutationResult = NonNullable<Awaited<ReturnType<typeof putMapboxLayersId>>>
    export type PutMapboxLayersIdMutationBody = MapboxLayerRequest
    export type PutMapboxLayersIdMutationError = AxiosError<Error>

    export const usePutMapboxLayersId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMapboxLayersId>>, TError,{id: number;data: MapboxLayerRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPutMapboxLayersIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const deleteMapboxLayersId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number>> => {
    return axios.delete(
      `/mapbox-layers/${id}`,options
    );
  }



export const getDeleteMapboxLayersIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMapboxLayersId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMapboxLayersId>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMapboxLayersId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteMapboxLayersId(id,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteMapboxLayersIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMapboxLayersId>>>
    
    export type DeleteMapboxLayersIdMutationError = AxiosError<Error>

    export const useDeleteMapboxLayersId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMapboxLayersId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getDeleteMapboxLayersIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const getMetadata = (
    params?: GetMetadataParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MetadatumListResponse>> => {
    return axios.get(
      `/metadata`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetMetadataQueryKey = (params?: GetMetadataParams,) => [`/metadata`, ...(params ? [params]: [])] as const;
  

    
export const getGetMetadataQueryOptions = <TData = Awaited<ReturnType<typeof getMetadata>>, TError = AxiosError<Error>>(params?: GetMetadataParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMetadata>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getMetadata>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMetadataQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMetadata>>> = ({ signal }) => getMetadata(params, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetMetadataQueryResult = NonNullable<Awaited<ReturnType<typeof getMetadata>>>
export type GetMetadataQueryError = AxiosError<Error>

export const useGetMetadata = <TData = Awaited<ReturnType<typeof getMetadata>>, TError = AxiosError<Error>>(
 params?: GetMetadataParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMetadata>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetMetadataQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const postMetadata = (
    metadatumRequest: MetadatumRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MetadatumResponse>> => {
    return axios.post(
      `/metadata`,
      metadatumRequest,options
    );
  }



export const getPostMetadataMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMetadata>>, TError,{data: MetadatumRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postMetadata>>, TError,{data: MetadatumRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMetadata>>, {data: MetadatumRequest}> = (props) => {
          const {data} = props ?? {};

          return  postMetadata(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostMetadataMutationResult = NonNullable<Awaited<ReturnType<typeof postMetadata>>>
    export type PostMetadataMutationBody = MetadatumRequest
    export type PostMetadataMutationError = AxiosError<Error>

    export const usePostMetadata = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMetadata>>, TError,{data: MetadatumRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostMetadataMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const getMetadataId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MetadatumResponse>> => {
    return axios.get(
      `/metadata/${id}`,options
    );
  }


export const getGetMetadataIdQueryKey = (id: number,) => [`/metadata/${id}`] as const;
  

    
export const getGetMetadataIdQueryOptions = <TData = Awaited<ReturnType<typeof getMetadataId>>, TError = AxiosError<Error>>(id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMetadataId>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getMetadataId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMetadataIdQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMetadataId>>> = ({ signal }) => getMetadataId(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type GetMetadataIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMetadataId>>>
export type GetMetadataIdQueryError = AxiosError<Error>

export const useGetMetadataId = <TData = Awaited<ReturnType<typeof getMetadataId>>, TError = AxiosError<Error>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMetadataId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetMetadataIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const putMetadataId = (
    id: number,
    metadatumRequest: MetadatumRequest, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<MetadatumResponse>> => {
    return axios.put(
      `/metadata/${id}`,
      metadatumRequest,options
    );
  }



export const getPutMetadataIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMetadataId>>, TError,{id: number;data: MetadatumRequest}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putMetadataId>>, TError,{id: number;data: MetadatumRequest}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMetadataId>>, {id: number;data: MetadatumRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  putMetadataId(id,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PutMetadataIdMutationResult = NonNullable<Awaited<ReturnType<typeof putMetadataId>>>
    export type PutMetadataIdMutationBody = MetadatumRequest
    export type PutMetadataIdMutationError = AxiosError<Error>

    export const usePutMetadataId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putMetadataId>>, TError,{id: number;data: MetadatumRequest}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPutMetadataIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const deleteMetadataId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number>> => {
    return axios.delete(
      `/metadata/${id}`,options
    );
  }



export const getDeleteMetadataIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMetadataId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMetadataId>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMetadataId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteMetadataId(id,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteMetadataIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMetadataId>>>
    
    export type DeleteMetadataIdMutationError = AxiosError<Error>

    export const useDeleteMetadataId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMetadataId>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getDeleteMetadataIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * Upload files
 */
export const postUpload = (
    postUploadBody: PostUploadBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UploadFile[]>> => {const formData = new FormData();
if(postUploadBody.path !== undefined) {
 formData.append('path', postUploadBody.path)
 }
if(postUploadBody.refId !== undefined) {
 formData.append('refId', postUploadBody.refId)
 }
if(postUploadBody.ref !== undefined) {
 formData.append('ref', postUploadBody.ref)
 }
if(postUploadBody.field !== undefined) {
 formData.append('field', postUploadBody.field)
 }
postUploadBody.files.forEach(value => formData.append('files', value));

    return axios.post(
      `/upload`,
      formData,options
    );
  }



export const getPostUploadMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUpload>>, TError,{data: PostUploadBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postUpload>>, TError,{data: PostUploadBody}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUpload>>, {data: PostUploadBody}> = (props) => {
          const {data} = props ?? {};

          return  postUpload(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostUploadMutationResult = NonNullable<Awaited<ReturnType<typeof postUpload>>>
    export type PostUploadMutationBody = PostUploadBody
    export type PostUploadMutationError = AxiosError<unknown>

    export const usePostUpload = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUpload>>, TError,{data: PostUploadBody}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostUploadMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
export const getUploadFiles = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UploadFile[]>> => {
    return axios.get(
      `/upload/files`,options
    );
  }


export const getGetUploadFilesQueryKey = () => [`/upload/files`] as const;
  

    
export const getGetUploadFilesQueryOptions = <TData = Awaited<ReturnType<typeof getUploadFiles>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUploadFiles>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getUploadFiles>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUploadFilesQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUploadFiles>>> = ({ signal }) => getUploadFiles({ signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetUploadFilesQueryResult = NonNullable<Awaited<ReturnType<typeof getUploadFiles>>>
export type GetUploadFilesQueryError = AxiosError<unknown>

export const useGetUploadFiles = <TData = Awaited<ReturnType<typeof getUploadFiles>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUploadFiles>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUploadFilesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const getUploadFilesId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UploadFile>> => {
    return axios.get(
      `/upload/files/${id}`,options
    );
  }


export const getGetUploadFilesIdQueryKey = (id: string,) => [`/upload/files/${id}`] as const;
  

    
export const getGetUploadFilesIdQueryOptions = <TData = Awaited<ReturnType<typeof getUploadFilesId>>, TError = AxiosError<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUploadFilesId>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getUploadFilesId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUploadFilesIdQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUploadFilesId>>> = ({ signal }) => getUploadFilesId(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type GetUploadFilesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUploadFilesId>>>
export type GetUploadFilesIdQueryError = AxiosError<unknown>

export const useGetUploadFilesId = <TData = Awaited<ReturnType<typeof getUploadFilesId>>, TError = AxiosError<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUploadFilesId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUploadFilesIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const deleteUploadFilesId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UploadFile>> => {
    return axios.delete(
      `/upload/files/${id}`,options
    );
  }



export const getDeleteUploadFilesIdMutationOptions = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUploadFilesId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteUploadFilesId>>, TError,{id: string}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUploadFilesId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteUploadFilesId(id,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteUploadFilesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUploadFilesId>>>
    
    export type DeleteUploadFilesIdMutationError = AxiosError<unknown>

    export const useDeleteUploadFilesId = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUploadFilesId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getDeleteUploadFilesIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * Redirects to provider login before being redirect to /auth/{provider}/callback
 * @summary Login with a provider
 */
export const getConnectProvider = (
    provider: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    return axios.get(
      `/connect/${provider}`,options
    );
  }


export const getGetConnectProviderQueryKey = (provider: string,) => [`/connect/${provider}`] as const;
  

    
export const getGetConnectProviderQueryOptions = <TData = Awaited<ReturnType<typeof getConnectProvider>>, TError = AxiosError<void | Error>>(provider: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConnectProvider>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getConnectProvider>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConnectProviderQueryKey(provider);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConnectProvider>>> = ({ signal }) => getConnectProvider(provider, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(provider), ...queryOptions}}

export type GetConnectProviderQueryResult = NonNullable<Awaited<ReturnType<typeof getConnectProvider>>>
export type GetConnectProviderQueryError = AxiosError<void | Error>

/**
 * @summary Login with a provider
 */
export const useGetConnectProvider = <TData = Awaited<ReturnType<typeof getConnectProvider>>, TError = AxiosError<void | Error>>(
 provider: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConnectProvider>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetConnectProviderQueryOptions(provider,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * Returns a jwt token and user info
 * @summary Local login
 */
export const postAuthLocal = (
    postAuthLocalBody: PostAuthLocalBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UsersPermissionsUserRegistration>> => {
    return axios.post(
      `/auth/local`,
      postAuthLocalBody,options
    );
  }



export const getPostAuthLocalMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLocal>>, TError,{data: PostAuthLocalBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthLocal>>, TError,{data: PostAuthLocalBody}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthLocal>>, {data: PostAuthLocalBody}> = (props) => {
          const {data} = props ?? {};

          return  postAuthLocal(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostAuthLocalMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthLocal>>>
    export type PostAuthLocalMutationBody = PostAuthLocalBody
    export type PostAuthLocalMutationError = AxiosError<Error>

    /**
 * @summary Local login
 */
export const usePostAuthLocal = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLocal>>, TError,{data: PostAuthLocalBody}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostAuthLocalMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * Returns a jwt token and user info
 * @summary Register a user
 */
export const postAuthLocalRegister = (
    postAuthLocalRegisterBody: PostAuthLocalRegisterBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UsersPermissionsUserRegistration>> => {
    return axios.post(
      `/auth/local/register`,
      postAuthLocalRegisterBody,options
    );
  }



export const getPostAuthLocalRegisterMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLocalRegister>>, TError,{data: PostAuthLocalRegisterBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthLocalRegister>>, TError,{data: PostAuthLocalRegisterBody}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthLocalRegister>>, {data: PostAuthLocalRegisterBody}> = (props) => {
          const {data} = props ?? {};

          return  postAuthLocalRegister(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostAuthLocalRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthLocalRegister>>>
    export type PostAuthLocalRegisterMutationBody = PostAuthLocalRegisterBody
    export type PostAuthLocalRegisterMutationError = AxiosError<Error>

    /**
 * @summary Register a user
 */
export const usePostAuthLocalRegister = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthLocalRegister>>, TError,{data: PostAuthLocalRegisterBody}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostAuthLocalRegisterMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * @summary Default Callback from provider auth
 */
export const getAuthProviderCallback = (
    provider: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UsersPermissionsUserRegistration>> => {
    return axios.get(
      `/auth/${provider}/callback`,options
    );
  }


export const getGetAuthProviderCallbackQueryKey = (provider: string,) => [`/auth/${provider}/callback`] as const;
  

    
export const getGetAuthProviderCallbackQueryOptions = <TData = Awaited<ReturnType<typeof getAuthProviderCallback>>, TError = AxiosError<Error>>(provider: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAuthProviderCallback>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getAuthProviderCallback>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAuthProviderCallbackQueryKey(provider);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthProviderCallback>>> = ({ signal }) => getAuthProviderCallback(provider, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(provider), ...queryOptions}}

export type GetAuthProviderCallbackQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthProviderCallback>>>
export type GetAuthProviderCallbackQueryError = AxiosError<Error>

/**
 * @summary Default Callback from provider auth
 */
export const useGetAuthProviderCallback = <TData = Awaited<ReturnType<typeof getAuthProviderCallback>>, TError = AxiosError<Error>>(
 provider: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAuthProviderCallback>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAuthProviderCallbackQueryOptions(provider,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Send rest password email
 */
export const postAuthForgotPassword = (
    postAuthForgotPasswordBody: PostAuthForgotPasswordBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostAuthForgotPassword200>> => {
    return axios.post(
      `/auth/forgot-password`,
      postAuthForgotPasswordBody,options
    );
  }



export const getPostAuthForgotPasswordMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthForgotPassword>>, TError,{data: PostAuthForgotPasswordBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthForgotPassword>>, TError,{data: PostAuthForgotPasswordBody}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthForgotPassword>>, {data: PostAuthForgotPasswordBody}> = (props) => {
          const {data} = props ?? {};

          return  postAuthForgotPassword(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostAuthForgotPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthForgotPassword>>>
    export type PostAuthForgotPasswordMutationBody = PostAuthForgotPasswordBody
    export type PostAuthForgotPasswordMutationError = AxiosError<Error>

    /**
 * @summary Send rest password email
 */
export const usePostAuthForgotPassword = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthForgotPassword>>, TError,{data: PostAuthForgotPasswordBody}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostAuthForgotPasswordMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * @summary Rest user password
 */
export const postAuthResetPassword = (
    postAuthResetPasswordBody: PostAuthResetPasswordBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UsersPermissionsUserRegistration>> => {
    return axios.post(
      `/auth/reset-password`,
      postAuthResetPasswordBody,options
    );
  }



export const getPostAuthResetPasswordMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthResetPassword>>, TError,{data: PostAuthResetPasswordBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthResetPassword>>, TError,{data: PostAuthResetPasswordBody}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthResetPassword>>, {data: PostAuthResetPasswordBody}> = (props) => {
          const {data} = props ?? {};

          return  postAuthResetPassword(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostAuthResetPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthResetPassword>>>
    export type PostAuthResetPasswordMutationBody = PostAuthResetPasswordBody
    export type PostAuthResetPasswordMutationError = AxiosError<Error>

    /**
 * @summary Rest user password
 */
export const usePostAuthResetPassword = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthResetPassword>>, TError,{data: PostAuthResetPasswordBody}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostAuthResetPasswordMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * @summary Update user's own password
 */
export const postAuthChangePassword = (
    postAuthChangePasswordBody: PostAuthChangePasswordBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UsersPermissionsUserRegistration>> => {
    return axios.post(
      `/auth/change-password`,
      postAuthChangePasswordBody,options
    );
  }



export const getPostAuthChangePasswordMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthChangePassword>>, TError,{data: PostAuthChangePasswordBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthChangePassword>>, TError,{data: PostAuthChangePasswordBody}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthChangePassword>>, {data: PostAuthChangePasswordBody}> = (props) => {
          const {data} = props ?? {};

          return  postAuthChangePassword(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostAuthChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthChangePassword>>>
    export type PostAuthChangePasswordMutationBody = PostAuthChangePasswordBody
    export type PostAuthChangePasswordMutationError = AxiosError<Error>

    /**
 * @summary Update user's own password
 */
export const usePostAuthChangePassword = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthChangePassword>>, TError,{data: PostAuthChangePasswordBody}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostAuthChangePasswordMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * @summary Confirm user email
 */
export const getAuthEmailConfirmation = (
    params?: GetAuthEmailConfirmationParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<unknown>> => {
    return axios.get(
      `/auth/email-confirmation`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getGetAuthEmailConfirmationQueryKey = (params?: GetAuthEmailConfirmationParams,) => [`/auth/email-confirmation`, ...(params ? [params]: [])] as const;
  

    
export const getGetAuthEmailConfirmationQueryOptions = <TData = Awaited<ReturnType<typeof getAuthEmailConfirmation>>, TError = AxiosError<void | Error>>(params?: GetAuthEmailConfirmationParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAuthEmailConfirmation>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getAuthEmailConfirmation>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAuthEmailConfirmationQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthEmailConfirmation>>> = ({ signal }) => getAuthEmailConfirmation(params, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetAuthEmailConfirmationQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthEmailConfirmation>>>
export type GetAuthEmailConfirmationQueryError = AxiosError<void | Error>

/**
 * @summary Confirm user email
 */
export const useGetAuthEmailConfirmation = <TData = Awaited<ReturnType<typeof getAuthEmailConfirmation>>, TError = AxiosError<void | Error>>(
 params?: GetAuthEmailConfirmationParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getAuthEmailConfirmation>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAuthEmailConfirmationQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Send confirmation email
 */
export const postAuthSendEmailConfirmation = (
    postAuthSendEmailConfirmationBody: PostAuthSendEmailConfirmationBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostAuthSendEmailConfirmation200>> => {
    return axios.post(
      `/auth/send-email-confirmation`,
      postAuthSendEmailConfirmationBody,options
    );
  }



export const getPostAuthSendEmailConfirmationMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthSendEmailConfirmation>>, TError,{data: PostAuthSendEmailConfirmationBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthSendEmailConfirmation>>, TError,{data: PostAuthSendEmailConfirmationBody}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthSendEmailConfirmation>>, {data: PostAuthSendEmailConfirmationBody}> = (props) => {
          const {data} = props ?? {};

          return  postAuthSendEmailConfirmation(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostAuthSendEmailConfirmationMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthSendEmailConfirmation>>>
    export type PostAuthSendEmailConfirmationMutationBody = PostAuthSendEmailConfirmationBody
    export type PostAuthSendEmailConfirmationMutationError = AxiosError<Error>

    /**
 * @summary Send confirmation email
 */
export const usePostAuthSendEmailConfirmation = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthSendEmailConfirmation>>, TError,{data: PostAuthSendEmailConfirmationBody}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostAuthSendEmailConfirmationMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get default generated permissions
 */
export const getUsersPermissionsPermissions = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUsersPermissionsPermissions200>> => {
    return axios.get(
      `/users-permissions/permissions`,options
    );
  }


export const getGetUsersPermissionsPermissionsQueryKey = () => [`/users-permissions/permissions`] as const;
  

    
export const getGetUsersPermissionsPermissionsQueryOptions = <TData = Awaited<ReturnType<typeof getUsersPermissionsPermissions>>, TError = AxiosError<Error>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsersPermissionsPermissions>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getUsersPermissionsPermissions>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersPermissionsPermissionsQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersPermissionsPermissions>>> = ({ signal }) => getUsersPermissionsPermissions({ signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetUsersPermissionsPermissionsQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersPermissionsPermissions>>>
export type GetUsersPermissionsPermissionsQueryError = AxiosError<Error>

/**
 * @summary Get default generated permissions
 */
export const useGetUsersPermissionsPermissions = <TData = Awaited<ReturnType<typeof getUsersPermissionsPermissions>>, TError = AxiosError<Error>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsersPermissionsPermissions>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUsersPermissionsPermissionsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary List roles
 */
export const getUsersPermissionsRoles = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUsersPermissionsRoles200>> => {
    return axios.get(
      `/users-permissions/roles`,options
    );
  }


export const getGetUsersPermissionsRolesQueryKey = () => [`/users-permissions/roles`] as const;
  

    
export const getGetUsersPermissionsRolesQueryOptions = <TData = Awaited<ReturnType<typeof getUsersPermissionsRoles>>, TError = AxiosError<Error>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsersPermissionsRoles>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getUsersPermissionsRoles>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersPermissionsRolesQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersPermissionsRoles>>> = ({ signal }) => getUsersPermissionsRoles({ signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetUsersPermissionsRolesQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersPermissionsRoles>>>
export type GetUsersPermissionsRolesQueryError = AxiosError<Error>

/**
 * @summary List roles
 */
export const useGetUsersPermissionsRoles = <TData = Awaited<ReturnType<typeof getUsersPermissionsRoles>>, TError = AxiosError<Error>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsersPermissionsRoles>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUsersPermissionsRolesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Create a role
 */
export const postUsersPermissionsRoles = (
    usersPermissionsRoleRequestBody: UsersPermissionsRoleRequestBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostUsersPermissionsRoles200>> => {
    return axios.post(
      `/users-permissions/roles`,
      usersPermissionsRoleRequestBody,options
    );
  }



export const getPostUsersPermissionsRolesMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUsersPermissionsRoles>>, TError,{data: UsersPermissionsRoleRequestBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postUsersPermissionsRoles>>, TError,{data: UsersPermissionsRoleRequestBody}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUsersPermissionsRoles>>, {data: UsersPermissionsRoleRequestBody}> = (props) => {
          const {data} = props ?? {};

          return  postUsersPermissionsRoles(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostUsersPermissionsRolesMutationResult = NonNullable<Awaited<ReturnType<typeof postUsersPermissionsRoles>>>
    export type PostUsersPermissionsRolesMutationBody = UsersPermissionsRoleRequestBody
    export type PostUsersPermissionsRolesMutationError = AxiosError<Error>

    /**
 * @summary Create a role
 */
export const usePostUsersPermissionsRoles = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUsersPermissionsRoles>>, TError,{data: UsersPermissionsRoleRequestBody}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostUsersPermissionsRolesMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get a role
 */
export const getUsersPermissionsRolesId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUsersPermissionsRolesId200>> => {
    return axios.get(
      `/users-permissions/roles/${id}`,options
    );
  }


export const getGetUsersPermissionsRolesIdQueryKey = (id: string,) => [`/users-permissions/roles/${id}`] as const;
  

    
export const getGetUsersPermissionsRolesIdQueryOptions = <TData = Awaited<ReturnType<typeof getUsersPermissionsRolesId>>, TError = AxiosError<Error>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsersPermissionsRolesId>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getUsersPermissionsRolesId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersPermissionsRolesIdQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersPermissionsRolesId>>> = ({ signal }) => getUsersPermissionsRolesId(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type GetUsersPermissionsRolesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersPermissionsRolesId>>>
export type GetUsersPermissionsRolesIdQueryError = AxiosError<Error>

/**
 * @summary Get a role
 */
export const useGetUsersPermissionsRolesId = <TData = Awaited<ReturnType<typeof getUsersPermissionsRolesId>>, TError = AxiosError<Error>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsersPermissionsRolesId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUsersPermissionsRolesIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Update a role
 */
export const putUsersPermissionsRolesRole = (
    role: string,
    usersPermissionsRoleRequestBody: UsersPermissionsRoleRequestBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PutUsersPermissionsRolesRole200>> => {
    return axios.put(
      `/users-permissions/roles/${role}`,
      usersPermissionsRoleRequestBody,options
    );
  }



export const getPutUsersPermissionsRolesRoleMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putUsersPermissionsRolesRole>>, TError,{role: string;data: UsersPermissionsRoleRequestBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putUsersPermissionsRolesRole>>, TError,{role: string;data: UsersPermissionsRoleRequestBody}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putUsersPermissionsRolesRole>>, {role: string;data: UsersPermissionsRoleRequestBody}> = (props) => {
          const {role,data} = props ?? {};

          return  putUsersPermissionsRolesRole(role,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PutUsersPermissionsRolesRoleMutationResult = NonNullable<Awaited<ReturnType<typeof putUsersPermissionsRolesRole>>>
    export type PutUsersPermissionsRolesRoleMutationBody = UsersPermissionsRoleRequestBody
    export type PutUsersPermissionsRolesRoleMutationError = AxiosError<Error>

    /**
 * @summary Update a role
 */
export const usePutUsersPermissionsRolesRole = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putUsersPermissionsRolesRole>>, TError,{role: string;data: UsersPermissionsRoleRequestBody}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPutUsersPermissionsRolesRoleMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a role
 */
export const deleteUsersPermissionsRolesRole = (
    role: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DeleteUsersPermissionsRolesRole200>> => {
    return axios.delete(
      `/users-permissions/roles/${role}`,options
    );
  }



export const getDeleteUsersPermissionsRolesRoleMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUsersPermissionsRolesRole>>, TError,{role: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteUsersPermissionsRolesRole>>, TError,{role: string}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUsersPermissionsRolesRole>>, {role: string}> = (props) => {
          const {role} = props ?? {};

          return  deleteUsersPermissionsRolesRole(role,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteUsersPermissionsRolesRoleMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUsersPermissionsRolesRole>>>
    
    export type DeleteUsersPermissionsRolesRoleMutationError = AxiosError<Error>

    /**
 * @summary Delete a role
 */
export const useDeleteUsersPermissionsRolesRole = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUsersPermissionsRolesRole>>, TError,{role: string}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getDeleteUsersPermissionsRolesRoleMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get list of users
 */
export const getUsers = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UsersPermissionsUser[]>> => {
    return axios.get(
      `/users`,options
    );
  }


export const getGetUsersQueryKey = () => [`/users`] as const;
  

    
export const getGetUsersQueryOptions = <TData = Awaited<ReturnType<typeof getUsers>>, TError = AxiosError<Error>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsers>>> = ({ signal }) => getUsers({ signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getUsers>>>
export type GetUsersQueryError = AxiosError<Error>

/**
 * @summary Get list of users
 */
export const useGetUsers = <TData = Awaited<ReturnType<typeof getUsers>>, TError = AxiosError<Error>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUsersQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Create a user
 */
export const postUsers = (
    postUsersBody: PostUsersBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PostUsers201>> => {
    return axios.post(
      `/users`,
      postUsersBody,options
    );
  }



export const getPostUsersMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUsers>>, TError,{data: PostUsersBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postUsers>>, TError,{data: PostUsersBody}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUsers>>, {data: PostUsersBody}> = (props) => {
          const {data} = props ?? {};

          return  postUsers(data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PostUsersMutationResult = NonNullable<Awaited<ReturnType<typeof postUsers>>>
    export type PostUsersMutationBody = PostUsersBody
    export type PostUsersMutationError = AxiosError<Error>

    /**
 * @summary Create a user
 */
export const usePostUsers = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUsers>>, TError,{data: PostUsersBody}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPostUsersMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get a user
 */
export const getUsersId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UsersPermissionsUser>> => {
    return axios.get(
      `/users/${id}`,options
    );
  }


export const getGetUsersIdQueryKey = (id: string,) => [`/users/${id}`] as const;
  

    
export const getGetUsersIdQueryOptions = <TData = Awaited<ReturnType<typeof getUsersId>>, TError = AxiosError<Error>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsersId>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getUsersId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersIdQueryKey(id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersId>>> = ({ signal }) => getUsersId(id, { signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions}}

export type GetUsersIdQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersId>>>
export type GetUsersIdQueryError = AxiosError<Error>

/**
 * @summary Get a user
 */
export const useGetUsersId = <TData = Awaited<ReturnType<typeof getUsersId>>, TError = AxiosError<Error>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsersId>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUsersIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Update a user
 */
export const putUsersId = (
    id: string,
    putUsersIdBody: PutUsersIdBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PutUsersId200>> => {
    return axios.put(
      `/users/${id}`,
      putUsersIdBody,options
    );
  }



export const getPutUsersIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putUsersId>>, TError,{id: string;data: PutUsersIdBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putUsersId>>, TError,{id: string;data: PutUsersIdBody}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putUsersId>>, {id: string;data: PutUsersIdBody}> = (props) => {
          const {id,data} = props ?? {};

          return  putUsersId(id,data,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type PutUsersIdMutationResult = NonNullable<Awaited<ReturnType<typeof putUsersId>>>
    export type PutUsersIdMutationBody = PutUsersIdBody
    export type PutUsersIdMutationError = AxiosError<Error>

    /**
 * @summary Update a user
 */
export const usePutUsersId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putUsersId>>, TError,{id: string;data: PutUsersIdBody}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getPutUsersIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * @summary Delete a user
 */
export const deleteUsersId = (
    id: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UsersPermissionsUser>> => {
    return axios.delete(
      `/users/${id}`,options
    );
  }



export const getDeleteUsersIdMutationOptions = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUsersId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deleteUsersId>>, TError,{id: string}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteUsersId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteUsersId(id,axiosOptions)
        }

        

 
   return  { mutationFn, ...mutationOptions }}

    export type DeleteUsersIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUsersId>>>
    
    export type DeleteUsersIdMutationError = AxiosError<Error>

    /**
 * @summary Delete a user
 */
export const useDeleteUsersId = <TError = AxiosError<Error>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteUsersId>>, TError,{id: string}, TContext>, axios?: AxiosRequestConfig}
) => {
    
      const mutationOptions = getDeleteUsersIdMutationOptions(options);
     
      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get authenticated user info
 */
export const getUsersMe = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UsersPermissionsUser>> => {
    return axios.get(
      `/users/me`,options
    );
  }


export const getGetUsersMeQueryKey = () => [`/users/me`] as const;
  

    
export const getGetUsersMeQueryOptions = <TData = Awaited<ReturnType<typeof getUsersMe>>, TError = AxiosError<Error>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersMeQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersMe>>> = ({ signal }) => getUsersMe({ signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetUsersMeQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersMe>>>
export type GetUsersMeQueryError = AxiosError<Error>

/**
 * @summary Get authenticated user info
 */
export const useGetUsersMe = <TData = Awaited<ReturnType<typeof getUsersMe>>, TError = AxiosError<Error>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsersMe>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUsersMeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Get user count
 */
export const getUsersCount = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<number>> => {
    return axios.get(
      `/users/count`,options
    );
  }


export const getGetUsersCountQueryKey = () => [`/users/count`] as const;
  

    
export const getGetUsersCountQueryOptions = <TData = Awaited<ReturnType<typeof getUsersCount>>, TError = AxiosError<Error>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsersCount>>, TError, TData>, axios?: AxiosRequestConfig}
): UseQueryOptions<Awaited<ReturnType<typeof getUsersCount>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersCountQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsersCount>>> = ({ signal }) => getUsersCount({ signal, ...axiosOptions });
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetUsersCountQueryResult = NonNullable<Awaited<ReturnType<typeof getUsersCount>>>
export type GetUsersCountQueryError = AxiosError<Error>

/**
 * @summary Get user count
 */
export const useGetUsersCount = <TData = Awaited<ReturnType<typeof getUsersCount>>, TError = AxiosError<Error>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUsersCount>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUsersCountQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


