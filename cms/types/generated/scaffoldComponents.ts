/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useScaffoldContext, ScaffoldContext } from "./scaffoldContext";
import type * as Fetcher from "./scaffoldFetcher";
import { scaffoldFetch } from "./scaffoldFetcher";
import type * as Schemas from "./scaffoldSchemas";

export type GetDatasetsQueryParams = {
  /**
   * Sort by attributes ascending (asc) or descending (desc)
   */
  sort?: string;
  /**
   * Return page/pageSize (default: true)
   */
  ["pagination[withCount]"]?: boolean;
  /**
   * Page number (default: 0)
   */
  ["pagination[page]"]?: number;
  /**
   * Page size (default: 25)
   */
  ["pagination[pageSize]"]?: number;
  /**
   * Offset value (default: 0)
   */
  ["pagination[start]"]?: number;
  /**
   * Number of entities to return (default: 25)
   */
  ["pagination[limit]"]?: number;
  /**
   * Fields to return (ex: title,author)
   */
  fields?: string;
  /**
   * Relations to return
   */
  populate?: string;
  /**
   * Filters to apply
   */
  filters?: Record<string, any>;
  /**
   * Locale to apply
   */
  locale?: string;
};

export type GetDatasetsError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.Error;
    }
  | {
      status: 401;
      payload: Schemas.Error;
    }
  | {
      status: 403;
      payload: Schemas.Error;
    }
  | {
      status: 404;
      payload: Schemas.Error;
    }
  | {
      status: 500;
      payload: Schemas.Error;
    }
>;

export type GetDatasetsVariables = {
  queryParams?: GetDatasetsQueryParams;
} & ScaffoldContext["fetcherOptions"];

export const fetchGetDatasets = (
  variables: GetDatasetsVariables,
  signal?: AbortSignal
) =>
  scaffoldFetch<
    Schemas.DatasetListResponse,
    GetDatasetsError,
    undefined,
    {},
    GetDatasetsQueryParams,
    {}
  >({ url: "/datasets", method: "get", ...variables, signal });

export const useGetDatasets = <TData = Schemas.DatasetListResponse>(
  variables: GetDatasetsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.DatasetListResponse,
      GetDatasetsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useScaffoldContext(options);
  return reactQuery.useQuery<
    Schemas.DatasetListResponse,
    GetDatasetsError,
    TData
  >(
    queryKeyFn({ path: "/datasets", operationId: "getDatasets", variables }),
    ({ signal }) =>
      fetchGetDatasets({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PostDatasetsError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.Error;
    }
  | {
      status: 401;
      payload: Schemas.Error;
    }
  | {
      status: 403;
      payload: Schemas.Error;
    }
  | {
      status: 404;
      payload: Schemas.Error;
    }
  | {
      status: 500;
      payload: Schemas.Error;
    }
>;

export type PostDatasetsVariables = {
  body: Schemas.DatasetRequest;
} & ScaffoldContext["fetcherOptions"];

export const fetchPostDatasets = (
  variables: PostDatasetsVariables,
  signal?: AbortSignal
) =>
  scaffoldFetch<
    Schemas.DatasetResponse,
    PostDatasetsError,
    Schemas.DatasetRequest,
    {},
    {},
    {}
  >({ url: "/datasets", method: "post", ...variables, signal });

export const usePostDatasets = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.DatasetResponse,
      PostDatasetsError,
      PostDatasetsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useScaffoldContext();
  return reactQuery.useMutation<
    Schemas.DatasetResponse,
    PostDatasetsError,
    PostDatasetsVariables
  >(
    (variables: PostDatasetsVariables) =>
      fetchPostDatasets({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetDatasetsIdPathParams = {
  id: number;
};

export type GetDatasetsIdError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.Error;
    }
  | {
      status: 401;
      payload: Schemas.Error;
    }
  | {
      status: 403;
      payload: Schemas.Error;
    }
  | {
      status: 404;
      payload: Schemas.Error;
    }
  | {
      status: 500;
      payload: Schemas.Error;
    }
>;

export type GetDatasetsIdVariables = {
  pathParams: GetDatasetsIdPathParams;
} & ScaffoldContext["fetcherOptions"];

export const fetchGetDatasetsId = (
  variables: GetDatasetsIdVariables,
  signal?: AbortSignal
) =>
  scaffoldFetch<
    Schemas.DatasetResponse,
    GetDatasetsIdError,
    undefined,
    {},
    {},
    GetDatasetsIdPathParams
  >({ url: "/datasets/{id}", method: "get", ...variables, signal });

export const useGetDatasetsId = <TData = Schemas.DatasetResponse>(
  variables: GetDatasetsIdVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.DatasetResponse,
      GetDatasetsIdError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useScaffoldContext(options);
  return reactQuery.useQuery<
    Schemas.DatasetResponse,
    GetDatasetsIdError,
    TData
  >(
    queryKeyFn({
      path: "/datasets/{id}",
      operationId: "getDatasetsId",
      variables,
    }),
    ({ signal }) =>
      fetchGetDatasetsId({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PutDatasetsIdPathParams = {
  id: number;
};

export type PutDatasetsIdError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.Error;
    }
  | {
      status: 401;
      payload: Schemas.Error;
    }
  | {
      status: 403;
      payload: Schemas.Error;
    }
  | {
      status: 404;
      payload: Schemas.Error;
    }
  | {
      status: 500;
      payload: Schemas.Error;
    }
>;

export type PutDatasetsIdVariables = {
  body: Schemas.DatasetRequest;
  pathParams: PutDatasetsIdPathParams;
} & ScaffoldContext["fetcherOptions"];

export const fetchPutDatasetsId = (
  variables: PutDatasetsIdVariables,
  signal?: AbortSignal
) =>
  scaffoldFetch<
    Schemas.DatasetResponse,
    PutDatasetsIdError,
    Schemas.DatasetRequest,
    {},
    {},
    PutDatasetsIdPathParams
  >({ url: "/datasets/{id}", method: "put", ...variables, signal });

export const usePutDatasetsId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.DatasetResponse,
      PutDatasetsIdError,
      PutDatasetsIdVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useScaffoldContext();
  return reactQuery.useMutation<
    Schemas.DatasetResponse,
    PutDatasetsIdError,
    PutDatasetsIdVariables
  >(
    (variables: PutDatasetsIdVariables) =>
      fetchPutDatasetsId({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteDatasetsIdPathParams = {
  id: number;
};

export type DeleteDatasetsIdError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.Error;
    }
  | {
      status: 401;
      payload: Schemas.Error;
    }
  | {
      status: 403;
      payload: Schemas.Error;
    }
  | {
      status: 404;
      payload: Schemas.Error;
    }
  | {
      status: 500;
      payload: Schemas.Error;
    }
>;

export type DeleteDatasetsIdVariables = {
  pathParams: DeleteDatasetsIdPathParams;
} & ScaffoldContext["fetcherOptions"];

export const fetchDeleteDatasetsId = (
  variables: DeleteDatasetsIdVariables,
  signal?: AbortSignal
) =>
  scaffoldFetch<
    number,
    DeleteDatasetsIdError,
    undefined,
    {},
    {},
    DeleteDatasetsIdPathParams
  >({ url: "/datasets/{id}", method: "delete", ...variables, signal });

export const useDeleteDatasetsId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      number,
      DeleteDatasetsIdError,
      DeleteDatasetsIdVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useScaffoldContext();
  return reactQuery.useMutation<
    number,
    DeleteDatasetsIdError,
    DeleteDatasetsIdVariables
  >(
    (variables: DeleteDatasetsIdVariables) =>
      fetchDeleteDatasetsId({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetDatasetGroupsQueryParams = {
  /**
   * Sort by attributes ascending (asc) or descending (desc)
   */
  sort?: string;
  /**
   * Return page/pageSize (default: true)
   */
  ["pagination[withCount]"]?: boolean;
  /**
   * Page number (default: 0)
   */
  ["pagination[page]"]?: number;
  /**
   * Page size (default: 25)
   */
  ["pagination[pageSize]"]?: number;
  /**
   * Offset value (default: 0)
   */
  ["pagination[start]"]?: number;
  /**
   * Number of entities to return (default: 25)
   */
  ["pagination[limit]"]?: number;
  /**
   * Fields to return (ex: title,author)
   */
  fields?: string;
  /**
   * Relations to return
   */
  populate?: string;
  /**
   * Filters to apply
   */
  filters?: Record<string, any>;
  /**
   * Locale to apply
   */
  locale?: string;
};

export type GetDatasetGroupsError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.Error;
    }
  | {
      status: 401;
      payload: Schemas.Error;
    }
  | {
      status: 403;
      payload: Schemas.Error;
    }
  | {
      status: 404;
      payload: Schemas.Error;
    }
  | {
      status: 500;
      payload: Schemas.Error;
    }
>;

export type GetDatasetGroupsVariables = {
  queryParams?: GetDatasetGroupsQueryParams;
} & ScaffoldContext["fetcherOptions"];

export const fetchGetDatasetGroups = (
  variables: GetDatasetGroupsVariables,
  signal?: AbortSignal
) =>
  scaffoldFetch<
    Schemas.DatasetGroupListResponse,
    GetDatasetGroupsError,
    undefined,
    {},
    GetDatasetGroupsQueryParams,
    {}
  >({ url: "/dataset-groups", method: "get", ...variables, signal });

export const useGetDatasetGroups = <TData = Schemas.DatasetGroupListResponse>(
  variables: GetDatasetGroupsVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.DatasetGroupListResponse,
      GetDatasetGroupsError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useScaffoldContext(options);
  return reactQuery.useQuery<
    Schemas.DatasetGroupListResponse,
    GetDatasetGroupsError,
    TData
  >(
    queryKeyFn({
      path: "/dataset-groups",
      operationId: "getDatasetGroups",
      variables,
    }),
    ({ signal }) =>
      fetchGetDatasetGroups({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PostDatasetGroupsError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.Error;
    }
  | {
      status: 401;
      payload: Schemas.Error;
    }
  | {
      status: 403;
      payload: Schemas.Error;
    }
  | {
      status: 404;
      payload: Schemas.Error;
    }
  | {
      status: 500;
      payload: Schemas.Error;
    }
>;

export type PostDatasetGroupsVariables = {
  body: Schemas.DatasetGroupRequest;
} & ScaffoldContext["fetcherOptions"];

export const fetchPostDatasetGroups = (
  variables: PostDatasetGroupsVariables,
  signal?: AbortSignal
) =>
  scaffoldFetch<
    Schemas.DatasetGroupResponse,
    PostDatasetGroupsError,
    Schemas.DatasetGroupRequest,
    {},
    {},
    {}
  >({ url: "/dataset-groups", method: "post", ...variables, signal });

export const usePostDatasetGroups = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.DatasetGroupResponse,
      PostDatasetGroupsError,
      PostDatasetGroupsVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useScaffoldContext();
  return reactQuery.useMutation<
    Schemas.DatasetGroupResponse,
    PostDatasetGroupsError,
    PostDatasetGroupsVariables
  >(
    (variables: PostDatasetGroupsVariables) =>
      fetchPostDatasetGroups({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetDatasetGroupsIdPathParams = {
  id: number;
};

export type GetDatasetGroupsIdError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.Error;
    }
  | {
      status: 401;
      payload: Schemas.Error;
    }
  | {
      status: 403;
      payload: Schemas.Error;
    }
  | {
      status: 404;
      payload: Schemas.Error;
    }
  | {
      status: 500;
      payload: Schemas.Error;
    }
>;

export type GetDatasetGroupsIdVariables = {
  pathParams: GetDatasetGroupsIdPathParams;
} & ScaffoldContext["fetcherOptions"];

export const fetchGetDatasetGroupsId = (
  variables: GetDatasetGroupsIdVariables,
  signal?: AbortSignal
) =>
  scaffoldFetch<
    Schemas.DatasetGroupResponse,
    GetDatasetGroupsIdError,
    undefined,
    {},
    {},
    GetDatasetGroupsIdPathParams
  >({ url: "/dataset-groups/{id}", method: "get", ...variables, signal });

export const useGetDatasetGroupsId = <TData = Schemas.DatasetGroupResponse>(
  variables: GetDatasetGroupsIdVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.DatasetGroupResponse,
      GetDatasetGroupsIdError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useScaffoldContext(options);
  return reactQuery.useQuery<
    Schemas.DatasetGroupResponse,
    GetDatasetGroupsIdError,
    TData
  >(
    queryKeyFn({
      path: "/dataset-groups/{id}",
      operationId: "getDatasetGroupsId",
      variables,
    }),
    ({ signal }) =>
      fetchGetDatasetGroupsId({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PutDatasetGroupsIdPathParams = {
  id: number;
};

export type PutDatasetGroupsIdError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.Error;
    }
  | {
      status: 401;
      payload: Schemas.Error;
    }
  | {
      status: 403;
      payload: Schemas.Error;
    }
  | {
      status: 404;
      payload: Schemas.Error;
    }
  | {
      status: 500;
      payload: Schemas.Error;
    }
>;

export type PutDatasetGroupsIdVariables = {
  body: Schemas.DatasetGroupRequest;
  pathParams: PutDatasetGroupsIdPathParams;
} & ScaffoldContext["fetcherOptions"];

export const fetchPutDatasetGroupsId = (
  variables: PutDatasetGroupsIdVariables,
  signal?: AbortSignal
) =>
  scaffoldFetch<
    Schemas.DatasetGroupResponse,
    PutDatasetGroupsIdError,
    Schemas.DatasetGroupRequest,
    {},
    {},
    PutDatasetGroupsIdPathParams
  >({ url: "/dataset-groups/{id}", method: "put", ...variables, signal });

export const usePutDatasetGroupsId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.DatasetGroupResponse,
      PutDatasetGroupsIdError,
      PutDatasetGroupsIdVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useScaffoldContext();
  return reactQuery.useMutation<
    Schemas.DatasetGroupResponse,
    PutDatasetGroupsIdError,
    PutDatasetGroupsIdVariables
  >(
    (variables: PutDatasetGroupsIdVariables) =>
      fetchPutDatasetGroupsId({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteDatasetGroupsIdPathParams = {
  id: number;
};

export type DeleteDatasetGroupsIdError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.Error;
    }
  | {
      status: 401;
      payload: Schemas.Error;
    }
  | {
      status: 403;
      payload: Schemas.Error;
    }
  | {
      status: 404;
      payload: Schemas.Error;
    }
  | {
      status: 500;
      payload: Schemas.Error;
    }
>;

export type DeleteDatasetGroupsIdVariables = {
  pathParams: DeleteDatasetGroupsIdPathParams;
} & ScaffoldContext["fetcherOptions"];

export const fetchDeleteDatasetGroupsId = (
  variables: DeleteDatasetGroupsIdVariables,
  signal?: AbortSignal
) =>
  scaffoldFetch<
    number,
    DeleteDatasetGroupsIdError,
    undefined,
    {},
    {},
    DeleteDatasetGroupsIdPathParams
  >({ url: "/dataset-groups/{id}", method: "delete", ...variables, signal });

export const useDeleteDatasetGroupsId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      number,
      DeleteDatasetGroupsIdError,
      DeleteDatasetGroupsIdVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useScaffoldContext();
  return reactQuery.useMutation<
    number,
    DeleteDatasetGroupsIdError,
    DeleteDatasetGroupsIdVariables
  >(
    (variables: DeleteDatasetGroupsIdVariables) =>
      fetchDeleteDatasetGroupsId({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetDeckGlLayersQueryParams = {
  /**
   * Sort by attributes ascending (asc) or descending (desc)
   */
  sort?: string;
  /**
   * Return page/pageSize (default: true)
   */
  ["pagination[withCount]"]?: boolean;
  /**
   * Page number (default: 0)
   */
  ["pagination[page]"]?: number;
  /**
   * Page size (default: 25)
   */
  ["pagination[pageSize]"]?: number;
  /**
   * Offset value (default: 0)
   */
  ["pagination[start]"]?: number;
  /**
   * Number of entities to return (default: 25)
   */
  ["pagination[limit]"]?: number;
  /**
   * Fields to return (ex: title,author)
   */
  fields?: string;
  /**
   * Relations to return
   */
  populate?: string;
  /**
   * Filters to apply
   */
  filters?: Record<string, any>;
  /**
   * Locale to apply
   */
  locale?: string;
};

export type GetDeckGlLayersError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.Error;
    }
  | {
      status: 401;
      payload: Schemas.Error;
    }
  | {
      status: 403;
      payload: Schemas.Error;
    }
  | {
      status: 404;
      payload: Schemas.Error;
    }
  | {
      status: 500;
      payload: Schemas.Error;
    }
>;

export type GetDeckGlLayersVariables = {
  queryParams?: GetDeckGlLayersQueryParams;
} & ScaffoldContext["fetcherOptions"];

export const fetchGetDeckGlLayers = (
  variables: GetDeckGlLayersVariables,
  signal?: AbortSignal
) =>
  scaffoldFetch<
    Schemas.DeckGlLayerListResponse,
    GetDeckGlLayersError,
    undefined,
    {},
    GetDeckGlLayersQueryParams,
    {}
  >({ url: "/deck-gl-layers", method: "get", ...variables, signal });

export const useGetDeckGlLayers = <TData = Schemas.DeckGlLayerListResponse>(
  variables: GetDeckGlLayersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.DeckGlLayerListResponse,
      GetDeckGlLayersError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useScaffoldContext(options);
  return reactQuery.useQuery<
    Schemas.DeckGlLayerListResponse,
    GetDeckGlLayersError,
    TData
  >(
    queryKeyFn({
      path: "/deck-gl-layers",
      operationId: "getDeckGlLayers",
      variables,
    }),
    ({ signal }) =>
      fetchGetDeckGlLayers({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PostDeckGlLayersError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.Error;
    }
  | {
      status: 401;
      payload: Schemas.Error;
    }
  | {
      status: 403;
      payload: Schemas.Error;
    }
  | {
      status: 404;
      payload: Schemas.Error;
    }
  | {
      status: 500;
      payload: Schemas.Error;
    }
>;

export type PostDeckGlLayersVariables = {
  body: Schemas.DeckGlLayerRequest;
} & ScaffoldContext["fetcherOptions"];

export const fetchPostDeckGlLayers = (
  variables: PostDeckGlLayersVariables,
  signal?: AbortSignal
) =>
  scaffoldFetch<
    Schemas.DeckGlLayerResponse,
    PostDeckGlLayersError,
    Schemas.DeckGlLayerRequest,
    {},
    {},
    {}
  >({ url: "/deck-gl-layers", method: "post", ...variables, signal });

export const usePostDeckGlLayers = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.DeckGlLayerResponse,
      PostDeckGlLayersError,
      PostDeckGlLayersVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useScaffoldContext();
  return reactQuery.useMutation<
    Schemas.DeckGlLayerResponse,
    PostDeckGlLayersError,
    PostDeckGlLayersVariables
  >(
    (variables: PostDeckGlLayersVariables) =>
      fetchPostDeckGlLayers({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetDeckGlLayersIdPathParams = {
  id: number;
};

export type GetDeckGlLayersIdError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.Error;
    }
  | {
      status: 401;
      payload: Schemas.Error;
    }
  | {
      status: 403;
      payload: Schemas.Error;
    }
  | {
      status: 404;
      payload: Schemas.Error;
    }
  | {
      status: 500;
      payload: Schemas.Error;
    }
>;

export type GetDeckGlLayersIdVariables = {
  pathParams: GetDeckGlLayersIdPathParams;
} & ScaffoldContext["fetcherOptions"];

export const fetchGetDeckGlLayersId = (
  variables: GetDeckGlLayersIdVariables,
  signal?: AbortSignal
) =>
  scaffoldFetch<
    Schemas.DeckGlLayerResponse,
    GetDeckGlLayersIdError,
    undefined,
    {},
    {},
    GetDeckGlLayersIdPathParams
  >({ url: "/deck-gl-layers/{id}", method: "get", ...variables, signal });

export const useGetDeckGlLayersId = <TData = Schemas.DeckGlLayerResponse>(
  variables: GetDeckGlLayersIdVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.DeckGlLayerResponse,
      GetDeckGlLayersIdError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useScaffoldContext(options);
  return reactQuery.useQuery<
    Schemas.DeckGlLayerResponse,
    GetDeckGlLayersIdError,
    TData
  >(
    queryKeyFn({
      path: "/deck-gl-layers/{id}",
      operationId: "getDeckGlLayersId",
      variables,
    }),
    ({ signal }) =>
      fetchGetDeckGlLayersId({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PutDeckGlLayersIdPathParams = {
  id: number;
};

export type PutDeckGlLayersIdError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.Error;
    }
  | {
      status: 401;
      payload: Schemas.Error;
    }
  | {
      status: 403;
      payload: Schemas.Error;
    }
  | {
      status: 404;
      payload: Schemas.Error;
    }
  | {
      status: 500;
      payload: Schemas.Error;
    }
>;

export type PutDeckGlLayersIdVariables = {
  body: Schemas.DeckGlLayerRequest;
  pathParams: PutDeckGlLayersIdPathParams;
} & ScaffoldContext["fetcherOptions"];

export const fetchPutDeckGlLayersId = (
  variables: PutDeckGlLayersIdVariables,
  signal?: AbortSignal
) =>
  scaffoldFetch<
    Schemas.DeckGlLayerResponse,
    PutDeckGlLayersIdError,
    Schemas.DeckGlLayerRequest,
    {},
    {},
    PutDeckGlLayersIdPathParams
  >({ url: "/deck-gl-layers/{id}", method: "put", ...variables, signal });

export const usePutDeckGlLayersId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.DeckGlLayerResponse,
      PutDeckGlLayersIdError,
      PutDeckGlLayersIdVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useScaffoldContext();
  return reactQuery.useMutation<
    Schemas.DeckGlLayerResponse,
    PutDeckGlLayersIdError,
    PutDeckGlLayersIdVariables
  >(
    (variables: PutDeckGlLayersIdVariables) =>
      fetchPutDeckGlLayersId({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteDeckGlLayersIdPathParams = {
  id: number;
};

export type DeleteDeckGlLayersIdError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.Error;
    }
  | {
      status: 401;
      payload: Schemas.Error;
    }
  | {
      status: 403;
      payload: Schemas.Error;
    }
  | {
      status: 404;
      payload: Schemas.Error;
    }
  | {
      status: 500;
      payload: Schemas.Error;
    }
>;

export type DeleteDeckGlLayersIdVariables = {
  pathParams: DeleteDeckGlLayersIdPathParams;
} & ScaffoldContext["fetcherOptions"];

export const fetchDeleteDeckGlLayersId = (
  variables: DeleteDeckGlLayersIdVariables,
  signal?: AbortSignal
) =>
  scaffoldFetch<
    number,
    DeleteDeckGlLayersIdError,
    undefined,
    {},
    {},
    DeleteDeckGlLayersIdPathParams
  >({ url: "/deck-gl-layers/{id}", method: "delete", ...variables, signal });

export const useDeleteDeckGlLayersId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      number,
      DeleteDeckGlLayersIdError,
      DeleteDeckGlLayersIdVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useScaffoldContext();
  return reactQuery.useMutation<
    number,
    DeleteDeckGlLayersIdError,
    DeleteDeckGlLayersIdVariables
  >(
    (variables: DeleteDeckGlLayersIdVariables) =>
      fetchDeleteDeckGlLayersId({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetMapboxLayersQueryParams = {
  /**
   * Sort by attributes ascending (asc) or descending (desc)
   */
  sort?: string;
  /**
   * Return page/pageSize (default: true)
   */
  ["pagination[withCount]"]?: boolean;
  /**
   * Page number (default: 0)
   */
  ["pagination[page]"]?: number;
  /**
   * Page size (default: 25)
   */
  ["pagination[pageSize]"]?: number;
  /**
   * Offset value (default: 0)
   */
  ["pagination[start]"]?: number;
  /**
   * Number of entities to return (default: 25)
   */
  ["pagination[limit]"]?: number;
  /**
   * Fields to return (ex: title,author)
   */
  fields?: string;
  /**
   * Relations to return
   */
  populate?: string;
  /**
   * Filters to apply
   */
  filters?: Record<string, any>;
  /**
   * Locale to apply
   */
  locale?: string;
};

export type GetMapboxLayersError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.Error;
    }
  | {
      status: 401;
      payload: Schemas.Error;
    }
  | {
      status: 403;
      payload: Schemas.Error;
    }
  | {
      status: 404;
      payload: Schemas.Error;
    }
  | {
      status: 500;
      payload: Schemas.Error;
    }
>;

export type GetMapboxLayersVariables = {
  queryParams?: GetMapboxLayersQueryParams;
} & ScaffoldContext["fetcherOptions"];

export const fetchGetMapboxLayers = (
  variables: GetMapboxLayersVariables,
  signal?: AbortSignal
) =>
  scaffoldFetch<
    Schemas.MapboxLayerListResponse,
    GetMapboxLayersError,
    undefined,
    {},
    GetMapboxLayersQueryParams,
    {}
  >({ url: "/mapbox-layers", method: "get", ...variables, signal });

export const useGetMapboxLayers = <TData = Schemas.MapboxLayerListResponse>(
  variables: GetMapboxLayersVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.MapboxLayerListResponse,
      GetMapboxLayersError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useScaffoldContext(options);
  return reactQuery.useQuery<
    Schemas.MapboxLayerListResponse,
    GetMapboxLayersError,
    TData
  >(
    queryKeyFn({
      path: "/mapbox-layers",
      operationId: "getMapboxLayers",
      variables,
    }),
    ({ signal }) =>
      fetchGetMapboxLayers({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PostMapboxLayersError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.Error;
    }
  | {
      status: 401;
      payload: Schemas.Error;
    }
  | {
      status: 403;
      payload: Schemas.Error;
    }
  | {
      status: 404;
      payload: Schemas.Error;
    }
  | {
      status: 500;
      payload: Schemas.Error;
    }
>;

export type PostMapboxLayersVariables = {
  body: Schemas.MapboxLayerRequest;
} & ScaffoldContext["fetcherOptions"];

export const fetchPostMapboxLayers = (
  variables: PostMapboxLayersVariables,
  signal?: AbortSignal
) =>
  scaffoldFetch<
    Schemas.MapboxLayerResponse,
    PostMapboxLayersError,
    Schemas.MapboxLayerRequest,
    {},
    {},
    {}
  >({ url: "/mapbox-layers", method: "post", ...variables, signal });

export const usePostMapboxLayers = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.MapboxLayerResponse,
      PostMapboxLayersError,
      PostMapboxLayersVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useScaffoldContext();
  return reactQuery.useMutation<
    Schemas.MapboxLayerResponse,
    PostMapboxLayersError,
    PostMapboxLayersVariables
  >(
    (variables: PostMapboxLayersVariables) =>
      fetchPostMapboxLayers({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetMapboxLayersIdPathParams = {
  id: number;
};

export type GetMapboxLayersIdError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.Error;
    }
  | {
      status: 401;
      payload: Schemas.Error;
    }
  | {
      status: 403;
      payload: Schemas.Error;
    }
  | {
      status: 404;
      payload: Schemas.Error;
    }
  | {
      status: 500;
      payload: Schemas.Error;
    }
>;

export type GetMapboxLayersIdVariables = {
  pathParams: GetMapboxLayersIdPathParams;
} & ScaffoldContext["fetcherOptions"];

export const fetchGetMapboxLayersId = (
  variables: GetMapboxLayersIdVariables,
  signal?: AbortSignal
) =>
  scaffoldFetch<
    Schemas.MapboxLayerResponse,
    GetMapboxLayersIdError,
    undefined,
    {},
    {},
    GetMapboxLayersIdPathParams
  >({ url: "/mapbox-layers/{id}", method: "get", ...variables, signal });

export const useGetMapboxLayersId = <TData = Schemas.MapboxLayerResponse>(
  variables: GetMapboxLayersIdVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.MapboxLayerResponse,
      GetMapboxLayersIdError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useScaffoldContext(options);
  return reactQuery.useQuery<
    Schemas.MapboxLayerResponse,
    GetMapboxLayersIdError,
    TData
  >(
    queryKeyFn({
      path: "/mapbox-layers/{id}",
      operationId: "getMapboxLayersId",
      variables,
    }),
    ({ signal }) =>
      fetchGetMapboxLayersId({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PutMapboxLayersIdPathParams = {
  id: number;
};

export type PutMapboxLayersIdError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.Error;
    }
  | {
      status: 401;
      payload: Schemas.Error;
    }
  | {
      status: 403;
      payload: Schemas.Error;
    }
  | {
      status: 404;
      payload: Schemas.Error;
    }
  | {
      status: 500;
      payload: Schemas.Error;
    }
>;

export type PutMapboxLayersIdVariables = {
  body: Schemas.MapboxLayerRequest;
  pathParams: PutMapboxLayersIdPathParams;
} & ScaffoldContext["fetcherOptions"];

export const fetchPutMapboxLayersId = (
  variables: PutMapboxLayersIdVariables,
  signal?: AbortSignal
) =>
  scaffoldFetch<
    Schemas.MapboxLayerResponse,
    PutMapboxLayersIdError,
    Schemas.MapboxLayerRequest,
    {},
    {},
    PutMapboxLayersIdPathParams
  >({ url: "/mapbox-layers/{id}", method: "put", ...variables, signal });

export const usePutMapboxLayersId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.MapboxLayerResponse,
      PutMapboxLayersIdError,
      PutMapboxLayersIdVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useScaffoldContext();
  return reactQuery.useMutation<
    Schemas.MapboxLayerResponse,
    PutMapboxLayersIdError,
    PutMapboxLayersIdVariables
  >(
    (variables: PutMapboxLayersIdVariables) =>
      fetchPutMapboxLayersId({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteMapboxLayersIdPathParams = {
  id: number;
};

export type DeleteMapboxLayersIdError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.Error;
    }
  | {
      status: 401;
      payload: Schemas.Error;
    }
  | {
      status: 403;
      payload: Schemas.Error;
    }
  | {
      status: 404;
      payload: Schemas.Error;
    }
  | {
      status: 500;
      payload: Schemas.Error;
    }
>;

export type DeleteMapboxLayersIdVariables = {
  pathParams: DeleteMapboxLayersIdPathParams;
} & ScaffoldContext["fetcherOptions"];

export const fetchDeleteMapboxLayersId = (
  variables: DeleteMapboxLayersIdVariables,
  signal?: AbortSignal
) =>
  scaffoldFetch<
    number,
    DeleteMapboxLayersIdError,
    undefined,
    {},
    {},
    DeleteMapboxLayersIdPathParams
  >({ url: "/mapbox-layers/{id}", method: "delete", ...variables, signal });

export const useDeleteMapboxLayersId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      number,
      DeleteMapboxLayersIdError,
      DeleteMapboxLayersIdVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useScaffoldContext();
  return reactQuery.useMutation<
    number,
    DeleteMapboxLayersIdError,
    DeleteMapboxLayersIdVariables
  >(
    (variables: DeleteMapboxLayersIdVariables) =>
      fetchDeleteMapboxLayersId({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetMetadataQueryParams = {
  /**
   * Sort by attributes ascending (asc) or descending (desc)
   */
  sort?: string;
  /**
   * Return page/pageSize (default: true)
   */
  ["pagination[withCount]"]?: boolean;
  /**
   * Page number (default: 0)
   */
  ["pagination[page]"]?: number;
  /**
   * Page size (default: 25)
   */
  ["pagination[pageSize]"]?: number;
  /**
   * Offset value (default: 0)
   */
  ["pagination[start]"]?: number;
  /**
   * Number of entities to return (default: 25)
   */
  ["pagination[limit]"]?: number;
  /**
   * Fields to return (ex: title,author)
   */
  fields?: string;
  /**
   * Relations to return
   */
  populate?: string;
  /**
   * Filters to apply
   */
  filters?: Record<string, any>;
  /**
   * Locale to apply
   */
  locale?: string;
};

export type GetMetadataError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.Error;
    }
  | {
      status: 401;
      payload: Schemas.Error;
    }
  | {
      status: 403;
      payload: Schemas.Error;
    }
  | {
      status: 404;
      payload: Schemas.Error;
    }
  | {
      status: 500;
      payload: Schemas.Error;
    }
>;

export type GetMetadataVariables = {
  queryParams?: GetMetadataQueryParams;
} & ScaffoldContext["fetcherOptions"];

export const fetchGetMetadata = (
  variables: GetMetadataVariables,
  signal?: AbortSignal
) =>
  scaffoldFetch<
    Schemas.MetadatumListResponse,
    GetMetadataError,
    undefined,
    {},
    GetMetadataQueryParams,
    {}
  >({ url: "/metadata", method: "get", ...variables, signal });

export const useGetMetadata = <TData = Schemas.MetadatumListResponse>(
  variables: GetMetadataVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.MetadatumListResponse,
      GetMetadataError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useScaffoldContext(options);
  return reactQuery.useQuery<
    Schemas.MetadatumListResponse,
    GetMetadataError,
    TData
  >(
    queryKeyFn({ path: "/metadata", operationId: "getMetadata", variables }),
    ({ signal }) =>
      fetchGetMetadata({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PostMetadataError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.Error;
    }
  | {
      status: 401;
      payload: Schemas.Error;
    }
  | {
      status: 403;
      payload: Schemas.Error;
    }
  | {
      status: 404;
      payload: Schemas.Error;
    }
  | {
      status: 500;
      payload: Schemas.Error;
    }
>;

export type PostMetadataVariables = {
  body: Schemas.MetadatumRequest;
} & ScaffoldContext["fetcherOptions"];

export const fetchPostMetadata = (
  variables: PostMetadataVariables,
  signal?: AbortSignal
) =>
  scaffoldFetch<
    Schemas.MetadatumResponse,
    PostMetadataError,
    Schemas.MetadatumRequest,
    {},
    {},
    {}
  >({ url: "/metadata", method: "post", ...variables, signal });

export const usePostMetadata = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.MetadatumResponse,
      PostMetadataError,
      PostMetadataVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useScaffoldContext();
  return reactQuery.useMutation<
    Schemas.MetadatumResponse,
    PostMetadataError,
    PostMetadataVariables
  >(
    (variables: PostMetadataVariables) =>
      fetchPostMetadata({ ...fetcherOptions, ...variables }),
    options
  );
};

export type GetMetadataIdPathParams = {
  id: number;
};

export type GetMetadataIdError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.Error;
    }
  | {
      status: 401;
      payload: Schemas.Error;
    }
  | {
      status: 403;
      payload: Schemas.Error;
    }
  | {
      status: 404;
      payload: Schemas.Error;
    }
  | {
      status: 500;
      payload: Schemas.Error;
    }
>;

export type GetMetadataIdVariables = {
  pathParams: GetMetadataIdPathParams;
} & ScaffoldContext["fetcherOptions"];

export const fetchGetMetadataId = (
  variables: GetMetadataIdVariables,
  signal?: AbortSignal
) =>
  scaffoldFetch<
    Schemas.MetadatumResponse,
    GetMetadataIdError,
    undefined,
    {},
    {},
    GetMetadataIdPathParams
  >({ url: "/metadata/{id}", method: "get", ...variables, signal });

export const useGetMetadataId = <TData = Schemas.MetadatumResponse>(
  variables: GetMetadataIdVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      Schemas.MetadatumResponse,
      GetMetadataIdError,
      TData
    >,
    "queryKey" | "queryFn"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } =
    useScaffoldContext(options);
  return reactQuery.useQuery<
    Schemas.MetadatumResponse,
    GetMetadataIdError,
    TData
  >(
    queryKeyFn({
      path: "/metadata/{id}",
      operationId: "getMetadataId",
      variables,
    }),
    ({ signal }) =>
      fetchGetMetadataId({ ...fetcherOptions, ...variables }, signal),
    {
      ...options,
      ...queryOptions,
    }
  );
};

export type PutMetadataIdPathParams = {
  id: number;
};

export type PutMetadataIdError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.Error;
    }
  | {
      status: 401;
      payload: Schemas.Error;
    }
  | {
      status: 403;
      payload: Schemas.Error;
    }
  | {
      status: 404;
      payload: Schemas.Error;
    }
  | {
      status: 500;
      payload: Schemas.Error;
    }
>;

export type PutMetadataIdVariables = {
  body: Schemas.MetadatumRequest;
  pathParams: PutMetadataIdPathParams;
} & ScaffoldContext["fetcherOptions"];

export const fetchPutMetadataId = (
  variables: PutMetadataIdVariables,
  signal?: AbortSignal
) =>
  scaffoldFetch<
    Schemas.MetadatumResponse,
    PutMetadataIdError,
    Schemas.MetadatumRequest,
    {},
    {},
    PutMetadataIdPathParams
  >({ url: "/metadata/{id}", method: "put", ...variables, signal });

export const usePutMetadataId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.MetadatumResponse,
      PutMetadataIdError,
      PutMetadataIdVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useScaffoldContext();
  return reactQuery.useMutation<
    Schemas.MetadatumResponse,
    PutMetadataIdError,
    PutMetadataIdVariables
  >(
    (variables: PutMetadataIdVariables) =>
      fetchPutMetadataId({ ...fetcherOptions, ...variables }),
    options
  );
};

export type DeleteMetadataIdPathParams = {
  id: number;
};

export type DeleteMetadataIdError = Fetcher.ErrorWrapper<
  | {
      status: 400;
      payload: Schemas.Error;
    }
  | {
      status: 401;
      payload: Schemas.Error;
    }
  | {
      status: 403;
      payload: Schemas.Error;
    }
  | {
      status: 404;
      payload: Schemas.Error;
    }
  | {
      status: 500;
      payload: Schemas.Error;
    }
>;

export type DeleteMetadataIdVariables = {
  pathParams: DeleteMetadataIdPathParams;
} & ScaffoldContext["fetcherOptions"];

export const fetchDeleteMetadataId = (
  variables: DeleteMetadataIdVariables,
  signal?: AbortSignal
) =>
  scaffoldFetch<
    number,
    DeleteMetadataIdError,
    undefined,
    {},
    {},
    DeleteMetadataIdPathParams
  >({ url: "/metadata/{id}", method: "delete", ...variables, signal });

export const useDeleteMetadataId = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      number,
      DeleteMetadataIdError,
      DeleteMetadataIdVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useScaffoldContext();
  return reactQuery.useMutation<
    number,
    DeleteMetadataIdError,
    DeleteMetadataIdVariables
  >(
    (variables: DeleteMetadataIdVariables) =>
      fetchDeleteMetadataId({ ...fetcherOptions, ...variables }),
    options
  );
};

export type QueryOperation =
  | {
      path: "/datasets";
      operationId: "getDatasets";
      variables: GetDatasetsVariables;
    }
  | {
      path: "/datasets/{id}";
      operationId: "getDatasetsId";
      variables: GetDatasetsIdVariables;
    }
  | {
      path: "/dataset-groups";
      operationId: "getDatasetGroups";
      variables: GetDatasetGroupsVariables;
    }
  | {
      path: "/dataset-groups/{id}";
      operationId: "getDatasetGroupsId";
      variables: GetDatasetGroupsIdVariables;
    }
  | {
      path: "/deck-gl-layers";
      operationId: "getDeckGlLayers";
      variables: GetDeckGlLayersVariables;
    }
  | {
      path: "/deck-gl-layers/{id}";
      operationId: "getDeckGlLayersId";
      variables: GetDeckGlLayersIdVariables;
    }
  | {
      path: "/mapbox-layers";
      operationId: "getMapboxLayers";
      variables: GetMapboxLayersVariables;
    }
  | {
      path: "/mapbox-layers/{id}";
      operationId: "getMapboxLayersId";
      variables: GetMapboxLayersIdVariables;
    }
  | {
      path: "/metadata";
      operationId: "getMetadata";
      variables: GetMetadataVariables;
    }
  | {
      path: "/metadata/{id}";
      operationId: "getMetadataId";
      variables: GetMetadataIdVariables;
    };
