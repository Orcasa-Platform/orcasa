/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  CountryListResponse,
  Error,
  GetCountriesParams,
  CountryResponse,
  CountryRequest,
  GetCountriesIdParams,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType } from '../../services/api/index';

export const getCountries = (params?: GetCountriesParams, signal?: AbortSignal) => {
  return API<CountryListResponse>({ url: `/countries`, method: 'get', params, signal });
};

export const getGetCountriesQueryKey = (params?: GetCountriesParams) =>
  [`/countries`, ...(params ? [params] : [])] as const;

export const getGetCountriesQueryOptions = <
  TData = Awaited<ReturnType<typeof getCountries>>,
  TError = ErrorType<Error>,
>(
  params?: GetCountriesParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getCountries>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<typeof getCountries>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCountriesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCountries>>> = ({ signal }) =>
    getCountries(params, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetCountriesQueryResult = NonNullable<Awaited<ReturnType<typeof getCountries>>>;
export type GetCountriesQueryError = ErrorType<Error>;

export const useGetCountries = <
  TData = Awaited<ReturnType<typeof getCountries>>,
  TError = ErrorType<Error>,
>(
  params?: GetCountriesParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getCountries>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCountriesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postCountries = (countryRequest: CountryRequest) => {
  return API<CountryResponse>({
    url: `/countries`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: countryRequest,
  });
};

export const getPostCountriesMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCountries>>,
    TError,
    { data: CountryRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postCountries>>,
  TError,
  { data: CountryRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postCountries>>,
    { data: CountryRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postCountries(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostCountriesMutationResult = NonNullable<Awaited<ReturnType<typeof postCountries>>>;
export type PostCountriesMutationBody = CountryRequest;
export type PostCountriesMutationError = ErrorType<Error>;

export const usePostCountries = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postCountries>>,
    TError,
    { data: CountryRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPostCountriesMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getCountriesId = (id: number, params?: GetCountriesIdParams, signal?: AbortSignal) => {
  return API<CountryResponse>({ url: `/countries/${id}`, method: 'get', params, signal });
};

export const getGetCountriesIdQueryKey = (id: number, params?: GetCountriesIdParams) =>
  [`/countries/${id}`, ...(params ? [params] : [])] as const;

export const getGetCountriesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getCountriesId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetCountriesIdParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getCountriesId>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<typeof getCountriesId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCountriesIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCountriesId>>> = ({ signal }) =>
    getCountriesId(id, params, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions };
};

export type GetCountriesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getCountriesId>>>;
export type GetCountriesIdQueryError = ErrorType<Error>;

export const useGetCountriesId = <
  TData = Awaited<ReturnType<typeof getCountriesId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetCountriesIdParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getCountriesId>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCountriesIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putCountriesId = (id: number, countryRequest: CountryRequest) => {
  return API<CountryResponse>({
    url: `/countries/${id}`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: countryRequest,
  });
};

export const getPutCountriesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putCountriesId>>,
    TError,
    { id: number; data: CountryRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putCountriesId>>,
  TError,
  { id: number; data: CountryRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putCountriesId>>,
    { id: number; data: CountryRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putCountriesId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutCountriesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putCountriesId>>>;
export type PutCountriesIdMutationBody = CountryRequest;
export type PutCountriesIdMutationError = ErrorType<Error>;

export const usePutCountriesId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putCountriesId>>,
    TError,
    { id: number; data: CountryRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPutCountriesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteCountriesId = (id: number) => {
  return API<number>({ url: `/countries/${id}`, method: 'delete' });
};

export const getDeleteCountriesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCountriesId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCountriesId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCountriesId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteCountriesId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCountriesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCountriesId>>
>;

export type DeleteCountriesIdMutationError = ErrorType<Error>;

export const useDeleteCountriesId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCountriesId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const mutationOptions = getDeleteCountriesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
