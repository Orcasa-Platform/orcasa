/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  HomeStatListResponse,
  Error,
  GetHomeStatsParams,
  HomeStatResponse,
  HomeStatRequest,
  GetHomeStatsIdParams,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType } from '../../services/api/index';

export const getHomeStats = (params?: GetHomeStatsParams, signal?: AbortSignal) => {
  return API<HomeStatListResponse>({ url: `/home-stats`, method: 'get', params, signal });
};

export const getGetHomeStatsQueryKey = (params?: GetHomeStatsParams) =>
  [`/home-stats`, ...(params ? [params] : [])] as const;

export const getGetHomeStatsQueryOptions = <
  TData = Awaited<ReturnType<typeof getHomeStats>>,
  TError = ErrorType<Error>,
>(
  params?: GetHomeStatsParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getHomeStats>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<typeof getHomeStats>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetHomeStatsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getHomeStats>>> = ({ signal }) =>
    getHomeStats(params, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetHomeStatsQueryResult = NonNullable<Awaited<ReturnType<typeof getHomeStats>>>;
export type GetHomeStatsQueryError = ErrorType<Error>;

export const useGetHomeStats = <
  TData = Awaited<ReturnType<typeof getHomeStats>>,
  TError = ErrorType<Error>,
>(
  params?: GetHomeStatsParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getHomeStats>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetHomeStatsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postHomeStats = (homeStatRequest: HomeStatRequest) => {
  return API<HomeStatResponse>({
    url: `/home-stats`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: homeStatRequest,
  });
};

export const getPostHomeStatsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postHomeStats>>,
    TError,
    { data: HomeStatRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postHomeStats>>,
  TError,
  { data: HomeStatRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postHomeStats>>,
    { data: HomeStatRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postHomeStats(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostHomeStatsMutationResult = NonNullable<Awaited<ReturnType<typeof postHomeStats>>>;
export type PostHomeStatsMutationBody = HomeStatRequest;
export type PostHomeStatsMutationError = ErrorType<Error>;

export const usePostHomeStats = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postHomeStats>>,
    TError,
    { data: HomeStatRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPostHomeStatsMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getHomeStatsId = (id: number, params?: GetHomeStatsIdParams, signal?: AbortSignal) => {
  return API<HomeStatResponse>({ url: `/home-stats/${id}`, method: 'get', params, signal });
};

export const getGetHomeStatsIdQueryKey = (id: number, params?: GetHomeStatsIdParams) =>
  [`/home-stats/${id}`, ...(params ? [params] : [])] as const;

export const getGetHomeStatsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getHomeStatsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetHomeStatsIdParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getHomeStatsId>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<typeof getHomeStatsId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetHomeStatsIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getHomeStatsId>>> = ({ signal }) =>
    getHomeStatsId(id, params, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions };
};

export type GetHomeStatsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getHomeStatsId>>>;
export type GetHomeStatsIdQueryError = ErrorType<Error>;

export const useGetHomeStatsId = <
  TData = Awaited<ReturnType<typeof getHomeStatsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetHomeStatsIdParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getHomeStatsId>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetHomeStatsIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putHomeStatsId = (id: number, homeStatRequest: HomeStatRequest) => {
  return API<HomeStatResponse>({
    url: `/home-stats/${id}`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: homeStatRequest,
  });
};

export const getPutHomeStatsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putHomeStatsId>>,
    TError,
    { id: number; data: HomeStatRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putHomeStatsId>>,
  TError,
  { id: number; data: HomeStatRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putHomeStatsId>>,
    { id: number; data: HomeStatRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putHomeStatsId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutHomeStatsIdMutationResult = NonNullable<Awaited<ReturnType<typeof putHomeStatsId>>>;
export type PutHomeStatsIdMutationBody = HomeStatRequest;
export type PutHomeStatsIdMutationError = ErrorType<Error>;

export const usePutHomeStatsId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putHomeStatsId>>,
    TError,
    { id: number; data: HomeStatRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPutHomeStatsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteHomeStatsId = (id: number) => {
  return API<number>({ url: `/home-stats/${id}`, method: 'delete' });
};

export const getDeleteHomeStatsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteHomeStatsId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteHomeStatsId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteHomeStatsId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteHomeStatsId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteHomeStatsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteHomeStatsId>>
>;

export type DeleteHomeStatsIdMutationError = ErrorType<Error>;

export const useDeleteHomeStatsId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteHomeStatsId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const mutationOptions = getDeleteHomeStatsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
