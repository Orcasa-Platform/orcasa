/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  SubinterventionListResponse,
  Error,
  GetSubinterventionsParams,
  SubinterventionResponse,
  SubinterventionRequest,
  GetSubinterventionsIdParams,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType } from '../../services/api/index';

export const getSubinterventions = (params?: GetSubinterventionsParams, signal?: AbortSignal) => {
  return API<SubinterventionListResponse>({
    url: `/subinterventions`,
    method: 'get',
    params,
    signal,
  });
};

export const getGetSubinterventionsQueryKey = (params?: GetSubinterventionsParams) =>
  [`/subinterventions`, ...(params ? [params] : [])] as const;

export const getGetSubinterventionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getSubinterventions>>,
  TError = ErrorType<Error>,
>(
  params?: GetSubinterventionsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getSubinterventions>>, TError, TData>;
  },
): UseQueryOptions<Awaited<ReturnType<typeof getSubinterventions>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSubinterventionsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSubinterventions>>> = ({ signal }) =>
    getSubinterventions(params, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetSubinterventionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSubinterventions>>
>;
export type GetSubinterventionsQueryError = ErrorType<Error>;

export const useGetSubinterventions = <
  TData = Awaited<ReturnType<typeof getSubinterventions>>,
  TError = ErrorType<Error>,
>(
  params?: GetSubinterventionsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getSubinterventions>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetSubinterventionsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postSubinterventions = (subinterventionRequest: SubinterventionRequest) => {
  return API<SubinterventionResponse>({
    url: `/subinterventions`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: subinterventionRequest,
  });
};

export const getPostSubinterventionsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postSubinterventions>>,
    TError,
    { data: SubinterventionRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postSubinterventions>>,
  TError,
  { data: SubinterventionRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postSubinterventions>>,
    { data: SubinterventionRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postSubinterventions(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostSubinterventionsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postSubinterventions>>
>;
export type PostSubinterventionsMutationBody = SubinterventionRequest;
export type PostSubinterventionsMutationError = ErrorType<Error>;

export const usePostSubinterventions = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postSubinterventions>>,
    TError,
    { data: SubinterventionRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPostSubinterventionsMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getSubinterventionsId = (
  id: number,
  params?: GetSubinterventionsIdParams,
  signal?: AbortSignal,
) => {
  return API<SubinterventionResponse>({
    url: `/subinterventions/${id}`,
    method: 'get',
    params,
    signal,
  });
};

export const getGetSubinterventionsIdQueryKey = (
  id: number,
  params?: GetSubinterventionsIdParams,
) => [`/subinterventions/${id}`, ...(params ? [params] : [])] as const;

export const getGetSubinterventionsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getSubinterventionsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetSubinterventionsIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getSubinterventionsId>>, TError, TData>;
  },
): UseQueryOptions<Awaited<ReturnType<typeof getSubinterventionsId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSubinterventionsIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSubinterventionsId>>> = ({ signal }) =>
    getSubinterventionsId(id, params, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions };
};

export type GetSubinterventionsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSubinterventionsId>>
>;
export type GetSubinterventionsIdQueryError = ErrorType<Error>;

export const useGetSubinterventionsId = <
  TData = Awaited<ReturnType<typeof getSubinterventionsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetSubinterventionsIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getSubinterventionsId>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetSubinterventionsIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putSubinterventionsId = (
  id: number,
  subinterventionRequest: SubinterventionRequest,
) => {
  return API<SubinterventionResponse>({
    url: `/subinterventions/${id}`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: subinterventionRequest,
  });
};

export const getPutSubinterventionsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putSubinterventionsId>>,
    TError,
    { id: number; data: SubinterventionRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putSubinterventionsId>>,
  TError,
  { id: number; data: SubinterventionRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putSubinterventionsId>>,
    { id: number; data: SubinterventionRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putSubinterventionsId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutSubinterventionsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putSubinterventionsId>>
>;
export type PutSubinterventionsIdMutationBody = SubinterventionRequest;
export type PutSubinterventionsIdMutationError = ErrorType<Error>;

export const usePutSubinterventionsId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putSubinterventionsId>>,
    TError,
    { id: number; data: SubinterventionRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPutSubinterventionsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteSubinterventionsId = (id: number) => {
  return API<number>({ url: `/subinterventions/${id}`, method: 'delete' });
};

export const getDeleteSubinterventionsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteSubinterventionsId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteSubinterventionsId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteSubinterventionsId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteSubinterventionsId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteSubinterventionsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteSubinterventionsId>>
>;

export type DeleteSubinterventionsIdMutationError = ErrorType<Error>;

export const useDeleteSubinterventionsId = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteSubinterventionsId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const mutationOptions = getDeleteSubinterventionsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
