/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  SustainableDevGoalListResponse,
  Error,
  GetSustainableDevGoalsParams,
  SustainableDevGoalResponse,
  SustainableDevGoalRequest,
  GetSustainableDevGoalsIdParams,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType } from '../../services/api/index';

export const getSustainableDevGoals = (
  params?: GetSustainableDevGoalsParams,
  signal?: AbortSignal,
) => {
  return API<SustainableDevGoalListResponse>({
    url: `/sustainable-dev-goals`,
    method: 'get',
    params,
    signal,
  });
};

export const getGetSustainableDevGoalsQueryKey = (params?: GetSustainableDevGoalsParams) =>
  [`/sustainable-dev-goals`, ...(params ? [params] : [])] as const;

export const getGetSustainableDevGoalsQueryOptions = <
  TData = Awaited<ReturnType<typeof getSustainableDevGoals>>,
  TError = ErrorType<Error>,
>(
  params?: GetSustainableDevGoalsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getSustainableDevGoals>>, TError, TData>;
  },
): UseQueryOptions<Awaited<ReturnType<typeof getSustainableDevGoals>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSustainableDevGoalsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSustainableDevGoals>>> = ({ signal }) =>
    getSustainableDevGoals(params, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetSustainableDevGoalsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSustainableDevGoals>>
>;
export type GetSustainableDevGoalsQueryError = ErrorType<Error>;

export const useGetSustainableDevGoals = <
  TData = Awaited<ReturnType<typeof getSustainableDevGoals>>,
  TError = ErrorType<Error>,
>(
  params?: GetSustainableDevGoalsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getSustainableDevGoals>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetSustainableDevGoalsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postSustainableDevGoals = (sustainableDevGoalRequest: SustainableDevGoalRequest) => {
  return API<SustainableDevGoalResponse>({
    url: `/sustainable-dev-goals`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: sustainableDevGoalRequest,
  });
};

export const getPostSustainableDevGoalsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postSustainableDevGoals>>,
    TError,
    { data: SustainableDevGoalRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postSustainableDevGoals>>,
  TError,
  { data: SustainableDevGoalRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postSustainableDevGoals>>,
    { data: SustainableDevGoalRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postSustainableDevGoals(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostSustainableDevGoalsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postSustainableDevGoals>>
>;
export type PostSustainableDevGoalsMutationBody = SustainableDevGoalRequest;
export type PostSustainableDevGoalsMutationError = ErrorType<Error>;

export const usePostSustainableDevGoals = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postSustainableDevGoals>>,
    TError,
    { data: SustainableDevGoalRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPostSustainableDevGoalsMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getSustainableDevGoalsId = (
  id: number,
  params?: GetSustainableDevGoalsIdParams,
  signal?: AbortSignal,
) => {
  return API<SustainableDevGoalResponse>({
    url: `/sustainable-dev-goals/${id}`,
    method: 'get',
    params,
    signal,
  });
};

export const getGetSustainableDevGoalsIdQueryKey = (
  id: number,
  params?: GetSustainableDevGoalsIdParams,
) => [`/sustainable-dev-goals/${id}`, ...(params ? [params] : [])] as const;

export const getGetSustainableDevGoalsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getSustainableDevGoalsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetSustainableDevGoalsIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getSustainableDevGoalsId>>, TError, TData>;
  },
): UseQueryOptions<Awaited<ReturnType<typeof getSustainableDevGoalsId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSustainableDevGoalsIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSustainableDevGoalsId>>> = ({
    signal,
  }) => getSustainableDevGoalsId(id, params, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions };
};

export type GetSustainableDevGoalsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSustainableDevGoalsId>>
>;
export type GetSustainableDevGoalsIdQueryError = ErrorType<Error>;

export const useGetSustainableDevGoalsId = <
  TData = Awaited<ReturnType<typeof getSustainableDevGoalsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetSustainableDevGoalsIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getSustainableDevGoalsId>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetSustainableDevGoalsIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putSustainableDevGoalsId = (
  id: number,
  sustainableDevGoalRequest: SustainableDevGoalRequest,
) => {
  return API<SustainableDevGoalResponse>({
    url: `/sustainable-dev-goals/${id}`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: sustainableDevGoalRequest,
  });
};

export const getPutSustainableDevGoalsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putSustainableDevGoalsId>>,
    TError,
    { id: number; data: SustainableDevGoalRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putSustainableDevGoalsId>>,
  TError,
  { id: number; data: SustainableDevGoalRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putSustainableDevGoalsId>>,
    { id: number; data: SustainableDevGoalRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putSustainableDevGoalsId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutSustainableDevGoalsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putSustainableDevGoalsId>>
>;
export type PutSustainableDevGoalsIdMutationBody = SustainableDevGoalRequest;
export type PutSustainableDevGoalsIdMutationError = ErrorType<Error>;

export const usePutSustainableDevGoalsId = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putSustainableDevGoalsId>>,
    TError,
    { id: number; data: SustainableDevGoalRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPutSustainableDevGoalsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteSustainableDevGoalsId = (id: number) => {
  return API<number>({ url: `/sustainable-dev-goals/${id}`, method: 'delete' });
};

export const getDeleteSustainableDevGoalsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteSustainableDevGoalsId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteSustainableDevGoalsId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteSustainableDevGoalsId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteSustainableDevGoalsId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteSustainableDevGoalsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteSustainableDevGoalsId>>
>;

export type DeleteSustainableDevGoalsIdMutationError = ErrorType<Error>;

export const useDeleteSustainableDevGoalsId = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteSustainableDevGoalsId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const mutationOptions = getDeleteSustainableDevGoalsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
