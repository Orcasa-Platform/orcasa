/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  LandUseTypeListResponse,
  Error,
  GetLandUseTypesParams,
  LandUseTypeResponse,
  LandUseTypeRequest,
  GetLandUseTypesIdParams,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType } from '../../services/api/index';

export const getLandUseTypes = (params?: GetLandUseTypesParams, signal?: AbortSignal) => {
  return API<LandUseTypeListResponse>({ url: `/land-use-types`, method: 'get', params, signal });
};

export const getGetLandUseTypesQueryKey = (params?: GetLandUseTypesParams) =>
  [`/land-use-types`, ...(params ? [params] : [])] as const;

export const getGetLandUseTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof getLandUseTypes>>,
  TError = ErrorType<Error>,
>(
  params?: GetLandUseTypesParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getLandUseTypes>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<typeof getLandUseTypes>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetLandUseTypesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLandUseTypes>>> = ({ signal }) =>
    getLandUseTypes(params, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetLandUseTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getLandUseTypes>>>;
export type GetLandUseTypesQueryError = ErrorType<Error>;

export const useGetLandUseTypes = <
  TData = Awaited<ReturnType<typeof getLandUseTypes>>,
  TError = ErrorType<Error>,
>(
  params?: GetLandUseTypesParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getLandUseTypes>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLandUseTypesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postLandUseTypes = (landUseTypeRequest: LandUseTypeRequest) => {
  return API<LandUseTypeResponse>({
    url: `/land-use-types`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: landUseTypeRequest,
  });
};

export const getPostLandUseTypesMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLandUseTypes>>,
    TError,
    { data: LandUseTypeRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postLandUseTypes>>,
  TError,
  { data: LandUseTypeRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postLandUseTypes>>,
    { data: LandUseTypeRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postLandUseTypes(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostLandUseTypesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postLandUseTypes>>
>;
export type PostLandUseTypesMutationBody = LandUseTypeRequest;
export type PostLandUseTypesMutationError = ErrorType<Error>;

export const usePostLandUseTypes = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLandUseTypes>>,
    TError,
    { data: LandUseTypeRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPostLandUseTypesMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getLandUseTypesId = (
  id: number,
  params?: GetLandUseTypesIdParams,
  signal?: AbortSignal,
) => {
  return API<LandUseTypeResponse>({ url: `/land-use-types/${id}`, method: 'get', params, signal });
};

export const getGetLandUseTypesIdQueryKey = (id: number, params?: GetLandUseTypesIdParams) =>
  [`/land-use-types/${id}`, ...(params ? [params] : [])] as const;

export const getGetLandUseTypesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getLandUseTypesId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetLandUseTypesIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getLandUseTypesId>>, TError, TData>;
  },
): UseQueryOptions<Awaited<ReturnType<typeof getLandUseTypesId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetLandUseTypesIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLandUseTypesId>>> = ({ signal }) =>
    getLandUseTypesId(id, params, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions };
};

export type GetLandUseTypesIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLandUseTypesId>>
>;
export type GetLandUseTypesIdQueryError = ErrorType<Error>;

export const useGetLandUseTypesId = <
  TData = Awaited<ReturnType<typeof getLandUseTypesId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetLandUseTypesIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getLandUseTypesId>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLandUseTypesIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putLandUseTypesId = (id: number, landUseTypeRequest: LandUseTypeRequest) => {
  return API<LandUseTypeResponse>({
    url: `/land-use-types/${id}`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: landUseTypeRequest,
  });
};

export const getPutLandUseTypesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putLandUseTypesId>>,
    TError,
    { id: number; data: LandUseTypeRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putLandUseTypesId>>,
  TError,
  { id: number; data: LandUseTypeRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putLandUseTypesId>>,
    { id: number; data: LandUseTypeRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putLandUseTypesId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutLandUseTypesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putLandUseTypesId>>
>;
export type PutLandUseTypesIdMutationBody = LandUseTypeRequest;
export type PutLandUseTypesIdMutationError = ErrorType<Error>;

export const usePutLandUseTypesId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putLandUseTypesId>>,
    TError,
    { id: number; data: LandUseTypeRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPutLandUseTypesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteLandUseTypesId = (id: number) => {
  return API<number>({ url: `/land-use-types/${id}`, method: 'delete' });
};

export const getDeleteLandUseTypesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteLandUseTypesId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteLandUseTypesId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteLandUseTypesId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteLandUseTypesId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteLandUseTypesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteLandUseTypesId>>
>;

export type DeleteLandUseTypesIdMutationError = ErrorType<Error>;

export const useDeleteLandUseTypesId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteLandUseTypesId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const mutationOptions = getDeleteLandUseTypesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
