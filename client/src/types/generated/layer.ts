/**
 * Generated by orval v6.16.0 🍺
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useInfiniteQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  LayerListResponse,
  Error,
  GetLayersParams,
  LayerResponse,
  LayerRequest,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType } from '../../services/api/index';

export const getLayers = (params?: GetLayersParams, signal?: AbortSignal) => {
  return API<LayerListResponse>({ url: `/layers`, method: 'get', params, signal });
};

export const getGetLayersQueryKey = (params?: GetLayersParams) =>
  [`/layers`, ...(params ? [params] : [])] as const;

export const getGetLayersInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getLayers>>,
  TError = ErrorType<Error>
>(
  params?: GetLayersParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getLayers>>, TError, TData>;
  }
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getLayers>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetLayersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLayers>>> = ({ signal, pageParam }) =>
    getLayers({ 'pagination[page]': pageParam, ...params }, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions };
};

export type GetLayersInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getLayers>>>;
export type GetLayersInfiniteQueryError = ErrorType<Error>;

export const useGetLayersInfinite = <
  TData = Awaited<ReturnType<typeof getLayers>>,
  TError = ErrorType<Error>
>(
  params?: GetLayersParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getLayers>>, TError, TData>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLayersInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetLayersQueryOptions = <
  TData = Awaited<ReturnType<typeof getLayers>>,
  TError = ErrorType<Error>
>(
  params?: GetLayersParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getLayers>>, TError, TData> }
): UseQueryOptions<Awaited<ReturnType<typeof getLayers>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetLayersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLayers>>> = ({ signal }) =>
    getLayers(params, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions };
};

export type GetLayersQueryResult = NonNullable<Awaited<ReturnType<typeof getLayers>>>;
export type GetLayersQueryError = ErrorType<Error>;

export const useGetLayers = <
  TData = Awaited<ReturnType<typeof getLayers>>,
  TError = ErrorType<Error>
>(
  params?: GetLayersParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getLayers>>, TError, TData> }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLayersQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postLayers = (layerRequest: LayerRequest) => {
  return API<LayerResponse>({
    url: `/layers`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: layerRequest,
  });
};

export const getPostLayersMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLayers>>,
    TError,
    { data: LayerRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postLayers>>,
  TError,
  { data: LayerRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postLayers>>,
    { data: LayerRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postLayers(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostLayersMutationResult = NonNullable<Awaited<ReturnType<typeof postLayers>>>;
export type PostLayersMutationBody = LayerRequest;
export type PostLayersMutationError = ErrorType<Error>;

export const usePostLayers = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLayers>>,
    TError,
    { data: LayerRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPostLayersMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getLayersId = (id: number, signal?: AbortSignal) => {
  return API<LayerResponse>({ url: `/layers/${id}`, method: 'get', signal });
};

export const getGetLayersIdQueryKey = (id: number) => [`/layers/${id}`] as const;

export const getGetLayersIdInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getLayersId>>,
  TError = ErrorType<Error>
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getLayersId>>, TError, TData>;
  }
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getLayersId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetLayersIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLayersId>>> = ({ signal }) =>
    getLayersId(id, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions };
};

export type GetLayersIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getLayersId>>>;
export type GetLayersIdInfiniteQueryError = ErrorType<Error>;

export const useGetLayersIdInfinite = <
  TData = Awaited<ReturnType<typeof getLayersId>>,
  TError = ErrorType<Error>
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getLayersId>>, TError, TData>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLayersIdInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetLayersIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getLayersId>>,
  TError = ErrorType<Error>
>(
  id: number,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getLayersId>>, TError, TData> }
): UseQueryOptions<Awaited<ReturnType<typeof getLayersId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetLayersIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLayersId>>> = ({ signal }) =>
    getLayersId(id, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions };
};

export type GetLayersIdQueryResult = NonNullable<Awaited<ReturnType<typeof getLayersId>>>;
export type GetLayersIdQueryError = ErrorType<Error>;

export const useGetLayersId = <
  TData = Awaited<ReturnType<typeof getLayersId>>,
  TError = ErrorType<Error>
>(
  id: number,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getLayersId>>, TError, TData> }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLayersIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putLayersId = (id: number, layerRequest: LayerRequest) => {
  return API<LayerResponse>({
    url: `/layers/${id}`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: layerRequest,
  });
};

export const getPutLayersIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putLayersId>>,
    TError,
    { id: number; data: LayerRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putLayersId>>,
  TError,
  { id: number; data: LayerRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putLayersId>>,
    { id: number; data: LayerRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putLayersId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutLayersIdMutationResult = NonNullable<Awaited<ReturnType<typeof putLayersId>>>;
export type PutLayersIdMutationBody = LayerRequest;
export type PutLayersIdMutationError = ErrorType<Error>;

export const usePutLayersId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putLayersId>>,
    TError,
    { id: number; data: LayerRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPutLayersIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteLayersId = (id: number) => {
  return API<number>({ url: `/layers/${id}`, method: 'delete' });
};

export const getDeleteLayersIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteLayersId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteLayersId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteLayersId>>, { id: number }> = (
    props
  ) => {
    const { id } = props ?? {};

    return deleteLayersId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteLayersIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteLayersId>>>;

export type DeleteLayersIdMutationError = ErrorType<Error>;

export const useDeleteLayersId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteLayersId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const mutationOptions = getDeleteLayersIdMutationOptions(options);

  return useMutation(mutationOptions);
};
