/**
 * Generated by orval v6.16.0 🍺
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useInfiniteQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from '@tanstack/react-query';

import { API } from '../../services/api/index';
import type { ErrorType } from '../../services/api/index';

import type {
  MetadatumListResponse,
  Error,
  GetMetadataParams,
  MetadatumResponse,
  MetadatumRequest,
} from './strapi.schemas';

export const getMetadata = (params?: GetMetadataParams, signal?: AbortSignal) => {
  return API<MetadatumListResponse>({ url: `/metadata`, method: 'get', params, signal });
};

export const getGetMetadataQueryKey = (params?: GetMetadataParams) =>
  [`/metadata`, ...(params ? [params] : [])] as const;

export const getGetMetadataInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getMetadata>>,
  TError = ErrorType<Error>
>(
  params?: GetMetadataParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMetadata>>, TError, TData>;
  }
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMetadata>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMetadataQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMetadata>>> = ({ signal, pageParam }) =>
    getMetadata({ 'pagination[page]': pageParam, ...params }, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions };
};

export type GetMetadataInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getMetadata>>>;
export type GetMetadataInfiniteQueryError = ErrorType<Error>;

export const useGetMetadataInfinite = <
  TData = Awaited<ReturnType<typeof getMetadata>>,
  TError = ErrorType<Error>
>(
  params?: GetMetadataParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMetadata>>, TError, TData>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMetadataInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetMetadataQueryOptions = <
  TData = Awaited<ReturnType<typeof getMetadata>>,
  TError = ErrorType<Error>
>(
  params?: GetMetadataParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getMetadata>>, TError, TData> }
): UseQueryOptions<Awaited<ReturnType<typeof getMetadata>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMetadataQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMetadata>>> = ({ signal }) =>
    getMetadata(params, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions };
};

export type GetMetadataQueryResult = NonNullable<Awaited<ReturnType<typeof getMetadata>>>;
export type GetMetadataQueryError = ErrorType<Error>;

export const useGetMetadata = <
  TData = Awaited<ReturnType<typeof getMetadata>>,
  TError = ErrorType<Error>
>(
  params?: GetMetadataParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getMetadata>>, TError, TData> }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMetadataQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postMetadata = (metadatumRequest: MetadatumRequest) => {
  return API<MetadatumResponse>({
    url: `/metadata`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: metadatumRequest,
  });
};

export const getPostMetadataMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMetadata>>,
    TError,
    { data: MetadatumRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMetadata>>,
  TError,
  { data: MetadatumRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMetadata>>,
    { data: MetadatumRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postMetadata(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostMetadataMutationResult = NonNullable<Awaited<ReturnType<typeof postMetadata>>>;
export type PostMetadataMutationBody = MetadatumRequest;
export type PostMetadataMutationError = ErrorType<Error>;

export const usePostMetadata = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMetadata>>,
    TError,
    { data: MetadatumRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPostMetadataMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getMetadataId = (id: number, signal?: AbortSignal) => {
  return API<MetadatumResponse>({ url: `/metadata/${id}`, method: 'get', signal });
};

export const getGetMetadataIdQueryKey = (id: number) => [`/metadata/${id}`] as const;

export const getGetMetadataIdInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getMetadataId>>,
  TError = ErrorType<Error>
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMetadataId>>, TError, TData>;
  }
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMetadataId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMetadataIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMetadataId>>> = ({ signal }) =>
    getMetadataId(id, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions };
};

export type GetMetadataIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMetadataId>>
>;
export type GetMetadataIdInfiniteQueryError = ErrorType<Error>;

export const useGetMetadataIdInfinite = <
  TData = Awaited<ReturnType<typeof getMetadataId>>,
  TError = ErrorType<Error>
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMetadataId>>, TError, TData>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMetadataIdInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetMetadataIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getMetadataId>>,
  TError = ErrorType<Error>
>(
  id: number,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getMetadataId>>, TError, TData> }
): UseQueryOptions<Awaited<ReturnType<typeof getMetadataId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMetadataIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMetadataId>>> = ({ signal }) =>
    getMetadataId(id, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions };
};

export type GetMetadataIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMetadataId>>>;
export type GetMetadataIdQueryError = ErrorType<Error>;

export const useGetMetadataId = <
  TData = Awaited<ReturnType<typeof getMetadataId>>,
  TError = ErrorType<Error>
>(
  id: number,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getMetadataId>>, TError, TData> }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMetadataIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putMetadataId = (id: number, metadatumRequest: MetadatumRequest) => {
  return API<MetadatumResponse>({
    url: `/metadata/${id}`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: metadatumRequest,
  });
};

export const getPutMetadataIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putMetadataId>>,
    TError,
    { id: number; data: MetadatumRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putMetadataId>>,
  TError,
  { id: number; data: MetadatumRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putMetadataId>>,
    { id: number; data: MetadatumRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putMetadataId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutMetadataIdMutationResult = NonNullable<Awaited<ReturnType<typeof putMetadataId>>>;
export type PutMetadataIdMutationBody = MetadatumRequest;
export type PutMetadataIdMutationError = ErrorType<Error>;

export const usePutMetadataId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putMetadataId>>,
    TError,
    { id: number; data: MetadatumRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPutMetadataIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteMetadataId = (id: number) => {
  return API<number>({ url: `/metadata/${id}`, method: 'delete' });
};

export const getDeleteMetadataIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMetadataId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteMetadataId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteMetadataId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteMetadataId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteMetadataIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteMetadataId>>
>;

export type DeleteMetadataIdMutationError = ErrorType<Error>;

export const useDeleteMetadataId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMetadataId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const mutationOptions = getDeleteMetadataIdMutationOptions(options);

  return useMutation(mutationOptions);
};
