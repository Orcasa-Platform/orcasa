/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useInfiniteQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  PageListResponse,
  Error,
  GetPagesParams,
  PageResponse,
  PageRequest,
  GetPagesIdParams,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType } from '../../services/api/index';

export const getPages = (params?: GetPagesParams, signal?: AbortSignal) => {
  return API<PageListResponse>({ url: `/pages`, method: 'get', params, signal });
};

export const getGetPagesQueryKey = (params?: GetPagesParams) =>
  [`/pages`, ...(params ? [params] : [])] as const;

export const getGetPagesInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getPages>>,
  TError = ErrorType<Error>,
>(
  params?: GetPagesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPages>>, TError, TData>;
  },
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPages>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPagesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPages>>> = ({ signal, pageParam }) =>
    getPages({ 'pagination[page]': pageParam, ...params }, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions };
};

export type GetPagesInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getPages>>>;
export type GetPagesInfiniteQueryError = ErrorType<Error>;

export const useGetPagesInfinite = <
  TData = Awaited<ReturnType<typeof getPages>>,
  TError = ErrorType<Error>,
>(
  params?: GetPagesParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPages>>, TError, TData>;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPagesInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetPagesQueryOptions = <
  TData = Awaited<ReturnType<typeof getPages>>,
  TError = ErrorType<Error>,
>(
  params?: GetPagesParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getPages>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<typeof getPages>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPagesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPages>>> = ({ signal }) =>
    getPages(params, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions };
};

export type GetPagesQueryResult = NonNullable<Awaited<ReturnType<typeof getPages>>>;
export type GetPagesQueryError = ErrorType<Error>;

export const useGetPages = <
  TData = Awaited<ReturnType<typeof getPages>>,
  TError = ErrorType<Error>,
>(
  params?: GetPagesParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getPages>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPagesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postPages = (pageRequest: PageRequest) => {
  return API<PageResponse>({
    url: `/pages`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: pageRequest,
  });
};

export const getPostPagesMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPages>>,
    TError,
    { data: PageRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postPages>>,
  TError,
  { data: PageRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postPages>>,
    { data: PageRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postPages(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostPagesMutationResult = NonNullable<Awaited<ReturnType<typeof postPages>>>;
export type PostPagesMutationBody = PageRequest;
export type PostPagesMutationError = ErrorType<Error>;

export const usePostPages = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPages>>,
    TError,
    { data: PageRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPostPagesMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getPagesId = (id: number, params?: GetPagesIdParams, signal?: AbortSignal) => {
  return API<PageResponse>({ url: `/pages/${id}`, method: 'get', params, signal });
};

export const getGetPagesIdQueryKey = (id: number, params?: GetPagesIdParams) =>
  [`/pages/${id}`, ...(params ? [params] : [])] as const;

export const getGetPagesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getPagesId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetPagesIdParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getPagesId>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<typeof getPagesId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPagesIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPagesId>>> = ({ signal }) =>
    getPagesId(id, params, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions };
};

export type GetPagesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getPagesId>>>;
export type GetPagesIdQueryError = ErrorType<Error>;

export const useGetPagesId = <
  TData = Awaited<ReturnType<typeof getPagesId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetPagesIdParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getPagesId>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPagesIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putPagesId = (id: number, pageRequest: PageRequest) => {
  return API<PageResponse>({
    url: `/pages/${id}`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: pageRequest,
  });
};

export const getPutPagesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putPagesId>>,
    TError,
    { id: number; data: PageRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putPagesId>>,
  TError,
  { id: number; data: PageRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putPagesId>>,
    { id: number; data: PageRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putPagesId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutPagesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putPagesId>>>;
export type PutPagesIdMutationBody = PageRequest;
export type PutPagesIdMutationError = ErrorType<Error>;

export const usePutPagesId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putPagesId>>,
    TError,
    { id: number; data: PageRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPutPagesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deletePagesId = (id: number) => {
  return API<number>({ url: `/pages/${id}`, method: 'delete' });
};

export const getDeletePagesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePagesId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deletePagesId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePagesId>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {};

    return deletePagesId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeletePagesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deletePagesId>>>;

export type DeletePagesIdMutationError = ErrorType<Error>;

export const useDeletePagesId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePagesId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const mutationOptions = getDeletePagesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
