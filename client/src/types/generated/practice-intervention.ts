/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  PracticeInterventionListResponse,
  Error,
  GetPracticeInterventionsParams,
  PracticeInterventionResponse,
  PracticeInterventionRequest,
  GetPracticeInterventionsIdParams,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType } from '../../services/api/index';

export const getPracticeInterventions = (
  params?: GetPracticeInterventionsParams,
  signal?: AbortSignal,
) => {
  return API<PracticeInterventionListResponse>({
    url: `/practice-interventions`,
    method: 'get',
    params,
    signal,
  });
};

export const getGetPracticeInterventionsQueryKey = (params?: GetPracticeInterventionsParams) =>
  [`/practice-interventions`, ...(params ? [params] : [])] as const;

export const getGetPracticeInterventionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getPracticeInterventions>>,
  TError = ErrorType<Error>,
>(
  params?: GetPracticeInterventionsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getPracticeInterventions>>, TError, TData>;
  },
): UseQueryOptions<Awaited<ReturnType<typeof getPracticeInterventions>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPracticeInterventionsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPracticeInterventions>>> = ({
    signal,
  }) => getPracticeInterventions(params, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetPracticeInterventionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPracticeInterventions>>
>;
export type GetPracticeInterventionsQueryError = ErrorType<Error>;

export const useGetPracticeInterventions = <
  TData = Awaited<ReturnType<typeof getPracticeInterventions>>,
  TError = ErrorType<Error>,
>(
  params?: GetPracticeInterventionsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getPracticeInterventions>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPracticeInterventionsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postPracticeInterventions = (
  practiceInterventionRequest: PracticeInterventionRequest,
) => {
  return API<PracticeInterventionResponse>({
    url: `/practice-interventions`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: practiceInterventionRequest,
  });
};

export const getPostPracticeInterventionsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPracticeInterventions>>,
    TError,
    { data: PracticeInterventionRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postPracticeInterventions>>,
  TError,
  { data: PracticeInterventionRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postPracticeInterventions>>,
    { data: PracticeInterventionRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postPracticeInterventions(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostPracticeInterventionsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postPracticeInterventions>>
>;
export type PostPracticeInterventionsMutationBody = PracticeInterventionRequest;
export type PostPracticeInterventionsMutationError = ErrorType<Error>;

export const usePostPracticeInterventions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postPracticeInterventions>>,
    TError,
    { data: PracticeInterventionRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPostPracticeInterventionsMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getPracticeInterventionsId = (
  id: number,
  params?: GetPracticeInterventionsIdParams,
  signal?: AbortSignal,
) => {
  return API<PracticeInterventionResponse>({
    url: `/practice-interventions/${id}`,
    method: 'get',
    params,
    signal,
  });
};

export const getGetPracticeInterventionsIdQueryKey = (
  id: number,
  params?: GetPracticeInterventionsIdParams,
) => [`/practice-interventions/${id}`, ...(params ? [params] : [])] as const;

export const getGetPracticeInterventionsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getPracticeInterventionsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetPracticeInterventionsIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getPracticeInterventionsId>>, TError, TData>;
  },
): UseQueryOptions<Awaited<ReturnType<typeof getPracticeInterventionsId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPracticeInterventionsIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPracticeInterventionsId>>> = ({
    signal,
  }) => getPracticeInterventionsId(id, params, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions };
};

export type GetPracticeInterventionsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPracticeInterventionsId>>
>;
export type GetPracticeInterventionsIdQueryError = ErrorType<Error>;

export const useGetPracticeInterventionsId = <
  TData = Awaited<ReturnType<typeof getPracticeInterventionsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetPracticeInterventionsIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getPracticeInterventionsId>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPracticeInterventionsIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putPracticeInterventionsId = (
  id: number,
  practiceInterventionRequest: PracticeInterventionRequest,
) => {
  return API<PracticeInterventionResponse>({
    url: `/practice-interventions/${id}`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: practiceInterventionRequest,
  });
};

export const getPutPracticeInterventionsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putPracticeInterventionsId>>,
    TError,
    { id: number; data: PracticeInterventionRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putPracticeInterventionsId>>,
  TError,
  { id: number; data: PracticeInterventionRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putPracticeInterventionsId>>,
    { id: number; data: PracticeInterventionRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putPracticeInterventionsId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutPracticeInterventionsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putPracticeInterventionsId>>
>;
export type PutPracticeInterventionsIdMutationBody = PracticeInterventionRequest;
export type PutPracticeInterventionsIdMutationError = ErrorType<Error>;

export const usePutPracticeInterventionsId = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putPracticeInterventionsId>>,
    TError,
    { id: number; data: PracticeInterventionRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPutPracticeInterventionsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deletePracticeInterventionsId = (id: number) => {
  return API<number>({ url: `/practice-interventions/${id}`, method: 'delete' });
};

export const getDeletePracticeInterventionsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePracticeInterventionsId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deletePracticeInterventionsId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deletePracticeInterventionsId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deletePracticeInterventionsId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeletePracticeInterventionsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deletePracticeInterventionsId>>
>;

export type DeletePracticeInterventionsIdMutationError = ErrorType<Error>;

export const useDeletePracticeInterventionsId = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePracticeInterventionsId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const mutationOptions = getDeletePracticeInterventionsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
