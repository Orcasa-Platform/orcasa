/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useInfiniteQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';

import type {
  DeckGlLayerListResponse,
  Error,
  GetDeckGlLayersParams,
  DeckGlLayerResponse,
  DeckGlLayerRequest,
} from './strapi.schemas';

export const getDeckGlLayers = (
  params?: GetDeckGlLayersParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<DeckGlLayerListResponse>> => {
  return axios.get(`/deck-gl-layers`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetDeckGlLayersQueryKey = (params?: GetDeckGlLayersParams) =>
  [`/deck-gl-layers`, ...(params ? [params] : [])] as const;

export const getGetDeckGlLayersInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getDeckGlLayers>>,
  TError = AxiosError<Error>
>(
  params?: GetDeckGlLayersParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDeckGlLayers>>, TError, TData>;
    axios?: AxiosRequestConfig;
  }
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDeckGlLayers>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDeckGlLayersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDeckGlLayers>>> = ({
    signal,
    pageParam,
  }) => getDeckGlLayers({ nextId: pageParam, ...params }, { signal, ...axiosOptions });

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions };
};

export type GetDeckGlLayersInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDeckGlLayers>>
>;
export type GetDeckGlLayersInfiniteQueryError = AxiosError<Error>;

export const useGetDeckGlLayersInfinite = <
  TData = Awaited<ReturnType<typeof getDeckGlLayers>>,
  TError = AxiosError<Error>
>(
  params?: GetDeckGlLayersParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDeckGlLayers>>, TError, TData>;
    axios?: AxiosRequestConfig;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDeckGlLayersInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetDeckGlLayersQueryOptions = <
  TData = Awaited<ReturnType<typeof getDeckGlLayers>>,
  TError = AxiosError<Error>
>(
  params?: GetDeckGlLayersParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getDeckGlLayers>>, TError, TData>;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<Awaited<ReturnType<typeof getDeckGlLayers>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDeckGlLayersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDeckGlLayers>>> = ({ signal }) =>
    getDeckGlLayers(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions };
};

export type GetDeckGlLayersQueryResult = NonNullable<Awaited<ReturnType<typeof getDeckGlLayers>>>;
export type GetDeckGlLayersQueryError = AxiosError<Error>;

export const useGetDeckGlLayers = <
  TData = Awaited<ReturnType<typeof getDeckGlLayers>>,
  TError = AxiosError<Error>
>(
  params?: GetDeckGlLayersParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getDeckGlLayers>>, TError, TData>;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDeckGlLayersQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postDeckGlLayers = (
  deckGlLayerRequest: DeckGlLayerRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<DeckGlLayerResponse>> => {
  return axios.post(`/deck-gl-layers`, deckGlLayerRequest, options);
};

export const getPostDeckGlLayersMutationOptions = <
  TError = AxiosError<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDeckGlLayers>>,
    TError,
    { data: DeckGlLayerRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postDeckGlLayers>>,
  TError,
  { data: DeckGlLayerRequest },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postDeckGlLayers>>,
    { data: DeckGlLayerRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postDeckGlLayers(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostDeckGlLayersMutationResult = NonNullable<
  Awaited<ReturnType<typeof postDeckGlLayers>>
>;
export type PostDeckGlLayersMutationBody = DeckGlLayerRequest;
export type PostDeckGlLayersMutationError = AxiosError<Error>;

export const usePostDeckGlLayers = <TError = AxiosError<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDeckGlLayers>>,
    TError,
    { data: DeckGlLayerRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPostDeckGlLayersMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getDeckGlLayersId = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<DeckGlLayerResponse>> => {
  return axios.get(`/deck-gl-layers/${id}`, options);
};

export const getGetDeckGlLayersIdQueryKey = (id: number) => [`/deck-gl-layers/${id}`] as const;

export const getGetDeckGlLayersIdInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getDeckGlLayersId>>,
  TError = AxiosError<Error>
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDeckGlLayersId>>, TError, TData>;
    axios?: AxiosRequestConfig;
  }
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDeckGlLayersId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDeckGlLayersIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDeckGlLayersId>>> = ({ signal }) =>
    getDeckGlLayersId(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions };
};

export type GetDeckGlLayersIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDeckGlLayersId>>
>;
export type GetDeckGlLayersIdInfiniteQueryError = AxiosError<Error>;

export const useGetDeckGlLayersIdInfinite = <
  TData = Awaited<ReturnType<typeof getDeckGlLayersId>>,
  TError = AxiosError<Error>
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDeckGlLayersId>>, TError, TData>;
    axios?: AxiosRequestConfig;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDeckGlLayersIdInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetDeckGlLayersIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getDeckGlLayersId>>,
  TError = AxiosError<Error>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getDeckGlLayersId>>, TError, TData>;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<Awaited<ReturnType<typeof getDeckGlLayersId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDeckGlLayersIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDeckGlLayersId>>> = ({ signal }) =>
    getDeckGlLayersId(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions };
};

export type GetDeckGlLayersIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDeckGlLayersId>>
>;
export type GetDeckGlLayersIdQueryError = AxiosError<Error>;

export const useGetDeckGlLayersId = <
  TData = Awaited<ReturnType<typeof getDeckGlLayersId>>,
  TError = AxiosError<Error>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getDeckGlLayersId>>, TError, TData>;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDeckGlLayersIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putDeckGlLayersId = (
  id: number,
  deckGlLayerRequest: DeckGlLayerRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<DeckGlLayerResponse>> => {
  return axios.put(`/deck-gl-layers/${id}`, deckGlLayerRequest, options);
};

export const getPutDeckGlLayersIdMutationOptions = <
  TError = AxiosError<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putDeckGlLayersId>>,
    TError,
    { id: number; data: DeckGlLayerRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putDeckGlLayersId>>,
  TError,
  { id: number; data: DeckGlLayerRequest },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putDeckGlLayersId>>,
    { id: number; data: DeckGlLayerRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putDeckGlLayersId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutDeckGlLayersIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putDeckGlLayersId>>
>;
export type PutDeckGlLayersIdMutationBody = DeckGlLayerRequest;
export type PutDeckGlLayersIdMutationError = AxiosError<Error>;

export const usePutDeckGlLayersId = <TError = AxiosError<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putDeckGlLayersId>>,
    TError,
    { id: number; data: DeckGlLayerRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPutDeckGlLayersIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteDeckGlLayersId = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<number>> => {
  return axios.delete(`/deck-gl-layers/${id}`, options);
};

export const getDeleteDeckGlLayersIdMutationOptions = <
  TError = AxiosError<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDeckGlLayersId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteDeckGlLayersId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteDeckGlLayersId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteDeckGlLayersId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteDeckGlLayersIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteDeckGlLayersId>>
>;

export type DeleteDeckGlLayersIdMutationError = AxiosError<Error>;

export const useDeleteDeckGlLayersId = <TError = AxiosError<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDeckGlLayersId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getDeleteDeckGlLayersIdMutationOptions(options);

  return useMutation(mutationOptions);
};
