/**
 * Generated by orval v6.16.0 🍺
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useInfiniteQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from '@tanstack/react-query';

import { API } from '../../services/api/index';
import type { ErrorType } from '../../services/api/index';

import type {
  DeckGlLayerListResponse,
  Error,
  GetDeckGlLayersParams,
  DeckGlLayerResponse,
  DeckGlLayerRequest,
} from './strapi.schemas';

export const getDeckGlLayers = (params?: GetDeckGlLayersParams, signal?: AbortSignal) => {
  return API<DeckGlLayerListResponse>({ url: `/deck-gl-layers`, method: 'get', params, signal });
};

export const getGetDeckGlLayersQueryKey = (params?: GetDeckGlLayersParams) =>
  [`/deck-gl-layers`, ...(params ? [params] : [])] as const;

export const getGetDeckGlLayersInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getDeckGlLayers>>,
  TError = ErrorType<Error>
>(
  params?: GetDeckGlLayersParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDeckGlLayers>>, TError, TData>;
  }
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDeckGlLayers>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDeckGlLayersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDeckGlLayers>>> = ({
    signal,
    pageParam,
  }) => getDeckGlLayers({ 'pagination[page]': pageParam, ...params }, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions };
};

export type GetDeckGlLayersInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDeckGlLayers>>
>;
export type GetDeckGlLayersInfiniteQueryError = ErrorType<Error>;

export const useGetDeckGlLayersInfinite = <
  TData = Awaited<ReturnType<typeof getDeckGlLayers>>,
  TError = ErrorType<Error>
>(
  params?: GetDeckGlLayersParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDeckGlLayers>>, TError, TData>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDeckGlLayersInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetDeckGlLayersQueryOptions = <
  TData = Awaited<ReturnType<typeof getDeckGlLayers>>,
  TError = ErrorType<Error>
>(
  params?: GetDeckGlLayersParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getDeckGlLayers>>, TError, TData> }
): UseQueryOptions<Awaited<ReturnType<typeof getDeckGlLayers>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDeckGlLayersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDeckGlLayers>>> = ({ signal }) =>
    getDeckGlLayers(params, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions };
};

export type GetDeckGlLayersQueryResult = NonNullable<Awaited<ReturnType<typeof getDeckGlLayers>>>;
export type GetDeckGlLayersQueryError = ErrorType<Error>;

export const useGetDeckGlLayers = <
  TData = Awaited<ReturnType<typeof getDeckGlLayers>>,
  TError = ErrorType<Error>
>(
  params?: GetDeckGlLayersParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getDeckGlLayers>>, TError, TData> }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDeckGlLayersQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postDeckGlLayers = (deckGlLayerRequest: DeckGlLayerRequest) => {
  return API<DeckGlLayerResponse>({
    url: `/deck-gl-layers`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: deckGlLayerRequest,
  });
};

export const getPostDeckGlLayersMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDeckGlLayers>>,
    TError,
    { data: DeckGlLayerRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postDeckGlLayers>>,
  TError,
  { data: DeckGlLayerRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postDeckGlLayers>>,
    { data: DeckGlLayerRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postDeckGlLayers(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostDeckGlLayersMutationResult = NonNullable<
  Awaited<ReturnType<typeof postDeckGlLayers>>
>;
export type PostDeckGlLayersMutationBody = DeckGlLayerRequest;
export type PostDeckGlLayersMutationError = ErrorType<Error>;

export const usePostDeckGlLayers = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDeckGlLayers>>,
    TError,
    { data: DeckGlLayerRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPostDeckGlLayersMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getDeckGlLayersId = (id: number, signal?: AbortSignal) => {
  return API<DeckGlLayerResponse>({ url: `/deck-gl-layers/${id}`, method: 'get', signal });
};

export const getGetDeckGlLayersIdQueryKey = (id: number) => [`/deck-gl-layers/${id}`] as const;

export const getGetDeckGlLayersIdInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getDeckGlLayersId>>,
  TError = ErrorType<Error>
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDeckGlLayersId>>, TError, TData>;
  }
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDeckGlLayersId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDeckGlLayersIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDeckGlLayersId>>> = ({ signal }) =>
    getDeckGlLayersId(id, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions };
};

export type GetDeckGlLayersIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDeckGlLayersId>>
>;
export type GetDeckGlLayersIdInfiniteQueryError = ErrorType<Error>;

export const useGetDeckGlLayersIdInfinite = <
  TData = Awaited<ReturnType<typeof getDeckGlLayersId>>,
  TError = ErrorType<Error>
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getDeckGlLayersId>>, TError, TData>;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDeckGlLayersIdInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetDeckGlLayersIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getDeckGlLayersId>>,
  TError = ErrorType<Error>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getDeckGlLayersId>>, TError, TData>;
  }
): UseQueryOptions<Awaited<ReturnType<typeof getDeckGlLayersId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDeckGlLayersIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDeckGlLayersId>>> = ({ signal }) =>
    getDeckGlLayersId(id, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions };
};

export type GetDeckGlLayersIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDeckGlLayersId>>
>;
export type GetDeckGlLayersIdQueryError = ErrorType<Error>;

export const useGetDeckGlLayersId = <
  TData = Awaited<ReturnType<typeof getDeckGlLayersId>>,
  TError = ErrorType<Error>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getDeckGlLayersId>>, TError, TData>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDeckGlLayersIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putDeckGlLayersId = (id: number, deckGlLayerRequest: DeckGlLayerRequest) => {
  return API<DeckGlLayerResponse>({
    url: `/deck-gl-layers/${id}`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: deckGlLayerRequest,
  });
};

export const getPutDeckGlLayersIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putDeckGlLayersId>>,
    TError,
    { id: number; data: DeckGlLayerRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putDeckGlLayersId>>,
  TError,
  { id: number; data: DeckGlLayerRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putDeckGlLayersId>>,
    { id: number; data: DeckGlLayerRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putDeckGlLayersId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutDeckGlLayersIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putDeckGlLayersId>>
>;
export type PutDeckGlLayersIdMutationBody = DeckGlLayerRequest;
export type PutDeckGlLayersIdMutationError = ErrorType<Error>;

export const usePutDeckGlLayersId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putDeckGlLayersId>>,
    TError,
    { id: number; data: DeckGlLayerRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPutDeckGlLayersIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteDeckGlLayersId = (id: number) => {
  return API<number>({ url: `/deck-gl-layers/${id}`, method: 'delete' });
};

export const getDeleteDeckGlLayersIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDeckGlLayersId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteDeckGlLayersId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteDeckGlLayersId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteDeckGlLayersId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteDeckGlLayersIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteDeckGlLayersId>>
>;

export type DeleteDeckGlLayersIdMutationError = ErrorType<Error>;

export const useDeleteDeckGlLayersId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDeckGlLayersId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const mutationOptions = getDeleteDeckGlLayersIdMutationOptions(options);

  return useMutation(mutationOptions);
};
