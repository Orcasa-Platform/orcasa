/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  TestimonyListResponse,
  Error,
  GetTestimoniesParams,
  TestimonyResponse,
  TestimonyRequest,
  GetTestimoniesIdParams,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType } from '../../services/api/index';

export const getTestimonies = (params?: GetTestimoniesParams, signal?: AbortSignal) => {
  return API<TestimonyListResponse>({ url: `/testimonies`, method: 'get', params, signal });
};

export const getGetTestimoniesQueryKey = (params?: GetTestimoniesParams) =>
  [`/testimonies`, ...(params ? [params] : [])] as const;

export const getGetTestimoniesQueryOptions = <
  TData = Awaited<ReturnType<typeof getTestimonies>>,
  TError = ErrorType<Error>,
>(
  params?: GetTestimoniesParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getTestimonies>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<typeof getTestimonies>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTestimoniesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTestimonies>>> = ({ signal }) =>
    getTestimonies(params, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetTestimoniesQueryResult = NonNullable<Awaited<ReturnType<typeof getTestimonies>>>;
export type GetTestimoniesQueryError = ErrorType<Error>;

export const useGetTestimonies = <
  TData = Awaited<ReturnType<typeof getTestimonies>>,
  TError = ErrorType<Error>,
>(
  params?: GetTestimoniesParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getTestimonies>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTestimoniesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postTestimonies = (testimonyRequest: TestimonyRequest) => {
  return API<TestimonyResponse>({
    url: `/testimonies`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: testimonyRequest,
  });
};

export const getPostTestimoniesMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postTestimonies>>,
    TError,
    { data: TestimonyRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postTestimonies>>,
  TError,
  { data: TestimonyRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postTestimonies>>,
    { data: TestimonyRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postTestimonies(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostTestimoniesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postTestimonies>>
>;
export type PostTestimoniesMutationBody = TestimonyRequest;
export type PostTestimoniesMutationError = ErrorType<Error>;

export const usePostTestimonies = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postTestimonies>>,
    TError,
    { data: TestimonyRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPostTestimoniesMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getTestimoniesId = (
  id: number,
  params?: GetTestimoniesIdParams,
  signal?: AbortSignal,
) => {
  return API<TestimonyResponse>({ url: `/testimonies/${id}`, method: 'get', params, signal });
};

export const getGetTestimoniesIdQueryKey = (id: number, params?: GetTestimoniesIdParams) =>
  [`/testimonies/${id}`, ...(params ? [params] : [])] as const;

export const getGetTestimoniesIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getTestimoniesId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetTestimoniesIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getTestimoniesId>>, TError, TData>;
  },
): UseQueryOptions<Awaited<ReturnType<typeof getTestimoniesId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTestimoniesIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTestimoniesId>>> = ({ signal }) =>
    getTestimoniesId(id, params, signal);

  return { queryKey, queryFn, enabled: !!id, ...queryOptions };
};

export type GetTestimoniesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTestimoniesId>>>;
export type GetTestimoniesIdQueryError = ErrorType<Error>;

export const useGetTestimoniesId = <
  TData = Awaited<ReturnType<typeof getTestimoniesId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetTestimoniesIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getTestimoniesId>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTestimoniesIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putTestimoniesId = (id: number, testimonyRequest: TestimonyRequest) => {
  return API<TestimonyResponse>({
    url: `/testimonies/${id}`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: testimonyRequest,
  });
};

export const getPutTestimoniesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putTestimoniesId>>,
    TError,
    { id: number; data: TestimonyRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putTestimoniesId>>,
  TError,
  { id: number; data: TestimonyRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putTestimoniesId>>,
    { id: number; data: TestimonyRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putTestimoniesId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutTestimoniesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putTestimoniesId>>
>;
export type PutTestimoniesIdMutationBody = TestimonyRequest;
export type PutTestimoniesIdMutationError = ErrorType<Error>;

export const usePutTestimoniesId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putTestimoniesId>>,
    TError,
    { id: number; data: TestimonyRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPutTestimoniesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteTestimoniesId = (id: number) => {
  return API<number>({ url: `/testimonies/${id}`, method: 'delete' });
};

export const getDeleteTestimoniesIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTestimoniesId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTestimoniesId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTestimoniesId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteTestimoniesId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteTestimoniesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteTestimoniesId>>
>;

export type DeleteTestimoniesIdMutationError = ErrorType<Error>;

export const useDeleteTestimoniesId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTestimoniesId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const mutationOptions = getDeleteTestimoniesIdMutationOptions(options);

  return useMutation(mutationOptions);
};
