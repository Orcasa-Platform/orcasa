/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useInfiniteQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  OrganizationListResponse,
  Error,
  GetOrganizationsParams,
  OrganizationResponse,
  OrganizationRequest,
  GetOrganizationsIdParams,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType } from '../../services/api/index';

export const getOrganizations = (params?: GetOrganizationsParams, signal?: AbortSignal) => {
  return API<OrganizationListResponse>({ url: `/organizations`, method: 'get', params, signal });
};

export const getGetOrganizationsQueryKey = (params?: GetOrganizationsParams) =>
  [`/organizations`, ...(params ? [params] : [])] as const;

export const getGetOrganizationsInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getOrganizations>>,
  TError = ErrorType<Error>,
>(
  params?: GetOrganizationsParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getOrganizations>>, TError, TData>;
  },
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getOrganizations>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetOrganizationsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrganizations>>> = ({
    signal,
    pageParam,
  }) => getOrganizations({ 'pagination[page]': pageParam, ...params }, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions };
};

export type GetOrganizationsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOrganizations>>
>;
export type GetOrganizationsInfiniteQueryError = ErrorType<Error>;

export const useGetOrganizationsInfinite = <
  TData = Awaited<ReturnType<typeof getOrganizations>>,
  TError = ErrorType<Error>,
>(
  params?: GetOrganizationsParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getOrganizations>>, TError, TData>;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetOrganizationsInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetOrganizationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getOrganizations>>,
  TError = ErrorType<Error>,
>(
  params?: GetOrganizationsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getOrganizations>>, TError, TData>;
  },
): UseQueryOptions<Awaited<ReturnType<typeof getOrganizations>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetOrganizationsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrganizations>>> = ({ signal }) =>
    getOrganizations(params, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions };
};

export type GetOrganizationsQueryResult = NonNullable<Awaited<ReturnType<typeof getOrganizations>>>;
export type GetOrganizationsQueryError = ErrorType<Error>;

export const useGetOrganizations = <
  TData = Awaited<ReturnType<typeof getOrganizations>>,
  TError = ErrorType<Error>,
>(
  params?: GetOrganizationsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getOrganizations>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetOrganizationsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postOrganizations = (organizationRequest: OrganizationRequest) => {
  return API<OrganizationResponse>({
    url: `/organizations`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: organizationRequest,
  });
};

export const getPostOrganizationsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postOrganizations>>,
    TError,
    { data: OrganizationRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postOrganizations>>,
  TError,
  { data: OrganizationRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postOrganizations>>,
    { data: OrganizationRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postOrganizations(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostOrganizationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postOrganizations>>
>;
export type PostOrganizationsMutationBody = OrganizationRequest;
export type PostOrganizationsMutationError = ErrorType<Error>;

export const usePostOrganizations = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postOrganizations>>,
    TError,
    { data: OrganizationRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPostOrganizationsMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getOrganizationsId = (
  id: number,
  params?: GetOrganizationsIdParams,
  signal?: AbortSignal,
) => {
  return API<OrganizationResponse>({ url: `/organizations/${id}`, method: 'get', params, signal });
};

export const getGetOrganizationsIdQueryKey = (id: number, params?: GetOrganizationsIdParams) =>
  [`/organizations/${id}`, ...(params ? [params] : [])] as const;

export const getGetOrganizationsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getOrganizationsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetOrganizationsIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getOrganizationsId>>, TError, TData>;
  },
): UseQueryOptions<Awaited<ReturnType<typeof getOrganizationsId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetOrganizationsIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrganizationsId>>> = ({ signal }) =>
    getOrganizationsId(id, params, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions };
};

export type GetOrganizationsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOrganizationsId>>
>;
export type GetOrganizationsIdQueryError = ErrorType<Error>;

export const useGetOrganizationsId = <
  TData = Awaited<ReturnType<typeof getOrganizationsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetOrganizationsIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getOrganizationsId>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetOrganizationsIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putOrganizationsId = (id: number, organizationRequest: OrganizationRequest) => {
  return API<OrganizationResponse>({
    url: `/organizations/${id}`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: organizationRequest,
  });
};

export const getPutOrganizationsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putOrganizationsId>>,
    TError,
    { id: number; data: OrganizationRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putOrganizationsId>>,
  TError,
  { id: number; data: OrganizationRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putOrganizationsId>>,
    { id: number; data: OrganizationRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putOrganizationsId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutOrganizationsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putOrganizationsId>>
>;
export type PutOrganizationsIdMutationBody = OrganizationRequest;
export type PutOrganizationsIdMutationError = ErrorType<Error>;

export const usePutOrganizationsId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putOrganizationsId>>,
    TError,
    { id: number; data: OrganizationRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPutOrganizationsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteOrganizationsId = (id: number) => {
  return API<number>({ url: `/organizations/${id}`, method: 'delete' });
};

export const getDeleteOrganizationsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteOrganizationsId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteOrganizationsId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteOrganizationsId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteOrganizationsId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteOrganizationsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteOrganizationsId>>
>;

export type DeleteOrganizationsIdMutationError = ErrorType<Error>;

export const useDeleteOrganizationsId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteOrganizationsId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const mutationOptions = getDeleteOrganizationsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
