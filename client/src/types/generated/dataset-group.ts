/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  DatasetGroupListResponse,
  Error,
  GetDatasetGroupsParams,
  DatasetGroupResponse,
  DatasetGroupRequest,
} from './strapi.schemas';

export const getDatasetGroups = (
  params?: GetDatasetGroupsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<DatasetGroupListResponse>> => {
  return axios.get(`/dataset-groups`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetDatasetGroupsQueryKey = (params?: GetDatasetGroupsParams) =>
  [`/dataset-groups`, ...(params ? [params] : [])] as const;

export const getGetDatasetGroupsQueryOptions = <
  TData = Awaited<ReturnType<typeof getDatasetGroups>>,
  TError = AxiosError<Error>,
>(
  params?: GetDatasetGroupsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getDatasetGroups>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
): UseQueryOptions<Awaited<ReturnType<typeof getDatasetGroups>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDatasetGroupsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDatasetGroups>>> = ({ signal }) =>
    getDatasetGroups(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions };
};

export type GetDatasetGroupsQueryResult = NonNullable<Awaited<ReturnType<typeof getDatasetGroups>>>;
export type GetDatasetGroupsQueryError = AxiosError<Error>;

export const useGetDatasetGroups = <
  TData = Awaited<ReturnType<typeof getDatasetGroups>>,
  TError = AxiosError<Error>,
>(
  params?: GetDatasetGroupsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getDatasetGroups>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDatasetGroupsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postDatasetGroups = (
  datasetGroupRequest: DatasetGroupRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<DatasetGroupResponse>> => {
  return axios.post(`/dataset-groups`, datasetGroupRequest, options);
};

export const getPostDatasetGroupsMutationOptions = <
  TError = AxiosError<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDatasetGroups>>,
    TError,
    { data: DatasetGroupRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postDatasetGroups>>,
  TError,
  { data: DatasetGroupRequest },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postDatasetGroups>>,
    { data: DatasetGroupRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postDatasetGroups(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostDatasetGroupsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postDatasetGroups>>
>;
export type PostDatasetGroupsMutationBody = DatasetGroupRequest;
export type PostDatasetGroupsMutationError = AxiosError<Error>;

export const usePostDatasetGroups = <TError = AxiosError<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postDatasetGroups>>,
    TError,
    { data: DatasetGroupRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPostDatasetGroupsMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getDatasetGroupsId = (
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<DatasetGroupResponse>> => {
  return axios.get(`/dataset-groups/${id}`, options);
};

export const getGetDatasetGroupsIdQueryKey = (id: number) => [`/dataset-groups/${id}`] as const;

export const getGetDatasetGroupsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getDatasetGroupsId>>,
  TError = AxiosError<Error>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getDatasetGroupsId>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
): UseQueryOptions<Awaited<ReturnType<typeof getDatasetGroupsId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDatasetGroupsIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDatasetGroupsId>>> = ({ signal }) =>
    getDatasetGroupsId(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, ...queryOptions };
};

export type GetDatasetGroupsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDatasetGroupsId>>
>;
export type GetDatasetGroupsIdQueryError = AxiosError<Error>;

export const useGetDatasetGroupsId = <
  TData = Awaited<ReturnType<typeof getDatasetGroupsId>>,
  TError = AxiosError<Error>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getDatasetGroupsId>>, TError, TData>;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDatasetGroupsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putDatasetGroupsId = (
  id: number,
  datasetGroupRequest: DatasetGroupRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<DatasetGroupResponse>> => {
  return axios.put(`/dataset-groups/${id}`, datasetGroupRequest, options);
};

export const getPutDatasetGroupsIdMutationOptions = <
  TError = AxiosError<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putDatasetGroupsId>>,
    TError,
    { id: number; data: DatasetGroupRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putDatasetGroupsId>>,
  TError,
  { id: number; data: DatasetGroupRequest },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putDatasetGroupsId>>,
    { id: number; data: DatasetGroupRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putDatasetGroupsId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutDatasetGroupsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putDatasetGroupsId>>
>;
export type PutDatasetGroupsIdMutationBody = DatasetGroupRequest;
export type PutDatasetGroupsIdMutationError = AxiosError<Error>;

export const usePutDatasetGroupsId = <TError = AxiosError<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putDatasetGroupsId>>,
    TError,
    { id: number; data: DatasetGroupRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPutDatasetGroupsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteDatasetGroupsId = (
  id: number,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<number>> => {
  return axios.delete(`/dataset-groups/${id}`, options);
};

export const getDeleteDatasetGroupsIdMutationOptions = <
  TError = AxiosError<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDatasetGroupsId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteDatasetGroupsId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteDatasetGroupsId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteDatasetGroupsId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteDatasetGroupsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteDatasetGroupsId>>
>;

export type DeleteDatasetGroupsIdMutationError = AxiosError<Error>;

export const useDeleteDatasetGroupsId = <TError = AxiosError<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteDatasetGroupsId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getDeleteDatasetGroupsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
