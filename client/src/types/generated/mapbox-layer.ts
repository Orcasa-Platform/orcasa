/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useInfiniteQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';

import type {
  MapboxLayerListResponse,
  Error,
  GetMapboxLayersParams,
  MapboxLayerResponse,
  MapboxLayerRequest,
} from './strapi.schemas';

export const getMapboxLayers = (
  params?: GetMapboxLayersParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<MapboxLayerListResponse>> => {
  return axios.get(`/mapbox-layers`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetMapboxLayersQueryKey = (params?: GetMapboxLayersParams) =>
  [`/mapbox-layers`, ...(params ? [params] : [])] as const;

export const getGetMapboxLayersInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getMapboxLayers>>,
  TError = AxiosError<Error>
>(
  params?: GetMapboxLayersParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMapboxLayers>>, TError, TData>;
    axios?: AxiosRequestConfig;
  }
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMapboxLayers>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMapboxLayersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMapboxLayers>>> = ({
    signal,
    pageParam,
  }) => getMapboxLayers({ nextId: pageParam, ...params }, { signal, ...axiosOptions });

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions };
};

export type GetMapboxLayersInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMapboxLayers>>
>;
export type GetMapboxLayersInfiniteQueryError = AxiosError<Error>;

export const useGetMapboxLayersInfinite = <
  TData = Awaited<ReturnType<typeof getMapboxLayers>>,
  TError = AxiosError<Error>
>(
  params?: GetMapboxLayersParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMapboxLayers>>, TError, TData>;
    axios?: AxiosRequestConfig;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMapboxLayersInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetMapboxLayersQueryOptions = <
  TData = Awaited<ReturnType<typeof getMapboxLayers>>,
  TError = AxiosError<Error>
>(
  params?: GetMapboxLayersParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getMapboxLayers>>, TError, TData>;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<Awaited<ReturnType<typeof getMapboxLayers>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMapboxLayersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMapboxLayers>>> = ({ signal }) =>
    getMapboxLayers(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions };
};

export type GetMapboxLayersQueryResult = NonNullable<Awaited<ReturnType<typeof getMapboxLayers>>>;
export type GetMapboxLayersQueryError = AxiosError<Error>;

export const useGetMapboxLayers = <
  TData = Awaited<ReturnType<typeof getMapboxLayers>>,
  TError = AxiosError<Error>
>(
  params?: GetMapboxLayersParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getMapboxLayers>>, TError, TData>;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMapboxLayersQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postMapboxLayers = (
  mapboxLayerRequest: MapboxLayerRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<MapboxLayerResponse>> => {
  return axios.post(`/mapbox-layers`, mapboxLayerRequest, options);
};

export const getPostMapboxLayersMutationOptions = <
  TError = AxiosError<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMapboxLayers>>,
    TError,
    { data: MapboxLayerRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postMapboxLayers>>,
  TError,
  { data: MapboxLayerRequest },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postMapboxLayers>>,
    { data: MapboxLayerRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postMapboxLayers(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostMapboxLayersMutationResult = NonNullable<
  Awaited<ReturnType<typeof postMapboxLayers>>
>;
export type PostMapboxLayersMutationBody = MapboxLayerRequest;
export type PostMapboxLayersMutationError = AxiosError<Error>;

export const usePostMapboxLayers = <TError = AxiosError<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postMapboxLayers>>,
    TError,
    { data: MapboxLayerRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPostMapboxLayersMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getMapboxLayersId = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<MapboxLayerResponse>> => {
  return axios.get(`/mapbox-layers/${id}`, options);
};

export const getGetMapboxLayersIdQueryKey = (id: number) => [`/mapbox-layers/${id}`] as const;

export const getGetMapboxLayersIdInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getMapboxLayersId>>,
  TError = AxiosError<Error>
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMapboxLayersId>>, TError, TData>;
    axios?: AxiosRequestConfig;
  }
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMapboxLayersId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMapboxLayersIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMapboxLayersId>>> = ({ signal }) =>
    getMapboxLayersId(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions };
};

export type GetMapboxLayersIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMapboxLayersId>>
>;
export type GetMapboxLayersIdInfiniteQueryError = AxiosError<Error>;

export const useGetMapboxLayersIdInfinite = <
  TData = Awaited<ReturnType<typeof getMapboxLayersId>>,
  TError = AxiosError<Error>
>(
  id: number,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getMapboxLayersId>>, TError, TData>;
    axios?: AxiosRequestConfig;
  }
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMapboxLayersIdInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetMapboxLayersIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getMapboxLayersId>>,
  TError = AxiosError<Error>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getMapboxLayersId>>, TError, TData>;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<Awaited<ReturnType<typeof getMapboxLayersId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMapboxLayersIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMapboxLayersId>>> = ({ signal }) =>
    getMapboxLayersId(id, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions };
};

export type GetMapboxLayersIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMapboxLayersId>>
>;
export type GetMapboxLayersIdQueryError = AxiosError<Error>;

export const useGetMapboxLayersId = <
  TData = Awaited<ReturnType<typeof getMapboxLayersId>>,
  TError = AxiosError<Error>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getMapboxLayersId>>, TError, TData>;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetMapboxLayersIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putMapboxLayersId = (
  id: number,
  mapboxLayerRequest: MapboxLayerRequest,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<MapboxLayerResponse>> => {
  return axios.put(`/mapbox-layers/${id}`, mapboxLayerRequest, options);
};

export const getPutMapboxLayersIdMutationOptions = <
  TError = AxiosError<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putMapboxLayersId>>,
    TError,
    { id: number; data: MapboxLayerRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putMapboxLayersId>>,
  TError,
  { id: number; data: MapboxLayerRequest },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putMapboxLayersId>>,
    { id: number; data: MapboxLayerRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putMapboxLayersId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutMapboxLayersIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putMapboxLayersId>>
>;
export type PutMapboxLayersIdMutationBody = MapboxLayerRequest;
export type PutMapboxLayersIdMutationError = AxiosError<Error>;

export const usePutMapboxLayersId = <TError = AxiosError<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putMapboxLayersId>>,
    TError,
    { id: number; data: MapboxLayerRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getPutMapboxLayersIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteMapboxLayersId = (
  id: number,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<number>> => {
  return axios.delete(`/mapbox-layers/${id}`, options);
};

export const getDeleteMapboxLayersIdMutationOptions = <
  TError = AxiosError<Error>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMapboxLayersId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteMapboxLayersId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteMapboxLayersId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteMapboxLayersId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteMapboxLayersIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteMapboxLayersId>>
>;

export type DeleteMapboxLayersIdMutationError = AxiosError<Error>;

export const useDeleteMapboxLayersId = <TError = AxiosError<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMapboxLayersId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const mutationOptions = getDeleteMapboxLayersIdMutationOptions(options);

  return useMutation(mutationOptions);
};
