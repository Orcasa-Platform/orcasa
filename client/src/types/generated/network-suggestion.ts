/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  NetworkSuggestionResponse,
  Error,
  GetNetworkSuggestionParams,
  NetworkSuggestionRequest,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType } from '../../services/api/index';

export const getNetworkSuggestion = (params?: GetNetworkSuggestionParams, signal?: AbortSignal) => {
  return API<NetworkSuggestionResponse>({
    url: `/network-suggestion`,
    method: 'get',
    params,
    signal,
  });
};

export const getGetNetworkSuggestionQueryKey = (params?: GetNetworkSuggestionParams) =>
  [`/network-suggestion`, ...(params ? [params] : [])] as const;

export const getGetNetworkSuggestionQueryOptions = <
  TData = Awaited<ReturnType<typeof getNetworkSuggestion>>,
  TError = ErrorType<Error>,
>(
  params?: GetNetworkSuggestionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getNetworkSuggestion>>, TError, TData>;
  },
): UseQueryOptions<Awaited<ReturnType<typeof getNetworkSuggestion>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetNetworkSuggestionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getNetworkSuggestion>>> = ({ signal }) =>
    getNetworkSuggestion(params, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type GetNetworkSuggestionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNetworkSuggestion>>
>;
export type GetNetworkSuggestionQueryError = ErrorType<Error>;

export const useGetNetworkSuggestion = <
  TData = Awaited<ReturnType<typeof getNetworkSuggestion>>,
  TError = ErrorType<Error>,
>(
  params?: GetNetworkSuggestionParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getNetworkSuggestion>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetNetworkSuggestionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putNetworkSuggestion = (networkSuggestionRequest: NetworkSuggestionRequest) => {
  return API<NetworkSuggestionResponse>({
    url: `/network-suggestion`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: networkSuggestionRequest,
  });
};

export const getPutNetworkSuggestionMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putNetworkSuggestion>>,
    TError,
    { data: NetworkSuggestionRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putNetworkSuggestion>>,
  TError,
  { data: NetworkSuggestionRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putNetworkSuggestion>>,
    { data: NetworkSuggestionRequest }
  > = (props) => {
    const { data } = props ?? {};

    return putNetworkSuggestion(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutNetworkSuggestionMutationResult = NonNullable<
  Awaited<ReturnType<typeof putNetworkSuggestion>>
>;
export type PutNetworkSuggestionMutationBody = NetworkSuggestionRequest;
export type PutNetworkSuggestionMutationError = ErrorType<Error>;

export const usePutNetworkSuggestion = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putNetworkSuggestion>>,
    TError,
    { data: NetworkSuggestionRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPutNetworkSuggestionMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteNetworkSuggestion = () => {
  return API<number>({ url: `/network-suggestion`, method: 'delete' });
};

export const getDeleteNetworkSuggestionMutationOptions = <
  TError = ErrorType<Error>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteNetworkSuggestion>>,
    TError,
    TVariables,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteNetworkSuggestion>>,
  TError,
  TVariables,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteNetworkSuggestion>>,
    TVariables
  > = () => {
    return deleteNetworkSuggestion();
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteNetworkSuggestionMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteNetworkSuggestion>>
>;

export type DeleteNetworkSuggestionMutationError = ErrorType<Error>;

export const useDeleteNetworkSuggestion = <
  TError = ErrorType<Error>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteNetworkSuggestion>>,
    TError,
    TVariables,
    TContext
  >;
}) => {
  const mutationOptions = getDeleteNetworkSuggestionMutationOptions(options);

  return useMutation(mutationOptions);
};
