/**
 * Generated by orval v6.17.0 🍺
 * Do not edit manually.
 * DOCUMENTATION
 * OpenAPI spec version: 1.0.0
 */
import { useQuery, useInfiniteQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import type {
  LayerGroupListResponse,
  Error,
  GetLayerGroupsParams,
  LayerGroupResponse,
  LayerGroupRequest,
  GetLayerGroupsIdParams,
} from './strapi.schemas';
import { API } from '../../services/api/index';
import type { ErrorType } from '../../services/api/index';

export const getLayerGroups = (params?: GetLayerGroupsParams, signal?: AbortSignal) => {
  return API<LayerGroupListResponse>({ url: `/layer-groups`, method: 'get', params, signal });
};

export const getGetLayerGroupsQueryKey = (params?: GetLayerGroupsParams) =>
  [`/layer-groups`, ...(params ? [params] : [])] as const;

export const getGetLayerGroupsInfiniteQueryOptions = <
  TData = Awaited<ReturnType<typeof getLayerGroups>>,
  TError = ErrorType<Error>,
>(
  params?: GetLayerGroupsParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getLayerGroups>>, TError, TData>;
  },
): UseInfiniteQueryOptions<Awaited<ReturnType<typeof getLayerGroups>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetLayerGroupsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLayerGroups>>> = ({
    signal,
    pageParam,
  }) => getLayerGroups({ 'pagination[page]': pageParam, ...params }, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions };
};

export type GetLayerGroupsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLayerGroups>>
>;
export type GetLayerGroupsInfiniteQueryError = ErrorType<Error>;

export const useGetLayerGroupsInfinite = <
  TData = Awaited<ReturnType<typeof getLayerGroups>>,
  TError = ErrorType<Error>,
>(
  params?: GetLayerGroupsParams,
  options?: {
    query?: UseInfiniteQueryOptions<Awaited<ReturnType<typeof getLayerGroups>>, TError, TData>;
  },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLayerGroupsInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getGetLayerGroupsQueryOptions = <
  TData = Awaited<ReturnType<typeof getLayerGroups>>,
  TError = ErrorType<Error>,
>(
  params?: GetLayerGroupsParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getLayerGroups>>, TError, TData> },
): UseQueryOptions<Awaited<ReturnType<typeof getLayerGroups>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetLayerGroupsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLayerGroups>>> = ({ signal }) =>
    getLayerGroups(params, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions };
};

export type GetLayerGroupsQueryResult = NonNullable<Awaited<ReturnType<typeof getLayerGroups>>>;
export type GetLayerGroupsQueryError = ErrorType<Error>;

export const useGetLayerGroups = <
  TData = Awaited<ReturnType<typeof getLayerGroups>>,
  TError = ErrorType<Error>,
>(
  params?: GetLayerGroupsParams,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof getLayerGroups>>, TError, TData> },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLayerGroupsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const postLayerGroups = (layerGroupRequest: LayerGroupRequest) => {
  return API<LayerGroupResponse>({
    url: `/layer-groups`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: layerGroupRequest,
  });
};

export const getPostLayerGroupsMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLayerGroups>>,
    TError,
    { data: LayerGroupRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postLayerGroups>>,
  TError,
  { data: LayerGroupRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postLayerGroups>>,
    { data: LayerGroupRequest }
  > = (props) => {
    const { data } = props ?? {};

    return postLayerGroups(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostLayerGroupsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postLayerGroups>>
>;
export type PostLayerGroupsMutationBody = LayerGroupRequest;
export type PostLayerGroupsMutationError = ErrorType<Error>;

export const usePostLayerGroups = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLayerGroups>>,
    TError,
    { data: LayerGroupRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPostLayerGroupsMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getLayerGroupsId = (
  id: number,
  params?: GetLayerGroupsIdParams,
  signal?: AbortSignal,
) => {
  return API<LayerGroupResponse>({ url: `/layer-groups/${id}`, method: 'get', params, signal });
};

export const getGetLayerGroupsIdQueryKey = (id: number, params?: GetLayerGroupsIdParams) =>
  [`/layer-groups/${id}`, ...(params ? [params] : [])] as const;

export const getGetLayerGroupsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getLayerGroupsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetLayerGroupsIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getLayerGroupsId>>, TError, TData>;
  },
): UseQueryOptions<Awaited<ReturnType<typeof getLayerGroupsId>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetLayerGroupsIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLayerGroupsId>>> = ({ signal }) =>
    getLayerGroupsId(id, params, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions };
};

export type GetLayerGroupsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getLayerGroupsId>>>;
export type GetLayerGroupsIdQueryError = ErrorType<Error>;

export const useGetLayerGroupsId = <
  TData = Awaited<ReturnType<typeof getLayerGroupsId>>,
  TError = ErrorType<Error>,
>(
  id: number,
  params?: GetLayerGroupsIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getLayerGroupsId>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLayerGroupsIdQueryOptions(id, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const putLayerGroupsId = (id: number, layerGroupRequest: LayerGroupRequest) => {
  return API<LayerGroupResponse>({
    url: `/layer-groups/${id}`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: layerGroupRequest,
  });
};

export const getPutLayerGroupsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putLayerGroupsId>>,
    TError,
    { id: number; data: LayerGroupRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putLayerGroupsId>>,
  TError,
  { id: number; data: LayerGroupRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putLayerGroupsId>>,
    { id: number; data: LayerGroupRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return putLayerGroupsId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutLayerGroupsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putLayerGroupsId>>
>;
export type PutLayerGroupsIdMutationBody = LayerGroupRequest;
export type PutLayerGroupsIdMutationError = ErrorType<Error>;

export const usePutLayerGroupsId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putLayerGroupsId>>,
    TError,
    { id: number; data: LayerGroupRequest },
    TContext
  >;
}) => {
  const mutationOptions = getPutLayerGroupsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteLayerGroupsId = (id: number) => {
  return API<number>({ url: `/layer-groups/${id}`, method: 'delete' });
};

export const getDeleteLayerGroupsIdMutationOptions = <
  TError = ErrorType<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteLayerGroupsId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteLayerGroupsId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteLayerGroupsId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteLayerGroupsId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteLayerGroupsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteLayerGroupsId>>
>;

export type DeleteLayerGroupsIdMutationError = ErrorType<Error>;

export const useDeleteLayerGroupsId = <TError = ErrorType<Error>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteLayerGroupsId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const mutationOptions = getDeleteLayerGroupsIdMutationOptions(options);

  return useMutation(mutationOptions);
};
